Original Function Name,Function Code,Hash Mask Name
appendOption,"    private void appendOption(final StringBuffer buff, final Option option, final boolean required)
    {
        if (!required)
        {
            buff.append(""["");
        }

        if (option.getOpt() != null)
        {
            buff.append(""-"").append(option.getOpt());
        }
        else
        {
            buff.append(""--"").append(option.getLongOpt());
        }
        
        // if the Option has a value and a non blank argname
        if (option.hasArg() && option.hasArgName())
        {
            buff.append(option.getOpt() == null ? longOptSeparator : "" "");
            buff.append(""<"").append(option.getArgName()).append("">"");
        }
        
        // if the Option is not a required option
        if (!required)
        {
            buff.append(""]"");
        }
    }",func_099d7740be480f1b06c73debe2b527dedd3dd501fbb81121fbb2f3732eb74587
compare,,func_1241626eb8ca542931d74f9ac0f6b294e791ff041ab106789b514331e74c9830
reset,"    private static void reset()
    {
        description = null;
        argName = ""arg"";
        longopt = null;
        type = null;
        required = false;
        numberOfArgs = Option.UNINITIALIZED;
        optionalArg = false;
        valuesep = (char) 0;
    }",func_01be30bb4a27765c37462e6bf2a0bf8b6c109f9be9d81e6fd56455db1a736a43
