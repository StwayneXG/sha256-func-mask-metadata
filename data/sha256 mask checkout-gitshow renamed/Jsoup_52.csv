Original Function Name,Function Code,Hash Mask Name
parseByteData,"    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
        String docData;
        Document doc = null;

        // look for BOM - overrides any other header or input
        charsetName = detectCharsetFromBom(byteData, charsetName);

        if (charsetName == null) { // determine from meta. safe first parse as UTF-8
            // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
            docData = Charset.forName(defaultCharset).decode(byteData).toString();
            doc = parser.parseInput(docData, baseUri);
            Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
            String foundCharset = null; // if not found, will keep utf-8 as best attempt
            if (meta != null) {
                if (meta.hasAttr(""http-equiv"")) {
                    foundCharset = getCharsetFromContentType(meta.attr(""content""));
                }
                if (foundCharset == null && meta.hasAttr(""charset"")) {
                    try {
                        if (Charset.isSupported(meta.attr(""charset""))) {
                    foundCharset = meta.attr(""charset"");
                        }
                    } catch (IllegalCharsetNameException e) {
                        foundCharset = null;
                    }
                }
            }
            // look for <?xml encoding='ISO-8859-1'?>
            if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {
                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);
                if (prolog.name().equals(""xml"")) {
                    foundCharset = prolog.attr(""encoding"");
                }
            }
            foundCharset = validateCharset(foundCharset);

            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode
                foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        } else { // specified by content type header (or by user on file load)
            Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
            docData = Charset.forName(charsetName).decode(byteData).toString();
        }
        if (doc == null) {
            doc = parser.parseInput(docData, baseUri);
            doc.outputSettings().charset(charsetName);
        }
        return doc;
    }",func_1166cdbbf9945ad7abdc3a2e8e82e1285fe89259865a1d2a39e0c35a60042cc1
outerHtmlHead,"	void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
        accum
            .append(""<"")
            .append(isProcessingInstruction ? ""!"" : ""?"")
                .append(getWholeDeclaration())
            .append("">"");
    }",func_1738bb3ad04647644fb19d04d2556d08aa220ac233873e60390583ae4f6b3d2a
getWholeDeclaration,"    public String getWholeDeclaration() {
        final String decl = this.name;
        if(decl.equals(""xml"") && attributes.size() > 1 ) {
            StringBuilder sb = new StringBuilder(decl);
            final String version = attributes.get(""version"");
            if( version != null ) {
                sb.append("" version=\"""").append(version).append(""\"""");
            }
            final String encoding = attributes.get(""encoding"");
            if( encoding != null ) {
                sb.append("" encoding=\"""").append(encoding).append(""\"""");
            }
            return sb.toString();
        }
        else {
            return this.name;
        }
    }",func_583f147af8c2881fd6644f42b0c42283c09e7287600d5b1380a3ae6aef1b3425
insert,"    Element insert(Token.StartTag startTag) {
        Tag tag = Tag.valueOf(startTag.name());
        // todo: wonder if for xml parsing, should treat all tags as unknown? because it's not html.
        Element el = new Element(tag, baseUri, startTag.attributes);
        insertNode(el);
        if (startTag.isSelfClosing()) {
            tokeniser.acknowledgeSelfClosingFlag();
            if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output. see above.
                tag.setSelfClosing();
        } else {
            stack.add(el);
        }
        return el;
    }",func_1e22560cee2c4b727c6a117792e04a6769efbe2395f8e2528c603a153a446477
