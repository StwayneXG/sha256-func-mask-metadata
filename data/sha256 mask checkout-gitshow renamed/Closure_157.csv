Original Function Name,Function Code,Hash Mask Name
processPrototypeParent,"    private void processPrototypeParent(Node n, CompilerInput input) {
      switch (n.getType()) {
        // Foo.prototype.getBar = function() { ... }
        case Token.GETPROP:
        case Token.GETELEM:
          Node dest = n.getFirstChild().getNext();
          if (dest.getType() == Token.STRING) {
            markPrototypePropertyCandidate(dest, input);
          }
          break;

        // Foo.prototype = { ""getBar"" : function() { ... } }
        case Token.ASSIGN:
        case Token.CALL:
          Node map;
          if (n.getType() == Token.ASSIGN) {
            map = n.getFirstChild().getNext();
          } else {
            map = n.getLastChild();
          }
          if (map.getType() == Token.OBJECTLIT) {
            // Remember this node so that we can avoid processing it again when
            // the traversal reaches it.
            prototypeObjLits.add(map);

            for (Node key = map.getFirstChild();
                 key != null; key = key.getNext()) {
              if (key.getType() != Token.NUMBER) {
               // May be STRING, GET, or SET
                markPrototypePropertyCandidate(key, input);
              }
            }
          }
          break;
      }
    }",func_c04a63b6b8e8a1f74d106bf2ca0c5dc6064c455977dce1a098ae36f8740a5216
visit,"    public void visit(NodeTraversal t, Node n, Node parent) {
      switch (n.getType()) {
        case Token.GETPROP:
        case Token.GETELEM:
          Node dest = n.getFirstChild().getNext();
          if (dest.getType() == Token.STRING) {
            reservedNames.add(dest.getString());
          }
      }
    }",func_f0e68ac26df2184062ae2a945cd0b5e58466d75d6858359b7127776e9710a364
transformAsString,"    private Node transformAsString(AstNode n) {
      Node ret;
      if (n instanceof Name) {
        ret = transformNameAsString((Name)n);
      } else {
        ret = transform(n);
        Preconditions.checkState(ret.getType() == Token.NUMBER
            || ret.getType() == Token.STRING);
        if (ret.getType() == Token.STRING) {
        ret.putBooleanProp(Node.QUOTED_PROP, true);
        }
      }
      return ret;
    }",func_6d8b5a7cc748152dac89c82dcaff140adc18e9319d5e9a5b5fe8dd8ce6ceb7ea
