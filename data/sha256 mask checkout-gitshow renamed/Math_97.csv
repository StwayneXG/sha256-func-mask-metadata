Original Function Name,Function Code,Hash Mask Name
solve,"    public double solve(double min, double max, double initial)
        throws MaxIterationsExceededException, FunctionEvaluationException {

        if (((initial - min) * (max -initial)) < 0) {
            throw new IllegalArgumentException(""Initial guess is not in search"" +
                      "" interval."" + ""  Initial: "" + initial +
                      ""  Endpoints: ["" + min + "","" + max + ""]"");
        }

        // return the initial guess if it is good enough
        double yInitial = f.value(initial);
        if (Math.abs(yInitial) <= functionValueAccuracy) {
            setResult(initial, 0);
            return result;
        }

        // return the first endpoint if it is good enough
        double yMin = f.value(min);
        if (Math.abs(yMin) <= functionValueAccuracy) {
            setResult(yMin, 0);
            return result;
        }

        // reduce interval if min and initial bracket the root
        if (yInitial * yMin < 0) {
            return solve(min, yMin, initial, yInitial, min, yMin);
        }

        // return the second endpoint if it is good enough
        double yMax = f.value(max);
        if (Math.abs(yMax) <= functionValueAccuracy) {
            setResult(yMax, 0);
            return result;
        }

        // reduce interval if initial and max bracket the root
        if (yInitial * yMax < 0) {
            return solve(initial, yInitial, max, yMax, initial, yInitial);
        }

        // full Brent algorithm starting with provided initial guess
        return solve(min, yMin, max, yMax, initial, yInitial);

    }",func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e
