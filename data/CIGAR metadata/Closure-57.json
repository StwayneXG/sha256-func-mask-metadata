{
    "bug_id": 57,
    "bug_type": "SL SH SF",
    "buggy_lines": "          if (target != null) {",
    "code": "  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className = null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee = node.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        String qualifiedName = callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target = callee.getNext();\n          if (target != null) {\n            className = target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "fixed_code": "  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className = null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee = node.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        String qualifiedName = callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target = callee.getNext();\n          if (target != null && target.getType() == Token.STRING) {\n            className = target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "fixed_lines": "          if (target != null && target.getType() == Token.STRING) {",
    "masked_code": "  private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName){\n    String className = null;\n    if (NodeUtil.isExprCall(parent)) {\n      Node callee = node.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        String qualifiedName = callee.getQualifiedName();\n        if (functionName.equals(qualifiedName)) {\n          Node target = callee.getNext();\n>>> [ INFILL ] <<<\n            className = target.getString();\n          }\n        }\n      }\n    }\n    return className;\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError: Expected: <null> but was: foo",
    "test_framework": "defects4j",
    "test_line": "    assertNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));",
    "test_name": "testRequire",
    "test_suite": "com.google.javascript.jscomp.ClosureCodingConventionTest",
    "time_buggy": "2011-08-12 19:04:43 +0000",
    "time_fixed": "2011-08-15 23:20:43 +0000"
}