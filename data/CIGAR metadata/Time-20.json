{
    "bug_id": 20,
    "bug_type": "SF",
    "buggy_lines": "                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + id.length();",
    "code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id)) {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + id.length();\n                }\n            }\n            return ~position;\n        }",
    "fixed_code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            String best = null;\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id)) {\n                \tif (best == null || id.length() > best.length()) {\n                \t\tbest = id;\n                \t}\n                }\n            }\n            if (best != null) {\n                bucket.setZone(DateTimeZone.forID(best));\n                return position + best.length();\n            }\n            return ~position;\n        }",
    "fixed_lines": "            String best = null;\n                \tif (best == null || id.length() > best.length()) {\n                \t\tbest = id;\n                \t}\n            if (best != null) {\n                bucket.setZone(DateTimeZone.forID(best));\n                return position + best.length();\n            }",
    "masked_code": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id)) {\n                }\n            }\n>>> [ INFILL ] <<<\n            return ~position;\n        }",
    "project": "Time",
    "test_error_message": "java.lang.IllegalArgumentException: Invalid format: \"2007-03-04 12:30 America/Dawson_Creek\" is malformed at \"_Creek\"",
    "test_framework": "defects4j",
    "test_line": "        assertEquals(dt, f.parseDateTime(\"2007-03-04 12:30 America/Dawson_Creek\"));",
    "test_name": "test_printParseZoneDawsonCreek",
    "test_suite": "org.joda.time.format.TestDateTimeFormatterBuilder",
    "time_buggy": "2011-09-26 22:40:39 +0100",
    "time_fixed": "2011-10-23 13:07:54 +0100"
}