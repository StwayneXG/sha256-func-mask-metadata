{
    "bug_id": 13,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n    }",
    "fixed_code": "    private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; i++) {\n               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n            return sqrtM;\n        } else {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "fixed_lines": "        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; i++) {\n               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n            return sqrtM;\n        } else {\n        }",
    "masked_code": "    private RealMatrix squareRoot(RealMatrix m) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n>>> [ INFILL ] <<<\n    }",
    "project": "Math",
    "test_error_message": "java.lang.OutOfMemoryError: Java heap space",
    "test_framework": "defects4j",
    "test_line": "                double error = FastMath.abs(p.value(x) - fitted.value(x)) /",
    "test_name": "testLargeSample",
    "test_suite": "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest",
    "time_buggy": "2012-12-29 13:16:17 +0000",
    "time_fixed": "2012-12-29 13:26:44 +0000"
}