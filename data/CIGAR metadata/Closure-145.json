{
    "bug_id": 145,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n  }",
    "fixed_code": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n      Node labeledStatement = n.getLastChild();\n      if (labeledStatement.getType() != Token.BLOCK) {\n        return isOneExactlyFunctionOrDo(labeledStatement);\n      } else {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n        if (getNonEmptyChildCount(n, 2) == 1) { \n          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));\n        } else {\n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n          return false;\n        }\n      }\n    } else {\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n    }\n  }",
    "fixed_lines": "    if (n.getType() == Token.LABEL) {\n      Node labeledStatement = n.getLastChild();\n      if (labeledStatement.getType() != Token.BLOCK) {\n        return isOneExactlyFunctionOrDo(labeledStatement);\n      } else {\n        if (getNonEmptyChildCount(n, 2) == 1) { \n          return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));\n        } else {\n          return false;\n        }\n      }\n    } else {\n    }",
    "masked_code": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n>>> [ INFILL ] <<<\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_framework": "defects4j",
    "test_line": "    assertEquals(expected,",
    "test_name": "testFunctionSafariCompatiblity",
    "test_suite": "com.google.javascript.jscomp.CodePrinterTest",
    "time_buggy": "2010-06-25 21:35:29 +0000",
    "time_fixed": "2010-06-25 23:56:52 +0000"
}