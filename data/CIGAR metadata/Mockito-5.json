{
    "bug_id": 5,
    "bug_type": "SL SH SF",
    "buggy_lines": "            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
    "code": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "fixed_code": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n            catch (AssertionError e) {\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "fixed_lines": "            catch (AssertionError e) {",
    "masked_code": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n>>> [ INFILL ] <<<\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "project": "Mockito",
    "test_error_message": "junit.framework.AssertionFailedError: 'org.mockito.internal.verification.VerificationOverTimeImpl' has some dependency to JUnit",
    "test_framework": "defects4j",
    "test_line": "            throw new AssertionError(String.format(\"'%s' has some dependency to JUnit\", pureMockitoAPIClass), e);",
    "test_name": "pure_mockito_should_not_depend_JUnit",
    "test_suite": "org.mockitointegration.NoJUnitDependenciesTest",
    "time_buggy": "2015-01-04 13:44:24 +0100",
    "time_fixed": "2015-01-20 21:24:00 +0100"
}