{
    "bug_id": 124,
    "bug_type": "SF",
    "buggy_lines": "",
    "code": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n      node = node.getFirstChild();\n    if (node.isName()\n        && isNameAssignedTo(node.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "fixed_code": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    while (node.isGetProp()) {\n      node = node.getFirstChild();\n    }\n    if (node.isName()\n        && isNameAssignedTo(node.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "fixed_lines": "    while (node.isGetProp()) {\n    }",
    "masked_code": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n      node = node.getFirstChild();\n>>> [ INFILL ] <<<\n    if (node.isName()\n        && isNameAssignedTo(node.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "project": "Closure",
    "test_error_message": "junit.framework.AssertionFailedError:",
    "test_framework": "defects4j",
    "test_line": "    testSame(\"x = x.parentNode.parentNode; x = x.parentNode.parentNode;\");",
    "test_name": "testIssue1017",
    "test_suite": "com.google.javascript.jscomp.ExploitAssignsTest",
    "time_buggy": "2013-06-05 16:45:27 -0700",
    "time_fixed": "2013-06-05 16:45:35 -0700"
}