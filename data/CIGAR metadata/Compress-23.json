{
    "bug_id": 23,
    "bug_type": "SL SH SF",
    "buggy_lines": "                dictSize |= (coder.properties[i + 1] << (8 * i));",
    "code": "    static class LZMADecoder extends CoderBase {\n        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            long dictSize = coder.properties[1];\n            for (int i = 1; i < 4; i++) {\n                dictSize |= (coder.properties[i + 1] << (8 * i));\n            }\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }\n    }",
    "fixed_code": "    static class LZMADecoder extends CoderBase {\n        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            long dictSize = coder.properties[1];\n            for (int i = 1; i < 4; i++) {\n                dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);\n            }\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }\n    }",
    "fixed_lines": "                dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);",
    "masked_code": "    static class LZMADecoder extends CoderBase {\n        @Override\n        InputStream decode(final InputStream in, final Coder coder,\n                byte[] password) throws IOException {\n            byte propsByte = coder.properties[0];\n            long dictSize = coder.properties[1];\n            for (int i = 1; i < 4; i++) {\n>>> [ INFILL ] <<<\n            }\n            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n            }\n            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n        }\n    }",
    "project": "Compress",
    "test_error_message": "org.tukaani.xz.UnsupportedOptionsException: LZMA dictionary is too big for this implementation",
    "test_framework": "defects4j",
    "test_line": "        SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-256.7z\"));",
    "test_name": "testCompressedHeaderWithNonDefaultDictionarySize",
    "test_suite": "org.apache.commons.compress.archivers.sevenz.SevenZFileTest",
    "time_buggy": "2014-01-20 13:26:08 +0000",
    "time_fixed": "2014-01-22 05:13:34 +0000"
}