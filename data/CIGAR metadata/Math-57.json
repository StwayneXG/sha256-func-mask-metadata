{
    "bug_id": 57,
    "bug_type": "SL SH SF",
    "buggy_lines": "            int sum = 0;",
    "code": "    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n        // create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // iterate through updating the centers until we're done\n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n\n    /**\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points the points to add to the given {@link Cluster}s\n     */\n    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            int sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }",
    "fixed_code": "    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n        // create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // iterate through updating the centers until we're done\n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n\n    /**\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points the points to add to the given {@link Cluster}s\n     */\n    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n            double sum = 0;\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }",
    "fixed_lines": "            double sum = 0;",
    "masked_code": "    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k, final int maxIterations) {\n        // create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // iterate through updating the centers until we're done\n        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n        for (int count = 0; count < max; count++) {\n            boolean clusteringChanged = false;\n            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                    clusteringChanged = true;\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                    if (!newCenter.equals(cluster.getCenter())) {\n                        clusteringChanged = true;\n                    }\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n            }\n            if (!clusteringChanged) {\n                return clusters;\n            }\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n        }\n        return clusters;\n    }\n\n    /**\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T> type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points the points to add to the given {@link Cluster}s\n     */\n    private static <T extends Clusterable<T>> void\n        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    /**\n     * Use K-means++ to choose the initial centers.\n     *\n     * @param <T> type of the points to cluster\n     * @param points the points to choose the initial centers from\n     * @param k the number of centers to choose\n     * @param random random generator to use\n     * @return the initial centers\n     */\n    private static <T extends Clusterable<T>> List<Cluster<T>>\n        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n\n        final List<T> pointSet = new ArrayList<T>(points);\n        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n\n        // Choose one center uniformly at random from among the data points.\n        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n        resultSet.add(new Cluster<T>(firstPoint));\n\n        final double[] dx2 = new double[pointSet.size()];\n        while (resultSet.size() < k) {\n            // For each data point x, compute D(x), the distance between x and\n            // the nearest center that has already been chosen.\n>>> [ INFILL ] <<<\n            for (int i = 0; i < pointSet.size(); i++) {\n                final T p = pointSet.get(i);\n                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n                final double d = p.distanceFrom(nearest.getCenter());\n                sum += d * d;\n                dx2[i] = sum;\n            }\n\n            // Add one new data point as a center. Each point x is chosen with\n            // probability proportional to D(x)2\n            final double r = random.nextDouble() * sum;\n            for (int i = 0 ; i < dx2.length; i++) {\n                if (dx2[i] >= r) {\n                    final T p = pointSet.remove(i);\n                    resultSet.add(new Cluster<T>(p));\n                    break;\n                }\n            }\n        }\n\n        return resultSet;\n\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError",
    "test_framework": "defects4j",
    "test_line": "        assertTrue(uniquePointIsCenter);",
    "test_name": "testSmallDistances",
    "test_suite": "org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest",
    "time_buggy": "2011-03-15 11:42:23 +0000",
    "time_fixed": "2011-03-15 12:15:02 +0000"
}