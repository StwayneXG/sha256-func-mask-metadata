{
    "bug_id": 11,
    "bug_type": "SL SH SF",
    "buggy_lines": "        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
    "code": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }",
    "fixed_code": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }",
    "fixed_lines": "        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *",
    "masked_code": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n>>> [ INFILL ] <<<\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            getExponentTerm(vals);\n    }",
    "project": "Math",
    "test_error_message": "junit.framework.AssertionFailedError: expected:<0.024113113264053368> but was:<0.06044261149705598>",
    "test_framework": "defects4j",
    "test_line": "            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);",
    "test_name": "testUnivariateDistribution",
    "test_suite": "org.apache.commons.math3.distribution.MultivariateNormalDistributionTest",
    "time_buggy": "2013-01-13 18:03:48 +0000",
    "time_fixed": "2013-01-15 12:15:50 +0000"
}