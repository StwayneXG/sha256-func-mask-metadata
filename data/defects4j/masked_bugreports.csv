Project,Bug Number,Masked_Heading,Masked_Description
Chart,1,#983 Potential NPE in AbstractCategoryItemRender.func_5345d9cac5593bbfc9ad36b80173177bd050244064da7fa86fc5b96409612f06(),"Setting up a working copy of the current JFreeChart trunk in Eclipse I got a warning about a null pointer access in this bit of code from AbstractCategoryItemRender.java:


public LegendItemCollection func_5345d9cac5593bbfc9ad36b80173177bd050244064da7fa86fc5b96409612f06() {  

LegendItemCollection result = new LegendItemCollection();  

if (this.plot == null) {  

return result;  

}  

int index = this.plot.getIndexOf(this);  

CategoryDataset dataset = this.plot.getDataset(index);  

if (dataset != null) {  

return result;  

}  

int seriesCount = dataset.getRowCount();  

...  

}


The warning is in the last code line where seriesCount is assigned. The variable dataset is guaranteed to be null in this location, I suppose that the check before that should actually read ""if (dataset == null)"", not ""if (dataset != null)"".


This is trunk as of 2010-02-08."
Chart,5,#862 XYSeries.func_3583943e51191ea0b5a37e5b396e695f18e193796d97ab156df06e0d5fc11146() should add if duplicates are allowed,"Copied from this post (by Ted Schwartz) in the forum:


<http://www.jfree.org/phpBB2/viewtopic.php?t=24523>


I've found a bug in jfreechart-1.0.9 code for org.jfree.data.xy.XYSeries. There was a change some time ago which introduced the notion of allowing duplicate X values in XYSeries data. The method func_3583943e51191ea0b5a37e5b396e695f18e193796d97ab156df06e0d5fc11146(Number x, Number y) was never modified to support this, and therefore duplicate data were overwriting existing data. This is the fix I've made, but I don't know how to submit a patch...


$ diff original/jfreechart-1.0.9/source/org/jfree/data/xy/XYSeries.java fixed/org/jfree/data/xy/XYSeries.java  

537c537  

< if (index >= 0) {  

---  

> if (index >= 0 && !allowDuplicateXValues) {  

545a546,559  

> } else if (index >= 0){  

> XYDataItem item = new XYDataItem(x, y);  

> // need to make sure we are adding \*after\* any duplicates  

> int size = this.data.size();  

> while (index < size  

> && item.compareTo(this.data.get(index)) == 0) {  

> index++;  

> }  

> if (index < this.data.size()) {  

> this.data.add(index, item);  

> }  

> else {  

> this.data.add(item);  

> }  

558,561d571  

< // check if this addition will exceed the maximum item count...  

< if (getItemCount() > this.maximumItemCount) {  

< this.data.remove(0);  

< }  

562a573,576  

> // check if this addition will exceed the maximum item count...  

> if (getItemCount() > this.maximumItemCount) {  

> this.data.remove(0);  

> }"
Chart,9,#818 Error on TimeSeries func_3bc34664cb7f93467ce993c14275a9e92676325203caa586b190e422255151cd() method,"The test case at the end fails with :


java.lang.IllegalArgumentException: Requires start <= end.


The problem is in that the int start and end indexes corresponding to given timePeriod are computed incorectly. Here I would expect an empty serie to be returned, not an exception. This is with jfreechart 1.0.7


public class foo {  

static public void main(String args[]) {  

TimeSeries foo = new TimeSeries(""foo"",Day.class);  

foo.add(new Day(19,4,2005),1);  

foo.add(new Day(25,5,2005),1);  

foo.add(new Day(28,5,2005),1);  

foo.add(new Day(30,5,2005),1);  

foo.add(new Day(1,6,2005),1);  

foo.add(new Day(3,6,2005),1);  

foo.add(new Day(19,8,2005),1);  

foo.add(new Day(31,1,2006),1);



```
    try \{
        TimeSeries bar = foo.func_3bc34664cb7f93467ce993c14275a9e92676325203caa586b190e422255151cd\(new Day\(1,12,2005\),new Day\(18,1,2006\)\);
    \} catch \(CloneNotSupportedException e\) \{

        e.printStackTrace\(\);

```

}  

}"
Chart,11,"#868 JCommon 1.0.12 ShapeUtilities.func_f9d6cd1ed5cf1ead7b54873537748e0daa8f1390cd61555b68089fca063444f3(path1,path2)","The comparison of two GeneralPath objects uses the same PathIterator for both objects. func_f9d6cd1ed5cf1ead7b54873537748e0daa8f1390cd61555b68089fca063444f3(GeneralPath path1, GeneralPath path2) will thus return true for any pair of non-null GeneralPath instances having the same windingRule."
Chart,12,#213 Fix for func_88a39f464e81551a071c89cea55cfa566b09aa7e4725c30c8de12833c0fefd57,"When dataset is passed into constructor for func_88a39f464e81551a071c89cea55cfa566b09aa7e4725c30c8de12833c0fefd57, the dataset is not wired to a listener, as it would be if setDataset is called."
Chart,17,#803 cloning of TimeSeries,"It's just a minor bug!


When I func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4ac a TimeSeries which has no items, I get an IllegalArgumentException (""Requires start <= end"").  

But I don't think the user should be responsible for checking whether the TimeSeries has any items or not."
Cli,2,"[cli] Parameter value ""-something"" misinterpreted as a parameter","If a parameter value is passed that contains a hyphen as the (delimited) first   

character, CLI parses this a parameter. For example using the call  

java myclass -t ""-something""  

Results in the parser creating the invalid parameter -o (noting that it is   

skipping the 's')


My code is using the Posix parser as follows  

Options options = buildCommandLineOptions();  

CommandLineParser parser = new PosixParser();  

CommandLine commandLine = null;  

try {


 commandLine = parser.parse(options, args);  

}  

catch (ParseException e) {


 System.out.println(""Invalid parameters. "" + e.getMessage() + NEW\_LINE);  

 System.exit(EXIT\_CODE\_ERROR);  

}


This has been tested against the nightly build dated 20050503."
Cli,3,"PosixParser interupts ""-target opt"" as ""-t arget opt""","This was posted on the Commons-Developer list and confirmed as a bug.


> Is this a bug? Or am I using this incorrectly?  

> I have an option with short and long values. Given code that is   

> essentially what is below, with a PosixParser I see results as   

> follows:  

>   

> A command line with just ""-t"" prints out the results of the catch   

> block  

> (OK)  

> A command line with just ""-target"" prints out the results of the catch  

> block (OK)  

> A command line with just ""-t foobar.com"" prints out ""processing selected  

> target: foobar.com"" (OK)  

> A command line with just ""-target foobar.com"" prints out ""processing  

> selected target: arget"" (ERROR?)  

>   

> ======================================================================  

> ==  

> =======================  

> private static final String OPTION\_TARGET = ""t"";  

> private static final String OPTION\_TARGET\_LONG = ""target"";  

> // ...  

> Option generateTarget = new Option(OPTION\_TARGET,   

> OPTION\_TARGET\_LONG,   

> true,   

> ""Generate files for the specified  

> target machine"");  

> // ...  

> try 


{
> parsedLine = parser.parse(cmdLineOpts, args);
> }
 catch (ParseException pe) 


{
> System.out.println(""Invalid command: "" + pe.getMessage() +
> ""\n"");
> HelpFormatter hf = new HelpFormatter();
> hf.printHelp(USAGE, cmdLineOpts);
> System.exit(-1);
> }
>   

> if (parsedLine.hasOption(OPTION\_TARGET)) 


{
> System.out.println(""processing selected target: "" +
> parsedLine.getOptionValue(OPTION\_TARGET)); 
> }

It is a bug but it is due to well defined behaviour (so that makes me feel a  

little better about myself ![](/jira/images/icons/emoticons/wink.png). To support **special**   

(well I call them special anyway) like -Dsystem.property=value we need to be  

able to examine the first character of an option. If the first character is  

itself defined as an Option then the remainder of the token is used as the  

value, e.g. 'D' is the token, it is an option so 'system.property=value' is the  

argument value for that option. This is the behaviour that we are seeing for  

your example.   

't' is the token, it is an options so 'arget' is the argument value. 


I suppose a solution to this could be to have a way to specify properties for  

parsers. In this case 'posix.special.option == true' for turning   

on **special** options. I'll have a look into this and let you know.


Just to keep track of this and to get you used to how we operate, can you log a  

bug in bugzilla for this.


Thanks,  

-John K"
Cli,4,"PosixParser interupts ""-target opt"" as ""-t arget opt""","This was posted on the Commons-Developer list and confirmed as a bug.


> Is this a bug? Or am I using this incorrectly?  

> I have an option with short and long values. Given code that is   

> essentially what is below, with a PosixParser I see results as   

> follows:  

>   

> A command line with just ""-t"" prints out the results of the catch   

> block  

> (OK)  

> A command line with just ""-target"" prints out the results of the catch  

> block (OK)  

> A command line with just ""-t foobar.com"" prints out ""processing selected  

> target: foobar.com"" (OK)  

> A command line with just ""-target foobar.com"" prints out ""processing  

> selected target: arget"" (ERROR?)  

>   

> ======================================================================  

> ==  

> =======================  

> private static final String OPTION\_TARGET = ""t"";  

> private static final String OPTION\_TARGET\_LONG = ""target"";  

> // ...  

> Option generateTarget = new Option(OPTION\_TARGET,   

> OPTION\_TARGET\_LONG,   

> true,   

> ""Generate files for the specified  

> target machine"");  

> // ...  

> try 


{
> parsedLine = parser.parse(cmdLineOpts, args);
> }
 catch (ParseException pe) 


{
> System.out.println(""Invalid command: "" + pe.getMessage() +
> ""\n"");
> HelpFormatter hf = new HelpFormatter();
> hf.printHelp(USAGE, cmdLineOpts);
> System.exit(-1);
> }
>   

> if (parsedLine.hasOption(OPTION\_TARGET)) 


{
> System.out.println(""processing selected target: "" +
> parsedLine.getOptionValue(OPTION\_TARGET)); 
> }

It is a bug but it is due to well defined behaviour (so that makes me feel a  

little better about myself ![](/jira/images/icons/emoticons/wink.png). To support **special**   

(well I call them special anyway) like -Dsystem.property=value we need to be  

able to examine the first character of an option. If the first character is  

itself defined as an Option then the remainder of the token is used as the  

value, e.g. 'D' is the token, it is an option so 'system.property=value' is the  

argument value for that option. This is the behaviour that we are seeing for  

your example.   

't' is the token, it is an options so 'arget' is the argument value. 


I suppose a solution to this could be to have a way to specify properties for  

parsers. In this case 'posix.special.option == true' for turning   

on **special** options. I'll have a look into this and let you know.


Just to keep track of this and to get you used to how we operate, can you log a  

bug in bugzilla for this.


Thanks,  

-John K"
Cli,5,NullPointerException in Util.func_ed03a8f8e17871bd919c226fc136f1332d8c7c9e3e569b9d82e4d4d4f961b070 when passed a null argument,"If you try to do a hasOption(null), you get a NPE:


java.lang.NullPointerException  

 at org.apache.commons.cli.Util.func_ed03a8f8e17871bd919c226fc136f1332d8c7c9e3e569b9d82e4d4d4f961b070(Util.java:39)  

 at org.apache.commons.cli.CommandLine.resolveOption(CommandLine.java:166)  

 at org.apache.commons.cli.CommandLine.hasOption(CommandLine.java:68)


Either hasOption should reject the null argument, or the function should simply return false. I think the latter makes more since, as this is how Java collections generally work."
Cli,8,HelpFormatter wraps incorrectly on every line beyond the first,"The method findWrapPos(...) in the HelpFormatter is a couple of bugs in the way that it deals with the ""startPos"" variable. This causes it to format every line beyond the first line by ""startPos"" to many characters, beyond the specified width. 


To see this, create an option with a long description, and then use the help formatter to print it. The first line will be the correct length. The 2nd, 3rd, etc lines will all be too long.


I don't have a patch (sorry) - but here is a corrected version of the method.


I fixed it in two places - both were using ""width + startPos"" when they should have been using width.




```
 protected int findWrapPos(String text, int width, int startPos)
    {
        int pos = -1;

        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
            || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
        {
            return pos+1;
        }
        else if ((width) >= text.length())
        {
            return -1;
        }


        // look for the last whitespace character before startPos+width
        pos = width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
               && (c != '\n') && (c != '\r'))
        {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos)
        {
            return pos;
        }
        
        // must look for the first whitespace chearacter after startPos 
        // + width
        pos = startPos + width;

        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
               && (c != '\n') && (c != '\r'))
        {
            ++pos;
        }

        return (pos == text.length())        ? (-1) : pos;
    }

```"
Cli,9,MissingOptionException.getMessage() changed from CLI 1.0 > 1.1,"The MissingOptionException.getMessage() string changed from CLI 1.0 > 1.1. 


CLI 1.0 was poorly formatted but readable:  

Missing required options: -format-source-properties


CLI 1.1 is almost unreadable:  

Missing required options: formatsourceproperties


In CLI 1.0 Options.addOption(Option) prefixed the stored options with a ""-"" and in CLI 1.1 it doesn't.


I would suggest changing Parser.func_0d0304f829dd7c63ea177ba42edb2f9381402a044c1a1d541a959b055d32eead() to add the options to the error message with a prefix of "" -"":


OLD:   

 // loop through the required options  

 while (iter.hasNext())


 {
 buff.append(iter.next());
 }

NEW:   

 // loop through the required options  

 while (iter.hasNext())


 {
 buff.append("" -"" + iter.next());
 }

Resulting in:  

Missing required options: -format -source -properties"
Cli,11,"PosixParser interupts ""-target opt"" as ""-t arget opt""","This was posted on the Commons-Developer list and confirmed as a bug.


> Is this a bug? Or am I using this incorrectly?  

> I have an option with short and long values. Given code that is   

> essentially what is below, with a PosixParser I see results as   

> follows:  

>   

> A command line with just ""-t"" prints out the results of the catch   

> block  

> (OK)  

> A command line with just ""-target"" prints out the results of the catch  

> block (OK)  

> A command line with just ""-t foobar.com"" prints out ""processing selected  

> target: foobar.com"" (OK)  

> A command line with just ""-target foobar.com"" prints out ""processing  

> selected target: arget"" (ERROR?)  

>   

> ======================================================================  

> ==  

> =======================  

> private static final String OPTION\_TARGET = ""t"";  

> private static final String OPTION\_TARGET\_LONG = ""target"";  

> // ...  

> Option generateTarget = new Option(OPTION\_TARGET,   

> OPTION\_TARGET\_LONG,   

> true,   

> ""Generate files for the specified  

> target machine"");  

> // ...  

> try 


{
> parsedLine = parser.parse(cmdLineOpts, args);
> }
 catch (ParseException pe) 


{
> System.out.println(""Invalid command: "" + pe.getMessage() +
> ""\n"");
> HelpFormatter hf = new HelpFormatter();
> hf.printHelp(USAGE, cmdLineOpts);
> System.exit(-1);
> }
>   

> if (parsedLine.hasOption(OPTION\_TARGET)) 


{
> System.out.println(""processing selected target: "" +
> parsedLine.getOptionValue(OPTION\_TARGET)); 
> }

It is a bug but it is due to well defined behaviour (so that makes me feel a  

little better about myself ![](/jira/images/icons/emoticons/wink.png). To support **special**   

(well I call them special anyway) like -Dsystem.property=value we need to be  

able to examine the first character of an option. If the first character is  

itself defined as an Option then the remainder of the token is used as the  

value, e.g. 'D' is the token, it is an option so 'system.property=value' is the  

argument value for that option. This is the behaviour that we are seeing for  

your example.   

't' is the token, it is an options so 'arget' is the argument value. 


I suppose a solution to this could be to have a way to specify properties for  

parsers. In this case 'posix.special.option == true' for turning   

on **special** options. I'll have a look into this and let you know.


Just to keep track of this and to get you used to how we operate, can you log a  

bug in bugzilla for this.


Thanks,  

-John K"
Cli,12,"PosixParser interupts ""-target opt"" as ""-t arget opt""","This was posted on the Commons-Developer list and confirmed as a bug.


> Is this a bug? Or am I using this incorrectly?  

> I have an option with short and long values. Given code that is   

> essentially what is below, with a PosixParser I see results as   

> follows:  

>   

> A command line with just ""-t"" prints out the results of the catch   

> block  

> (OK)  

> A command line with just ""-target"" prints out the results of the catch  

> block (OK)  

> A command line with just ""-t foobar.com"" prints out ""processing selected  

> target: foobar.com"" (OK)  

> A command line with just ""-target foobar.com"" prints out ""processing  

> selected target: arget"" (ERROR?)  

>   

> ======================================================================  

> ==  

> =======================  

> private static final String OPTION\_TARGET = ""t"";  

> private static final String OPTION\_TARGET\_LONG = ""target"";  

> // ...  

> Option generateTarget = new Option(OPTION\_TARGET,   

> OPTION\_TARGET\_LONG,   

> true,   

> ""Generate files for the specified  

> target machine"");  

> // ...  

> try 


{
> parsedLine = parser.parse(cmdLineOpts, args);
> }
 catch (ParseException pe) 


{
> System.out.println(""Invalid command: "" + pe.getMessage() +
> ""\n"");
> HelpFormatter hf = new HelpFormatter();
> hf.printHelp(USAGE, cmdLineOpts);
> System.exit(-1);
> }
>   

> if (parsedLine.hasOption(OPTION\_TARGET)) 


{
> System.out.println(""processing selected target: "" +
> parsedLine.getOptionValue(OPTION\_TARGET)); 
> }

It is a bug but it is due to well defined behaviour (so that makes me feel a  

little better about myself ![](/jira/images/icons/emoticons/wink.png). To support **special**   

(well I call them special anyway) like -Dsystem.property=value we need to be  

able to examine the first character of an option. If the first character is  

itself defined as an Option then the remainder of the token is used as the  

value, e.g. 'D' is the token, it is an option so 'system.property=value' is the  

argument value for that option. This is the behaviour that we are seeing for  

your example.   

't' is the token, it is an options so 'arget' is the argument value. 


I suppose a solution to this could be to have a way to specify properties for  

parsers. In this case 'posix.special.option == true' for turning   

on **special** options. I'll have a look into this and let you know.


Just to keep track of this and to get you used to how we operate, can you log a  

bug in bugzilla for this.


Thanks,  

-John K"
Cli,14,adding a FileValidator results in ClassCastException in parser.parseAndHelp(args),"When I add a FileValidator.getExistingFileInstance() to an Argument, I get a ClassCastException when I parse args.


Below is a testcase invoke with


 java org.apache.commons.cli2.issues.CLI2Sample -classpath commons-cli-2.0-SNAPSHOT.jar --file-name path-to-an-existing-file


Run it and you get:


Exception in thread ""main"" java.lang.ClassCastException: java.io.File cannot be cast to java.lang.String  

 at org.apache.commons.cli2.validation.FileValidator.func_133c8eb86cf813474ade739d5d133087e2026f56aaf366284dd1a25d98d44690(FileValidator.java:122)  

 at org.apache.commons.cli2.option.ArgumentImpl.func_133c8eb86cf813474ade739d5d133087e2026f56aaf366284dd1a25d98d44690(ArgumentImpl.java:250)  

 at org.apache.commons.cli2.option.ParentImpl.func_133c8eb86cf813474ade739d5d133087e2026f56aaf366284dd1a25d98d44690(ParentImpl.java:123)  

 at org.apache.commons.cli2.option.DefaultOption.func_133c8eb86cf813474ade739d5d133087e2026f56aaf366284dd1a25d98d44690(DefaultOption.java:175)  

 at org.apache.commons.cli2.option.GroupImpl.func_133c8eb86cf813474ade739d5d133087e2026f56aaf366284dd1a25d98d44690(GroupImpl.java:264)  

 at org.apache.commons.cli2.commandline.Parser.parse(Parser.java:105)  

 at org.apache.commons.cli2.commandline.Parser.parseAndHelp(Parser.java:125)  

 at org.apache.commons.cli2.issues.CLI2Sample.main(CLI2Sample.java:38)


Comment out the withValidator call and it runs with no exception. 


I also get a similar ClassCastException if I add a 


 .withValidator(NumberValidator.getIntegerInstance())


to another option/argument.


Here is the source


package org.apache.commons.cli2.issues;


import java.io.File;  

import org.apache.commons.cli2.CommandLine;  

import org.apache.commons.cli2.Group;  

import org.apache.commons.cli2.builder.ArgumentBuilder;  

import org.apache.commons.cli2.builder.DefaultOptionBuilder;  

import org.apache.commons.cli2.builder.GroupBuilder;  

import org.apache.commons.cli2.commandline.Parser;  

import org.apache.commons.cli2.option.DefaultOption;  

import org.apache.commons.cli2.validation.FileValidator;


public class CLI2Sample  

{  

 public static void main(String[] args)


 {
 final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
 final ArgumentBuilder abuilder = new ArgumentBuilder();
 final GroupBuilder gbuilder = new GroupBuilder();
 DefaultOption fileNameOption = obuilder
 .withShortName(""f"")
 .withLongName(""file-name"")
 .withRequired(true)
 .withDescription(""name of an existing file"")
 .withArgument(abuilder
 .withName(""file-name"")
 .withValidator(FileValidator.getExistingFileInstance())
 .create())
 .create();
 Group options = gbuilder
 .withName(""options"")
 .withOption(fileNameOption)
 .create();
 Parser parser = new Parser();
 parser.setHelpTrigger(""--help"");
 parser.setGroup(options);
 CommandLine cl = parser.parseAndHelp(args);
 }
}"
Cli,15,deafult arguments only works if no arguments are submitted,"When using multple arguments and defaults, the behaviour is counter-intuitive and will only pick up a default if no args are passed in.


For instance in the code below I have set up so 0, 1, or 2 args may bve accepted, with defaults 100 and 1000.


I expect it to behave as follows.  

1. for 2 args, 1 and 2 the values should be 1 and 2. This works as expected.  

2. for 0 args passed in the values should be 100 and 1000, picking up both of the defaults. This works as expected


3. for 1 arg passed in the values should be 1 and 1000, so the second argument picks up the second default value. The valuse become just 1, which is not as expected..


Currently, in the second case will only return 1 and ignore the defaults.


 public void testSingleOptionSingleArgument() throws Exception {  

 String defaulValue1 = ""100"";  

 String defaultValue2 = ""1000"";  

 final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();  

 final ArgumentBuilder abuilder = new ArgumentBuilder();  

 final GroupBuilder gbuilder = new GroupBuilder();


 DefaultOption bOption = obuilder.withShortName(""b"")  

 .withLongName(""b"")  

 .withArgument(abuilder.withName(""b"")  

 .withMinimum(0)  

 .withMaximum(2)  

 .withDefault(defaulValue1)  

 .withDefault(defaultValue2)  

 .create())  

 .create();


 Group options = gbuilder  

 .withName(""options"")  

 .withOption(bOption)  

 .create();


 Parser parser = new Parser();  

 parser.setHelpTrigger(""--help"");  

 parser.setGroup(options);  

 String enteredValue1 = ""1"";  

 String[] args = new String[]


{""-b"", enteredValue1}
;  

 CommandLine cl = parser.parse(args);  

 CommandLine cmd = cl;  

 assertNotNull(cmd);  

 List b = cmd.func_6a4ca470ec61705a60f7bee6ad0de87241cd8b46339eac37bdeef3a6997c9f44(""-b"");  

 assertEquals(""["" + enteredValue1 + ""]"", b + """");  

 }"
Cli,17,PosixParser keeps bursting tokens even if a non option character is found,"PosixParser doesn't stop the bursting process of a token if stopAtNonOption is enabled and a non option character is encountered.


For example if the options a and b are defined, with stopAtNonOption=true the following command line:




```
-azb
```


is turned into:




```
-a zb -b
```


the right output should be:




```
-a zb
```"
Cli,19,PosixParser ignores unrecognized tokens starting with '-',"PosixParser doesn't handle properly unrecognized tokens starting with '-' when stopAtNonOption is enabled, the token is simply ignored.


For example, if the option 'a' is defined, the following command line:




```
-z -a foo
```


is interpreted as:




```
-a foo
```"
Cli,20,PosixParser keeps processing tokens after a non unrecognized long option,"PosixParser keeps processing tokens after a non unrecognized long option when stopAtNonOption is enabled. The tokens after the unrecognized long option are burst, split around '=', etc.. instead of being kept as is.


For example, with the options 'a' and 'b' defined, 'b' having an argument, the following command line:




```
--zop -abfoo
```


is interpreted as:




```
--zop -a -b foo
```


but the last token should remain unchanged."
Cli,24,infinite loop in the wrapping code of HelpFormatter,"If there is not enough space to display a word on a single line, HelpFormatter goes into a infinite loops until the JVM crashes with an OutOfMemoryError.


Test case:




```
Options options = new Options();
options.addOption(""h"", ""help"", false, ""This is a looooong description"");

HelpFormatter formatter = new HelpFormatter();
formatter.setWidth(20);
formatter.printHelp(""app"", options); // hang & crash

```


An helpful exception indicating the insufficient width would be more appropriate than an OutOfMemoryError."
Cli,25,infinite loop in the wrapping code of HelpFormatter,"If there is not enough space to display a word on a single line, HelpFormatter goes into a infinite loops until the JVM crashes with an OutOfMemoryError.


Test case:




```
Options options = new Options();
options.addOption(""h"", ""help"", false, ""This is a looooong description"");

HelpFormatter formatter = new HelpFormatter();
formatter.setWidth(20);
formatter.printHelp(""app"", options); // hang & crash

```


An helpful exception indicating the insufficient width would be more appropriate than an OutOfMemoryError."
Cli,26,OptionBuilder is not reseted in case of an IAE at func_fa8847b0c33183273f5945508b31c3208a9e4ece58ca47233a05628d8dba3799,"If the call to OptionBuilder.func_fa8847b0c33183273f5945508b31c3208a9e4ece58ca47233a05628d8dba3799() fails with an IllegalArgumentException, the OptionBuilder is not resetted and its next usage may contain unwanted settings. Actually this let the [~~CLI-1~~](https://issues.apache.org/jira/browse/CLI-1 ""PosixParser interupts \""-target opt\"" as \""-t arget opt\"""").2 RCs fail on IBM JDK 6 running on Maven 2.0.10."
Cli,27,Unable to select a pure long option in a group,"OptionGroup doesn't play nice with options with a long name and no short name. If the selected option hasn't a short name, group.func_93872d5419eb6fa1f053a2528ba2b149fd16f39b6dc90ce3dfb78223502d7bf6(option) has no effect."
Cli,28,Default options may be partially processed,"The Properties instance passed to the Parser.parse() method to initialize the default options may be partially processed. This happens when the properties contains an option that doesn't accept arguments and has a default value that isn't evaluated to ""true"". When this case occurs the processing of the properties is stopped and the remaining options are never handled.


This is caused by the break statement in Parser.func_13cc0851bc526e3477ff40bdddbd6c6c56d0e8d832ab476465d3bbfaf7937ba3(Properties), a continue statement should have been used instead.


The related test in ValueTest is also wrong, there are two assertions that need to be changed:




```
Options opts = new Options();
opts.addOption(""a"", false, ""toggle -a"");
opts.addOption(""c"", ""c"", false, ""toggle -c"");
opts.addOption(OptionBuilder.hasOptionalArg().create('e'));

properties = new Properties();
properties.setProperty( ""a"", ""false"" );
properties.setProperty( ""c"", ""no"" );
properties.setProperty( ""e"", ""0"" );

cmd = parser.parse(opts, null, properties);
assertTrue( !cmd.hasOption(""a"") );
assertTrue( !cmd.hasOption(""c"") );
assertTrue( !cmd.hasOption(""e"") ); // Wrong, this option accepts an argument and should receive the value ""0""

```


 and the second one:




```
properties = new Properties();
properties.setProperty( ""a"", ""just a string"" );
properties.setProperty( ""e"", """" );

cmd = parser.parse(opts, null, properties);
assertTrue( !cmd.hasOption(""a"") );
assertTrue( !cmd.hasOption(""c"") );
assertTrue( !cmd.hasOption(""e"") ); // Wrong, this option accepts an argument and should receive an empty string as value

```"
Cli,29,Commons CLI incorrectly stripping leading and trailing quotes,"org.apache.commons.cli.Parser.processArgs() calls Util.func_c191ebd2e18a4cfc050de51c066f62f51c9b1fd4c3560389c86487610d2f7d4c() for all argument values. IMHO this is incorrect and totally broken.


It is trivial to create a simple test for this. Output:


 $ java -cp target/clitest.jar Clitest --balloo ""this is a \""test\""""  

 Value of argument balloo is 'this is a ""test'.


The argument 'balloo' should indeed keep its trailing double quote. It is what the shell gives it, so don't try to do something clever to it.


The offending code was committed here:  

<http://svn.apache.org/viewvc?view=rev&revision=129874>  

and has been there for more than 6 years ![](/jira/images/icons/emoticons/warning.png). Why was this committed in the first place?


The fix is trivial, just get rid of Util.func_c191ebd2e18a4cfc050de51c066f62f51c9b1fd4c3560389c86487610d2f7d4c(), and consequently avoid calling it from Parser.processArgs()."
Cli,32,StringIndexOutOfBoundsException in HelpFormatter.func_7ee1b2c6d76275d29f93867dee032da78e03698314baf42436a3fcf476adbe26,"In the last while loop in HelpFormatter.func_7ee1b2c6d76275d29f93867dee032da78e03698314baf42436a3fcf476adbe26, it can pass text.length() to text.charAt(int), which throws a StringIndexOutOfBoundsException. The first expression in that while loop condition should use a <, not a <=.


This is on line 908 in r779646:  

<http://svn.apache.org/viewvc/commons/proper/cli/trunk/src/java/org/apache/commons/cli/HelpFormatter.java?revision=779646&view=markup>"
Cli,35,LongOpt falsely detected as ambiguous,"Options options = new Options();  

options.addOption(Option.builder().longOpt(""importToOpen"").hasArg().argName(""FILE"").build());  

options.addOption(Option.builder(""i"").longOpt(""import"").hasArg().argName(""FILE"").build());


Parsing ""--import=FILE"" is not possible since 1.3 as it throws a AmbiguousOptionException stating that it cannot decide whether import is import or importToOpen. In 1.2 this is not an issue. 


The root lies in the new DefaultParser which does a startsWith check internally."
Cli,40,TypeHandler should throw ParseException for an unsupported class,"JavaDoc for TypeHandler states that func_56137b0df47dc6f4807356678dd05734d1bc6f19eb3c91597b36a155d19e7977 will




```
\* @throws ParseException if the value creation for the given object type failedtype
```


 However func_56137b0df47dc6f4807356678dd05734d1bc6f19eb3c91597b36a155d19e7977(String str, Class<?> clazz) will return null if the clazz is unknown."
Closure,1,function arguments should not be optimized away,"Function arguments should not be optimized away, as this comprimizes the function's length property.

**What steps will reproduce the problem?**

// ==ClosureCompiler==
// @compilation\_level SIMPLE\_OPTIMIZATIONS
// @output\_file\_name default.js
// ==/ClosureCompiler==
function foo (bar, baz) {
 return bar;
}
alert (foo.length);
function foo (bar, baz) {
 return bar;
}
alert (foo.length);

--------------------------------------

What is the expected output?

function foo(a,b){return a}alert(foo.length);

--------------------------------------

What do you see instead?

function foo(a){return a}alert(foo.length);

--------------------------------------

**What version of the product are you using? On what operating system?**

I'm using the product from the web page http://closure-compiler.appspot.com/home

I'm using Firefox 3.6.10 on Ubuntu 10.0.4

**Please provide any additional information below.**

The function's length property is essential to many techniques, such as currying functions."
Closure,2,combining @interface and multiple @extends can crash compiler,"Compile this:
---------------------------------
// ==ClosureCompiler==
// @compilation\_level SIMPLE\_OPTIMIZATIONS
// @warning\_level VERBOSE
// @output\_file\_name default.js
// ==/ClosureCompiler==

/\*\*
 \* @interface
 \* @extends {unknown\_1}
 \* @extends {unknown\_2}
 \*/
function Foo() {}
---------------------------------

=> Get this..
---------------------------------------
23: java.lang.NullPointerException
 at com.google.javascript.jscomp.TypeCheck.func_f7f52f1503b07231e2a476b9f26e70be9b57f9f5872ec6dfb025e0bf93c7e1b0(TypeCheck.java:1544)
 at com.google.javascript.jscomp.TypeCheck.visitFunction(TypeCheck.java:1635)
 at com.google.javascript.jscomp.TypeCheck.visit(TypeCheck.java:761)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:509)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:502)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:502)
 at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:347)
 at com.google.javascript.jscomp.TypeCheck.check(TypeCheck.java:400)
 at com.google.javascript.jscomp.TypeCheck.process(TypeCheck.java:371)
 at com.google.javascript.jscomp.DefaultPassConfig$29$1.process(DefaultPassConfig.java:1209)
 at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:303)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:279)
 at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:191)
 at com.google.javascript.jscomp.Compiler.check(Compiler.java:814)
 at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:729)
 at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:85)
 at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:637)
 at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:634)
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:694)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:634)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:590)
 at com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile(CompilerInvokerImpl.java:47)
 at com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest(ServerController.java:177)
 at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest(CompilationRequestHandler.java:180)
 at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service(CompilationRequestHandler.java:162)
 at com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost(CompilationServlet.java:83)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
 at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
 at com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter(ParseBlobUploadFilter.java:102)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter(SaveSessionFilter.java:35)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)
 at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
 at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
 at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
 at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
 at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle(AppVersionHandlerMap.java:266)
 at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
 at org.mortbay.jetty.Server.handle(Server.java:326)
 at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
 at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)
 at com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable(RpcRequestParser.java:76)
 at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
 at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:146)
 at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:447)
 at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:454)
 at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:461)
 at com.google.tracing.TraceContext.runInContext(TraceContext.java:703)
 at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:338)
 at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:330)
 at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:458)
 at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251)
 at java.lang.Thread.run(Thread.java:679)

Original Post Data: 
output\_format=json&output\_info=compiled\_code&output\_info=warnings&output\_info=errors&output\_info=statistics&compilation\_level=SIMPLE\_OPTIMIZATIONS&warning\_level=VERBOSE&output\_file\_name=default.js&js\_code=%2F\*\*%0A\*%20%40interface%0A\*%20%40extends%20%7BA%7D%0A\*%20%40extends%20%7BB%7D%0A\*%2F%0Afunction%20Foo()%20%7B%7D
------------------


Seems like a combination of @interface plus more than one @extend and where at least one of the @extend types are unknown causes a crash.

Regards
/ Fredrik Blomqvist"
Closure,4,Converting from an interface type to a constructor which @implements itself causes stack overflow.,"// Options: --externs externs/es3.js --property\_renaming OFF --variable\_renaming OFF --jscomp\_warning=checkTypes --js=t.js


// File: t.js
/\*\*
 \* @interface
 \*/
var OtherType = function() {}

/\*\*
 \* @implements {MyType}
 \* @constructor
 \*/
var MyType = function() {}

/\*\*
 \* @type {MyType}
 \*/
var x = /\*\* @type {!OtherType} \*/ (new Object());

Get Infinite recursion in:

PrototypeObjectType.isSubtype @ 350

Options:

- prevent cycles in the inheritance/implements graph
- detect cycles after they are created and exit compilation before any subsequent passes run
- detect and remove cycles after they are created but before any subsequent passes run
- make every subsequent pass robust against cycles in that graph"
Closure,5,"Compiler ignores 'delete' statements, can break functionality.","When the compiler rewrites internally-referenced object variables to non-object variables, as in the example below, it ignores 'delete' statements. These delete statements work as expected with the objects originally written, but don't function the same when the variables are no longer object properties. See:

(function(arg) {
 var foo = {};

 foo.bar = arg;

 console.log(foo.bar);

 delete foo.bar;

 console.log(foo.bar);
})();

Compiles to (simple setting):
(function(a){console.log(a);delete a;console.log(a)})();

Perhaps the compiler needs to look for these delete statements and change them to setting the rewritten variable to undefined instead."
Closure,7,Bad type inference with goog.isFunction and friends,"experimental/johnlenz/typeerror/test.js:16: WARNING - Property length
never defined on Number
 var i = object.length;


This is the reduced test case:

/\*\*
 \* @param {\*} object Any object.
 \* @return {boolean}
 \*/
test.isMatched = function(object) {
 if (goog.isDef(object)) {
 if (goog.isFunction(object)) {
 // return object();
 } else if (goog.isBoolean(object)) {
 // return object;
 } else if (goog.isString(object)) {
 // return test.isDef(object);
 } else if (goog.isArray(object)) {
 var i = object.length;
 }
 }
 return false;
};"
Closure,10,Wrong code generated if mixing types in ternary operator,"**What steps will reproduce the problem?**
1. Use Google Closure Compiler to compile this code:

 var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;

You can either simple or advanced. It doesn't matter


**What is the expected output? What do you see instead?**

I'm seeing this as a result:
 var a = (0.5 < Math.random() ? 1 : 2) + 7;

This is obviously wrong as the '1' string literal got converted to a number, and 3+4 got combined into 7 while that's not ok as '1' + 3 + 4 = '134', not '17'.

**What version of the product are you using? On what operating system?**
**Please provide any additional information below.**

Seems like this issue happens only when you are mixing types together. If both 1 and 2 are string literals or if they are both numbers it won't happen. I was also a little surprised to see this happening in simple mode as it actually breaks the behavior."
Closure,12,Try/catch blocks incorporate code not inside original blocks,"**What steps will reproduce the problem?**

Starting with this code:

-----
function a() {
 var x = '1';
 try {
 x += somefunction();
 } catch(e) {
 }
 x += ""2"";
 try {
 x += somefunction();
 } catch(e) {
 }
 document.write(x);
}

a();
a();
-----

It gets compiled to:

-----
function b() {
 var a;
 try {
 a = ""1"" + somefunction()
 }catch(c) {
 }
 try {
 a = a + ""2"" + somefunction()
 }catch(d) {
 }
 document.write(a)
}
b();
b();
-----

**What is the expected output? What do you see instead?**

The problem is that it's including the constant ""1"" and ""2"" inside the try block when the shouldn't be. When executed uncompiled, the script prints ""1212"". When compiled, the script prints ""undefinedundefined"".

This behavior doesn't happen if the entire function gets inlined, or if the code between the two try blocks is sufficiently complex.


**What version of the product are you using? On what operating system?**

Closure Compiler (http://code.google.com/closure/compiler)
Version: 20120430 (revision 1918)
Built on: 2012/04/30 18:02
java version ""1.6.0\_33""
Java(TM) SE Runtime Environment (build 1.6.0\_33-b03-424-11M3720)
Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode)"
Closure,13,true/false are not always replaced for !0/!1,"**What steps will reproduce the problem?**

function some\_function() {
 var fn1;
 var fn2;

 if (any\_expression) {
 fn2 = external\_ref;
 fn1 = function (content) {
 return fn2();
 }
 }

 return {
 method1: function () {
 if (fn1) fn1();
 return true;
 },
 method2: function () {
 return false;
 }
 }
}

**What is the expected output? What do you see instead?**

We expect that true/false will be replaced for !0/!1, but it doesn't happend.

function some\_function() {
 var a, b;
 any\_expression && (b = external\_ref, a = function () {
 return b()
 });
 return {
 method1: function () {
 a && a();
 return true
 },
 method2: function () {
 return false
 }
 }
};

**What version of the product are you using? On what operating system?**

This is output for latest official build.
I also got the same output for 20120430, 20120305. But 20111117 is OK.

**Please provide any additional information below.**

Here is just one of example. I found too many non-replaced true/false in compiler output. Replacement non-replaced true/false to !1/!0 in conpiler output saves 1-2 kb for 850 kb js file."
Closure,14,bogus 'missing return' warning,"The following sample code compiles with ""Missing return statement. Function expected to return boolean."" warning:

/\*\*
 \* @return {boolean}
 \*/
function fb(a)
{
 try
 {
 alert(a); // Some method, which can throw
 if (a > 0)
 return false;
 }
 finally
 {
 a = 5;
 }
 
 return true;
}"
Closure,15,"Switched order of ""delete key"" and ""key in"" statements changes semantic","// Input:

var customData = { key: 'value' };

function testRemoveKey( key ) {
 var dataSlot = customData,
 retval = dataSlot && dataSlot[ key ],
 hadKey = dataSlot && ( key in dataSlot );

 if ( dataSlot )
 delete dataSlot[ key ];

 return hadKey ? retval : null;
};

console.log( testRemoveKey( 'key' ) ); // 'value'
console.log( 'key' in customData ); // false


// Compiled version:

var customData={key:""value""};function testRemoveKey(b){var a=customData,c=a&&a[b];a&&delete a[b];return a&&b in a?c:null}console.log(testRemoveKey(""key""));console.log(""key""in customData);

// null
// false


""b in a"" is executed after ""delete a[b]"" what obviously doesn't make sense in this case.


Reproducible on: http://closure-compiler.appspot.com/home and in ""Version: 20120430 (revision 1918) Built on: 2012/04/30 18:02"""
Closure,18,Dependency sorting with closurePass set to false no longer works.,"**What steps will reproduce the problem?**

1. Instantiate new instance of Compiler

2. Set closurePass to false to prevent goog.require/goog.provide removal.
compilerOptions.setClosurePass(false);

3. Turn dependency sorting on.
DependencyOptions dependencyOptions = new DependencyOptions();
dependencyOptions.setDependencySorting(true);

4. Compile js code


What is the expected output? 
Dependent files should be sorted and concatenated in their dependent order.

What do you see instead?
Dependent files are not sorted.

**What version of the product are you using? On what operating system?**
> r1824
mac OS 10.7


**Please provide any additional information below.**
This worked in the r1810 release. However, it looks like this was changed in r1824. The compiler now expects closurePass to be true for dependency sorting to work.
http://code.google.com/p/closure-compiler/source/detail?path=/trunk/src/com/google/javascript/jscomp/Compiler.java&r=1824

What we are looking for is a way to sort dependencies and concatenate all files in their dependent order without removing the goog.require/goog.provide js calls. Turning closurePass to true causes the goog calls to be replaced. We use this methodology in local development to test our JS code.

Thanks!"
Closure,19,Type refining of 'this' raises IllegalArgumentException,"**What steps will reproduce the problem?**
1. goog.isFunction(this) or goog.isObject(this) or goog.isNull(this) etc.

**What is the expected output? What do you see instead?**

Expected: normal compilation, checking the type of this
Actual output:

23: java.lang.IllegalArgumentException: Node cannot be refined. 
THIS 1 [source\_file: Input\_0] : global this

 at com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.func_91657af7fcf4ac9d98a7775318c0fc4323b1e5a1e6fea2964586f50fea422903(ChainableReverseAbstractInterpreter.java:172)
 at com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.restrictParameter(ClosureReverseAbstractInterpreter.java:240)
 at com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter.getPreciserScopeKnowingConditionOutcome(ClosureReverseAbstractInterpreter.java:221)
 at com.google.javascript.jscomp.TypeInference.branchedFlowThrough(TypeInference.java:239)
 at com.google.javascript.jscomp.TypeInference.branchedFlowThrough(TypeInference.java:59)
 at com.google.javascript.jscomp.DataFlowAnalysis$BranchedForwardDataFlowAnalysis.flow(DataFlowAnalysis.java:448)
 at com.google.javascript.jscomp.DataFlowAnalysis.analyze(DataFlowAnalysis.java:213)
 at com.google.javascript.jscomp.DataFlowAnalysis.analyze(DataFlowAnalysis.java:181)
 at com.google.javascript.jscomp.TypeInferencePass.inferTypes(TypeInferencePass.java:90)
 at com.google.javascript.jscomp.TypeInferencePass$TypeInferringCallback.enterScope(TypeInferencePass.java:106)
 at com.google.javascript.jscomp.NodeTraversal.pushScope(NodeTraversal.java:581)
 at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:345)
 at com.google.javascript.jscomp.TypeInferencePass.inferTypes(TypeInferencePass.java:81)
 at com.google.javascript.jscomp.TypeInferencePass.process(TypeInferencePass.java:74)
 at com.google.javascript.jscomp.DefaultPassConfig$24$1.process(DefaultPassConfig.java:1119)
 at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:296)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:273)
 at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:187)
 at com.google.javascript.jscomp.Compiler.check(Compiler.java:768)
 at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:683)
 at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:79)
 at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:586)
 at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:583)
 at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:628)
 at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:651)
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:601)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:583)

**What version of the product are you using? On what operating system?**

Any version (local and http://closure-compiler.appspot.com/).

**Please provide any additional information below.**

A workaround is to assign 'this' to a variable. ""var a=this;goog.isNull(a)"" works."
Closure,20,String conversion optimization is incorrect,"**What steps will reproduce the problem?**

var f = {
 valueOf: function() { return undefined; }
}
String(f)

**What is the expected output? What do you see instead?**

Expected output: ""[object Object]""
Actual output: ""undefined""

**What version of the product are you using? On what operating system?**

All versions (http://closure-compiler.appspot.com/ as well).

**Please provide any additional information below.**

The compiler optimizes String(x) calls by replacing them with x + ''. This is correct in most cases, but incorrect in corner cases like the one mentioned above."
Closure,21,Classify non-rightmost expressions as problematic,"**Purpose of code changes:**
When it comes to an expression involving the comma operator, only the
first element of such a sequence is checked for being free of side
effects. If the element is free of side effects, it is classified as
problematic and a warning is issued.

As other non-rightmost elements are not checked for being free of side
effects and therefore cannot be classified as problematic, this leads
to unexpected behavior:

1. foo((1, 2, 42)) is transformed into foo((1, 3)) and a warning is
issued only with regard to the first element.
2. foo((bar(), 2, 42)) is transformed into foo((bar(), 3)) and no
warning is issued.
3. foo(((1, 2, 3), (4, 5, 42))) is transformed into foo((1, 4, 42)) and
warnings are issued with regard to the first elements of inner
sequences only."
Closure,22,Classify non-rightmost expressions as problematic,"**Purpose of code changes:**
When it comes to an expression involving the comma operator, only the
first element of such a sequence is checked for being free of side
effects. If the element is free of side effects, it is classified as
problematic and a warning is issued.

As other non-rightmost elements are not checked for being free of side
effects and therefore cannot be classified as problematic, this leads
to unexpected behavior:

1. foo((1, 2, 42)) is transformed into foo((1, 3)) and a warning is
issued only with regard to the first element.
2. foo((bar(), 2, 42)) is transformed into foo((bar(), 3)) and no
warning is issued.
3. foo(((1, 2, 3), (4, 5, 42))) is transformed into foo((1, 4, 42)) and
warnings are issued with regard to the first elements of inner
sequences only."
Closure,23,func_b4f4021a02bcc286f61c4eb4db5106d0188b2c5dbd6e25911c7ba4fdb322831f does not check for side effects,"**What steps will reproduce the problem?**
1. Compile the following program with simple or advanced optimization:
console.log([console.log('hello, '), 'world!'][1]);

**What is the expected output? What do you see instead?**
The expected output would preserve side effects. It would not transform the program at all or transform it into:

console.log((console.log(""hello""), ""world!""));

Instead, the program is transformed into:

console.log(""world!"");

**What version of the product are you using? On what operating system?**
Revision 2022. Ubuntu 12.04.

**Please provide any additional information below.**
func_b4f4021a02bcc286f61c4eb4db5106d0188b2c5dbd6e25911c7ba4fdb322831f in com.google.javascript.jscomp.PeepholeFoldConstants should check whether every array element that is not going to be preserved has no side effects."
Closure,24,goog.scope doesn't properly check declared functions,"The following code is a compiler error:

goog.scope(function() {
 var x = function(){};
});

but the following code is not:

goog.scope(function() {
 function x() {}
});

Both code snippets should be a compiler error, because they prevent the goog.scope from being unboxed."
Closure,25,anonymous object type inference behavior is different when calling constructors,"The following compiles fine with:
java -jar build/compiler.jar --compilation\_level=ADVANCED\_OPTIMIZATIONS --jscomp\_error=accessControls --jscomp\_error=checkTypes --jscomp\_error=checkVars --js ~/Desktop/reverse.js

reverse.js:
/\*\*
 \* @param {{prop1: string, prop2: (number|undefined)}} parry
 \*/
function callz(parry) {
 if (parry.prop2 && parry.prop2 < 5) alert('alright!');
 alert(parry.prop1);
}

callz({prop1: 'hi'});



However, the following does not:
/\*\*
 \* @param {{prop1: string, prop2: (number|undefined)}} parry
 \* @constructor
 \*/
function callz(parry) {
 if (parry.prop2 && parry.prop2 < 5) alert('alright!');
 alert(parry.prop1);
}

new callz({prop1: 'hi'});


/Users/dolapo/Desktop/reverse.js:10: ERROR - actual parameter 1 of callz does not match formal parameter
found : {prop1: string}
required: {prop1: string, prop2: (number|undefined)}
new callz({prop1: 'hi'});



Thanks!"
Closure,29,closure compiler screws up a perfectly valid isFunction() implementation,"hi, this function does not get compiled correctly via google closure compiler

 isFunction = function(functionToCheck) {
 var getType;
 getType = {}; //just an object
 return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
 };

gets compiled into 

isFunction = function(a) {
 return a && ""[object Function]"" === (void 0).apply(a)
};

to make it work, we have to use an array instead of an object (even though we just want to call the object toString method)

 isFunction = function(functionToCheck) {
 var getType;
 getType = []; //not it's an array 
 return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
 };

gets compiled into

isFunction = function(a) {
 var b;
 b = [];
 return a && ""[object Function]"" === b.toString.apply(a)
};

and it does what it should do. 

i wasted an hour to find that bug. bugs me. great tool otherwise."
Closure,31,Add support for --manage_closure_dependencies and --only_closure_dependencies with compilation level WHITESPACE_ONLY,"The compiler options --manage\_closure\_dependencies and --only\_closure\_dependencies are currently ignored with compilation level WHITESPACE\_ONLY. It would be helpful for testing, if dependency management were supported for WHITESPACE\_ONLY in addition to SIMPLE\_OPTIMIZATIONS and ADVANCED\_OPTIMIZATIONS. For example, both Closure Builder and plovr automatically manage dependencies for all compilation levels.

The proposed change (see attached diff) does not automatically manage dependencies, but it enables dependency management if either --manage\_closure\_dependencies or --only\_closure\_dependencies is specified, or if at least one --closure\_entry\_point is specified.

The attached diff passed the JUnit tests: ant test"
Closure,32,Preserve doesn't preserve whitespace at start of line,"**What steps will reproduce the problem?**

Code such as:
/\*\*
 \* @preserve

This
 was
 ASCII
 Art

\*/

**What is the expected output? What do you see instead?**

The words line up on the left:
/\*
This
was
ASCII
Art
\*/


**What version of the product are you using? On what operating system?**

Live web verison.


**Please provide any additional information below.**"
Closure,33,weird object literal invalid property error on unrelated object prototype,"Apologies in advance for the convoluted repro case and the vague summary.

Compile the following code (attached as repro.js) with:
java -jar build/compiler.jar --compilation\_level=ADVANCED\_OPTIMIZATIONS --jscomp\_error=accessControls --jscomp\_error=checkTypes --jscomp\_error=checkVars --js repro.js \*

/\*\*
 \* @param {{text: string}} opt\_data
 \* @return {string}
 \*/
function temp1(opt\_data) {
 return opt\_data.text;
}

/\*\*
 \* @param {{activity: (boolean|number|string|null|Object)}} opt\_data
 \* @return {string}
 \*/
function temp2(opt\_data) {
 /\*\* @notypecheck \*/
 function \_\_inner() {
 return temp1(opt\_data.activity);
 }
 return \_\_inner();
}

/\*\*
 \* @param {{n: number, text: string, b: boolean}} opt\_data
 \* @return {string}
 \*/
function temp3(opt\_data) {
 return 'n: ' + opt\_data.n + ', t: ' + opt\_data.text + '.';
}

function callee() {
 var output = temp3({
 n: 0,
 text: 'a string',
 b: true
 })
 alert(output);
}

callee();


yields:
repro.js:30: ERROR - actual parameter 1 of temp3 does not match formal parameter
found : {b: boolean, n: number, text: (string|undefined)}
required: {b: boolean, n: number, text: string}
 var output = temp3({

It seems like temp3 is actually being called with the right type {b: boolean, n: number, text: string} though it seems to think that text is a (string|undefined)
This seems to happen because of the seemingly unrelated code in functions temp1 and temp2. If I change the name of the text property (as in repro3.js) it works.
Additionally, if I fix the type of the activity property in the record type of temp2 it works (as in repro2.js)

This comes up in our codebase in some situations where we don't have type info for all the objects being passed into a function. It's always a tricky one to find because it reports an error at a location that looks correct.


\* it also fails with SIMPLE\_OPTIMIZATIONS"
Closure,36,goog.addSingletonGetter prevents unused class removal,"**What steps will reproduce the problem?**

// ==ClosureCompiler==
// @compilation\_level ADVANCED\_OPTIMIZATIONS
// @output\_file\_name default.js
// @use\_closure\_library true
// @formatting pretty\_print,print\_input\_delimiter
// @warning\_level VERBOSE
// @debug true
// ==/ClosureCompiler==

goog.provide('foo');

var foo = function() { this.values = []; };
goog.addSingletonGetter(foo);

foo.prototype.add = function(value) {this.values.push(value)};


**What is the expected output? What do you see instead?**

Expect: The code is completely removed.

Instead:

(function($ctor$$) {
 $ctor$$.$getInstance$ = function $$ctor$$$$getInstance$$() {
 return $ctor$$.$instance\_$ || ($ctor$$.$instance\_$ = new $ctor$$)
 }
})(function() {
});


What version of the product are you using? On what operating system?

http://closure-compiler.appspot.com on Feb 28, 2012

Please provide any additional information below."
Closure,38,"Identifier minus a negative number needs a space between the ""-""s","**What steps will reproduce the problem?**
1. Compile the attached file with java -jar build/compiler.jar --compilation\_level ADVANCED\_OPTIMIZATIONS --js bulletfail.js --js\_output\_file cc.js
2. Try to run the file in a JS engine, for example node cc.js

**What is the expected output? What do you see instead?**

The file does not parse properly, because it contains

 g--0.0

This is subtraction of a negative number, but it looks like JS engines interpret it as decrementing g, and then fail to parse the 0.0. (g- -0.0, with a space, would parse ok.)

**What version of the product are you using? On what operating system?**

Trunk closure compiler on Ubuntu

**Please provide any additional information below.**"
Closure,39,externExport with @typedef can generate invalid externs,"**What steps will reproduce the problem?**
1. Create a file that has a @typedef and code referencing the type def above and below the typedef declaration.
2. Run the closure compiler and grab the externExport string stored on the last result for review.
3. I have attached both source and output files displaying the issue.

**What is the expected output? What do you see instead?**

The code above the @typedef references the aliased name of the @typedef as expected however the code below the @typedef tries embedding the body of the @typedef and ends up truncating it if the length is too long with a ""..."". This throws bad type errors when compiling against this extern. What is odd is this only seems to be the case when the parameter with the type is optional. When neither are optional it embeds the types, which is not a big deal, except when types are long; they get truncated and throw errors.


**What version of the product are you using? On what operating system?**

plovr built from revision 3103:d6db24beeb7f
Revision numbers for embedded Closure Tools:
Closure Library: 1374
Closure Compiler: 1559
Closure Templates: 23

**Please provide any additional information below.**"
Closure,40,smartNameRemoval causing compiler crash,"**What steps will reproduce the problem?**
Compiler the following code in advanced mode:

{{{
var goog = {};
goog.inherits = function(x, y) {};
var ns = {};
/\*\* @constructor \*/ ns.PageSelectionModel = function(){};

/\*\* @constructor \*/ 
ns.PageSelectionModel.FooEvent = function() {};
/\*\* @constructor \*/ 
ns.PageSelectionModel.SelectEvent = function() {};
goog.inherits(ns.PageSelectionModel.ChangeEvent, ns.PageSelectionModel.FooEvent);
}}}


**What is the expected output? What do you see instead?**
The compiler will crash. The last var check throws an illegal state exception because it knows something is wrong.

The crash is caused by smartNameRemoval. It has special logic for counting references in class-defining function calls (like goog.inherits), and it isn't properly creating a reference to PageSelectionModel."
Closure,42,"Simple ""Whitespace only"" compression removing ""each"" keyword from ""for each (var x in arr)"" loop","**What steps will reproduce the problem?**
See below code snippet before after compression

---Before---
contactcenter.screenpop.updatePopStatus = function(stamp, status) {
for each ( var curTiming in this.timeLog.timings ) {
if ( curTiming.callId == stamp ) {
curTiming.flag = status;
break;
}
}
};
---After---
contactcenter.screenpop.updatePopStatus=function(stamp,status){for(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};


**What is the expected output? What do you see instead?**
---each keyword should be preserved

**What version of the product are you using? On what operating system?**
**Please provide any additional information below.**
for each (\*\* in \*\*) ---> returns object value
for (\*\* in \*\*) --> returns index"
Closure,44,alert(/ / / / /),"alert(/ / / / /);
output: alert(/ /// /);
should be: alert(/ // / /);"
Closure,48,Type checking error when replacing a function with a stub after calling.,"Given the following Javascript:

 /\*\* @constructor \*/
 var myclass = function() {
 }
 
 /\*\* @param {boolean} success \*/
 myclass.prototype.fn = function(success) { }
 
 myclass.prototype.test = function() {
 this.fn();
 this.fn = function() { };
 }

I would expect an error at both lines of test(). Instead, the second line causes the error in the first not to be reported."
Closure,50,"Optimisation: convert array.join("","") to array.join()","**What steps will reproduce the problem?**

Compile this code:

var variable = confirm(""value from user"");
var array = [ ""constant"", variable ];
alert( array.join("","") );


**What is the expected output? What do you see instead?**

$ java -jar /usr/local/slando/lib/Google/compiler.jar --compilation\_level ADVANCED\_OPTIMIZATIONS --js foo.js
var a=[""constant"",confirm(""value from user"")];alert(a.join("",""));

We could save three bytes here by producing:

var a=[""constant"",confirm(""value from user"")];alert(a.join());


**What version of the product are you using? On what operating system?**

$ java -jar /usr/local/slando/lib/Google/compiler.jar --version
Closure Compiler (http://code.google.com/closure/compiler)
Version: 1180
Built on: 2011/06/15 21:40

Running on Linux 2.6.18


**Please provide any additional information below.**

Here's a common pattern this would be useful in:

var my\_jquery\_selectors = [];
// ... append to my\_jquery\_selectors from various parts of the codebase ...
$(my\_jquery\_selectors.join("","")).html(""the code is more readable with the comma left in place"");"
Closure,52,Converts string properties into numbers in literal object definitions,"**What steps will reproduce the problem?**
1. Minimize the following script:

var lit = {""0102"":""Zero One Zero Two""};
alert(lit[""0102""]);

**What is the expected output? What do you see instead?**

Expected:
var lit={""0102"":""Zero One Zero Two""};alert(lit[""0102""]);

Actual:
var lit={102:""Zero One Zero Two""};alert(lit[""0102""]);

**What version of the product are you using? On what operating system?**

r1459

**Please provide any additional information below.**"
Closure,53,compiler-20110811 crashes with index(1) must be less than size(1),"**What steps will reproduce the problem?**
Run compiler on https://raw.github.com/scottschiller/SoundManager2/master/script/soundmanager2-nodebug.js

You can copy this into the Appspot closure compiler to see the error:
// ==ClosureCompiler==
// @output\_file\_name default.js
// @compilation\_level SIMPLE\_OPTIMIZATIONS
// @code\_url https://raw.github.com/scottschiller/SoundManager2/master/script/soundmanager2-nodebug.js
// ==/ClosureCompiler==

I've attached a dump of the error from appspot.

(This is the popular SoundManager library for HTML5 audio)

**What is the expected output? What do you see instead?**
Got crash...

**What version of the product are you using? On what operating system?**
Latest (compiler-20110811). We were previously using the June build, and had no problems

**Please provide any additional information below.**"
Closure,55,Exception when emitting code containing getters,"Consider the following source code: http://trac.webkit.org/browser/trunk/Source/WebCore/inspector/front-end/Settings.js#L123

Following exception fires unless I remove the ""get name()"" getter from the code.

java.lang.RuntimeException: java.lang.IllegalStateException: Expected function but was call Reference node CALL 128 [free\_call: 1] [source\_file: Settings.js]
 at com.google.javascript.jscomp.Compiler.runCallable(Compiler.java:629)
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:574)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:556)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:515)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:662)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:295)
 at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:758)
Caused by: java.lang.IllegalStateException: Expected function but was call Reference node CALL 128 [free\_call: 1] [source\_file: Settings.js]
 at com.google.javascript.jscomp.AstValidator$1.handleViolation(AstValidator.java:51)
 at com.google.javascript.jscomp.AstValidator.violation(AstValidator.java:763)
 at com.google.javascript.jscomp.AstValidator.validateNodeType(AstValidator.java:768)
 at com.google.javascript.jscomp.AstValidator.validateFunctionExpression(AstValidator.java:359)
 at com.google.javascript.jscomp.AstValidator.validateObjectLitGetKey(AstValidator.java:696)
 at com.google.javascript.jscomp.AstValidator.validateObjectLitKey(AstValidator.java:677)
 at com.google.javascript.jscomp.AstValidator.validateObjectLit(AstValidator.java:670)
 at com.google.javascript.jscomp.AstValidator.validateExpression(AstValidator.java:252)
 at com.google.javascript.jscomp.AstValidator.validateAssignmentExpression(AstValidator.java:603)
 at com.google.javascript.jscomp.AstValidator.validateExpression(AstValidator.java:219)
 at com.google.javascript.jscomp.AstValidator.validateExprStmt(AstValidator.java:476)
 at com.google.javascript.jscomp.AstValidator.validateStatement(AstValidator.java:126)
 at com.google.javascript.jscomp.AstValidator.validateScript(AstValidator.java:89)
 at com.google.javascript.jscomp.AstValidator.validateCodeRoot(AstValidator.java:79)
 at com.google.javascript.jscomp.AstValidator.process(AstValidator.java:63)
 at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(PhaseOptimizer.java:273)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:250)
 at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:168)
 at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1634)
 at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:664)
 at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:70)
 at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:559)
 at com.google.javascript.jscomp.Compiler$1.call(Compiler.java:556)
 at com.google.javascript.jscomp.Compiler$2.run(Compiler.java:601)
 at java.lang.Thread.run(Thread.java:680)"
Closure,56,Last warning or error in output is truncated,"The last error or warning statement written to the output appears to be getting truncated. It's causing a problem for my error / warning parser.

To reproduce, create a file called test.js and add the following content to it:

---------------
alert(foo);
alert(bar);
---------------

When compiled, the output looks like this:

---------------
>java -jar compiler.jar --warning\_level VERBOSE --js test.js
test.js:1: ERROR - variable foo is undefined
alert(foo);
 ^

test.js:2: ERROR - variable bar is undefined

2 error(s), 0 warning(s)
---------------

If you look at the last error includes neither the line the error occurred on nor the column-indicating caret. This happens with warnings as well.

Tested against r1257 committed 2011-07-11 11:11:32 -0700."
Closure,57,compiler crashes when  goog.provide used with non string,"**What steps will reproduce the problem?**
1. insert goog.provide(some.function);
2. compile.
**3.**
**What is the expected output? What do you see instead?**

This should give an error diagnostic. What it gives is:

java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please email js-compiler@google.com with this stack trace.
GETPROP 17 [originalname: Spike] [source\_file: file.js] is not a string node
 Node(CALL): file.js:17:12
goog.provide(mine.Spike);
...
[stack traces...]

I think this is the current build as of the day of this report."
Closure,58,Online CC bug: report java error.,"**What steps will reproduce the problem?**
1. open http://closure-compiler.appspot.com/
2. input js code:
 function keys(obj) {
 var a = [], i = 0;
 for (a[i++] in obj)
 ;
 return a;
 }
3. press [compile] button.

**What is the expected output? What do you see instead?**
Except OK. See java error.

**What version of the product are you using? On what operating system?**
Online CC version."
Closure,59,Cannot exclude globalThis checks through command line,"**What steps will reproduce the problem?**
1. Run command line utility
2. Supply flags --warning\_level VERBOSE --jscomp\_off globalThis --jscomp\_off nonStandardJsDocs

**What is the expected output? What do you see instead?**
I expect that globalThis and nonStandardJsDocs warnings will be ignored. Only nonStandardJsDocs warnings are ignored.

**What version of the product are you using? On what operating system?**
Version 1180
Sun OS 5.10

**Please provide any additional information below.**
--jscomp\_error also doesn't work with globalThis (works with nonStandardJSDocs)."
Closure,61,Closure removes needed code.,"**What steps will reproduce the problem?**
1. Try the following code, in Simple mode
Math.blah = function(test) { test.a = 5; };
var test = new Object();
Math.blah(test); 
2. The output is
Math.blah=function(a){a.a=5};var test={};


**What is the expected output? What do you see instead?**
Note that Math.blah(test) was removed. It should not be. It issues a warning: JSC\_USELESS\_CODE: Suspicious code. This code lacks side-effects. Is there a bug? at line 4 character 9

**What version of the product are you using? On what operating system?**
Tested on Google hosted Closure service.

**Please provide any additional information below.**
Closure seems to be protective about Math in particular, and doesn't like people messing around with her? So, when I try the following code:-
var n = {};
n.blah = function(test) { test.a = 5; };
var test = new Object();
n.blah(test);

It works. When I replace n by Math, then again, Closure kicks out blah. I need that poor fellow. Please talk some sense into it."
Closure,62,Column-indicating caret is sometimes not in error output,"For some reason, the caret doesn't always show up in the output when there are errors.

When test.js looks like this:


>alert(1;


, the output is this:


>java -jar compiler.jar --js test.js
test.js:1: ERROR - Parse error. missing ) after argument list

1 error(s), 0 warning(s)


However, when test.js looks like this (notice the line break after the semicolon):


>alert(1;
>


, the output is this:


>java -jar compiler.jar --js test.js
test.js:1: ERROR - Parse error. missing ) after argument list
alert(1;
 ^

1 error(s), 0 warning(s)


That's the simplest reproduction of the problem that I could come up with, but I just encountered the problem in a file with ~100 LOC in it. This is the first time I believe I've run into the problem, but when it happens, my error parser fails and it becomes a pain to track down the raw output to find the actual problem.

Tested against r1171, committed 6/10 08:06. The problem is present going back to at least r1000, so this isn't a new issue."
Closure,65,String escaping mishandles null byte,"**What steps will reproduce the problem?**
1. Run:
var x = ""\u00003""; if (x.length < 2) { alert(""fail""); } else { alert(""win""); }
2. Compile and run

**What is the expected output? What do you see instead?**
""win"" is expected. ""fail"" is observed

**What version of the product are you using? On what operating system?**
r1167 on OS x 10.6

**Please provide any additional information below.**
The problem is here: http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CodeGenerator.java#1015

Here's a patch that fixes it:
$ svn diff
Index: src/com/google/javascript/jscomp/CodeGenerator.java
===================================================================
--- src/com/google/javascript/jscomp/CodeGenerator.java (revision 1167)
+++ src/com/google/javascript/jscomp/CodeGenerator.java (working copy)
@@ -1012,7 +1012,7 @@
 for (int i = 0; i < s.length(); i++) {
 char c = s.charAt(i);
 switch (c) {
- case '\0': sb.append(""\\0""); break;
+ case '\0': sb.append(""\\000""); break;
 case '\n': sb.append(""\\n""); break;
 case '\r': sb.append(""\\r""); break;
 case '\t': sb.append(""\\t""); break;

You could also lookahead and output ""\\000"" only if the following char is 0-7 (octal valid) and otherwise output ""\\0"". Is 2 bytes worth the complexity?"
Closure,67,"Advanced compilations renames a function and then deletes it, leaving a reference to a renamed but non-existent function","If we provide the below code to advanced:


function A() {
this.\_x = 1;
}

A.prototype['func1'] = // done to save public reference to func1
A.prototype.func1 = function() {
 this.\_x = 2;
 this.func2();
}

A.prototype.func2 = function() {
 this.\_x = 3;
 this.func3();
}

window['A'] = A;


We get the output:


function a() {
 this.a = 1
}
a.prototype.func1 = a.prototype.b = function() {
 this.a = 2;
 this.c() // Problem!
};
window.A = a;


So the compiler emits no errors, and renames 'func2' to 'c' but ends up throwing away the definition of that function!

The problem arises when I use:

A.prototype['func1'] = // done to save public reference to func1
A.prototype.func1 = function() {
...
}

The ['func1'] line is apparently enough to save the reference correctly, but also has the side effect of causing the function innards to do the wrong thing.

I can of course instead write it as:

A.prototype['func1'] = A.prototype.func1;
A.prototype.func1 = function() {
 this.\_x = 2;
 this.func2();
}

In which case Advanced will compile correctly and the results will also be valid.

function a() {
 this.a = 1
}
a.prototype.func1 = a.prototype.b;
a.prototype.b = function() {
 this.a = 2;
 this.a = 3 // func2, correctly minified
};
window.A = a;


For now I can just use the expected way of declaring that func1 export, but since the compiler returns with no errors or warnings and creates a function with no definition, it seems worth reporting."
Closure,69,Compiler should warn/error when instance methods are operated on,"**What steps will reproduce the problem?**
1. Compile and run the following code:
 goog.require('goog.graphics.Path');
 function demo() {
 var path = new goog.graphics.Path();
 var points = [[1,1], [2,2]];
 for (var i = 0; i < points.length; i++) {
 (i == 0 ? path.moveTo : path.lineTo)(points[i][0], points[i][1]);
 }
 }
 goog.exportSymbol('demo', demo);

**What is the expected output? What do you see instead?**
I expect it to either work or produce a warning. In this case, the latter since there's an error in the javascript - when calling path.moveTo(x, y), ""this"" is set correctly to the path element in the moveTo function. But when the function is operated on, as in (i == 0 ? path.moveTo : path.lineTo)(x, y), it's no longer an instance method invocation, so ""this"" reverts to the window object. In this case, an error results because moveTo references a field in Path that is now ""undefined"". Better would be to issue a warning/error that an instance method is being converted to a normal function (perhaps only if it references this).

**What version of the product are you using? On what operating system?**
Unknown (it's built into my build tools) - I presume this issue is present in all builds. Running on ubuntu.

**Please provide any additional information below.**"
Closure,70,unexpected typed coverage of less than 100%,"**What steps will reproduce the problem?**
1. Create JavaScript file:
/\*global window\*/
/\*jslint sub: true\*/
/\*\*
 \* @constructor
 \* @param {!Element} element
 \*/
function Example(element) {
 /\*\*
 \* @param {!string} ns
 \* @param {!string} name
 \* @return {undefined}
 \*/
 this.appendElement = function appendElement(ns, name) {
 var e = element.ownerDocument.createElementNS(ns, name);
 element.appendChild(e);
 };
}
window[""Example""] = Example;
2. compile it:
java -jar compiler.jar --jscomp\_error checkTypes --summary\_detail\_level 3 --js v.js --js\_output\_file compiled.js
3. observe the outcome:
0 error(s), 0 warning(s), 73.7% typed

**What is the expected output? What do you see instead?**
This was expected:
0 error(s), 0 warning(s), 100% typed

**What version of the product are you using? On what operating system?**
Closure Compiler Version: 964, Built on: 2011/04/05 14:31 on GNU/Linux.

**Please provide any additional information below.**"
Closure,71,no warnings when @private prop is redeclared on subclass,"**What steps will reproduce the problem?**
/\*\* @constructor \*/ function Foo() { /\*\* @private \*/ this.x\_ = 3; }

then, in a separate file:
/\*\* @constructor 
 \* @extends {Foo} \*/ function SubFoo() { /\*\* @private \*/ this.x\_ = 3; }

then, compile with --jscomp\_error=visibility

Expected: You should get an error.
Actual: No error.

You get an error as appropriate if the second @private annotation is removed."
Closure,73,Codepoint U+007f appears raw in output,"**What steps will reproduce the problem?**
1. Open http://closure-compiler.appspot.com/home in your browser
2. Enter the source code: alert('\x7f')
3. Hit the ""Compile"" button.

What is the expected output?
alert(""\x7f"")

What do you see instead?
alert("""");


**What version of the product are you using? On what operating system?**
The version live on 11 April 2011.

**Please provide any additional information below.**
Codepoint U+007f is a delete control character and is the only non-printable ASCII codepoint that is not <= U+0020. http://www.fileformat.info/info/unicode/char/7f/index.htm

It should probably not appear raw in emitted source code because, it can confuse encoders."
Closure,77,\0 \x00 and \u0000 are translated to null character,"**What steps will reproduce the problem?**
1. write script with string constant ""\0"" or ""\x00"" or ""\u0000""

**What is the expected output? What do you see instead?**
I expected a string literal with ""\0"" (or something like that)
and instead get a string literal with three null character values.

**What version of the product are you using? On what operating system?**
compiler-20110119.zip on windows 7 x64

**Please provide any additional information below.**

This is causing an issue with IE9 and jQuery.getScript. It causes IE9 to interpret the null character as the end of the file instead of a null character."
Closure,78,division by zero wrongly throws JSC_DIVIDE_BY_0_ERROR,"**What steps will reproduce the problem?**

unaliased division by zero `1/0`

**What is the expected output? What do you see instead?**

I expect minified code, but an error is thrown instead.

**What version of the product are you using? On what operating system?**

appspot

**Please provide any additional information below.**

Division by zero is a perfectly sane operation in ECMAScript. See 11.5.2 [0] of the ECMAScript 5 specification. Aliased division by zero `(n=1)/0` is permitted.

[0] http://es5.github.com/#x11.5.2"
Closure,80,Unexpected expression nodeDELPROP 1,"As of version 20110119 of the closure compiler, the following code produces an error when it's compiled with advanced compilation enabled:

 function x() { return delete a; }


The exact output of the compiler:


java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.
Unexpected expression nodeDELPROP 1 [sourcename: stdin]
 parent:RETURN 1 [sourcename: stdin]
 Node(RETURN): stdin:1:15
function x() { return delete a; }
 Parent(BLOCK): stdin:1:13
function x() { return delete a; }

 at com.google.javascript.jscomp.Compiler.runCallable(Unknown Source)
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)
 at com.google.javascript.jscomp.Compiler.compile(Unknown Source)
 at com.google.javascript.jscomp.Compiler.compile(Unknown Source)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)
 at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)
Caused by: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.
Unexpected expression nodeDELPROP 1 [sourcename: stdin]
 parent:RETURN 1 [sourcename: stdin]
 Node(RETURN): stdin:1:15
function x() { return delete a; }
 Parent(BLOCK): stdin:1:13
function x() { return delete a; }

 at com.google.javascript.jscomp.NodeUtil.func_86e933ad417e281deb5c33d9d6ed6286600b55b306f36fb637ab278b38c16868(Unknown Source)
 at com.google.javascript.jscomp.NodeUtil.func_86e933ad417e281deb5c33d9d6ed6286600b55b306f36fb637ab278b38c16868(Unknown Source)
 at com.google.javascript.jscomp.PureFunctionIdentifier$FunctionAnalyzer.visit(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverseFunction(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)
 at com.google.javascript.jscomp.NodeTraversal.traverse(Unknown Source)
 at com.google.javascript.jscomp.PureFunctionIdentifier.process(Unknown Source)
 at com.google.javascript.jscomp.PureFunctionIdentifier$Driver.process(Unknown Source)
 at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)
 at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)
 at com.google.javascript.jscomp.Compiler.optimize(Unknown Source)
 at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)
 at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)
 at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)
 at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)
 at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)
 at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.IllegalStateException: Unexpected expression nodeDELPROP 1 [sourcename: stdin]
 parent:RETURN 1 [sourcename: stdin]
 ... 23 more"
Closure,81,An unnamed function statement statements should generate a parse error,"An unnamed function statement statements should generate a parse error, but it does not, for example:

function () {};

Note: Unnamed function expression are legal:

(function(){});"
Closure,82,.indexOf fails to produce missing property warning,"The following code compiled with VERBOSE warnings or with the missingProperties check enabled fails to produce a warning or error:

var s = new String(""hello"");
alert(s.toLowerCase.indexOf(""l""));

However, other string functions do properly produce the warning:

var s = new String(""hello"");
alert(s.toLowerCase.substr(0, 1));"
Closure,83,Cannot see version with --version,"**What steps will reproduce the problem?**
1. Download sources of latest (r698) command-line version of closure compiler.
2. Build (with ant from command line).
3. Run compiler (java -jar compiler.jar --version).

What is the expected output?
Closure Compiler (http://code.google.com/closure/compiler)
Version: 698
Built on: 2011/01/17 12:16

What do you see instead?
Опция ""--version"" требует операнд
(Option ""--version"" requires operand)
and full list of options with description.

**What version of the product are you using? On what operating system?**
Latest source of command-line compiler from SVN (r698). OS Linux Mint 7, Sun Java 1.6.0\_22.

**Please provide any additional information below.**
When running compiler with
java -jar compiler.jar --version ?
it shows error message, then version info, then full list of options."
Closure,86,side-effects analysis incorrectly removing function calls with side effects,"Sample Code:
---
/\*\* @constructor \*/
function Foo() {
 var self = this;
 window.setTimeout(function() {
 window.location = self.location;
 }, 0);
}

Foo.prototype.setLocation = function(loc) {
 this.location = loc;
};

(new Foo()).setLocation('http://www.google.com/');
---

The setLocation call will get removed in advanced mode."
Closure,87,IE8 error: Object doesn't support this action,"**What steps will reproduce the problem?**
1. Use script with fragment like
 if (e.onchange) {
 e.onchange({
 \_extendedByPrototype: Prototype.emptyFunction,
 target: e
 });
 }
2. Compile with Compiler (command-line, latest version)
3. Use in IE8

What is the expected output?
Script:
if(b.onchange){b.onchange({\_extendedByPrototype:Prototype.emptyFunction,target
:b})}

What do you see instead?
Script:
b.onchange&&b.onchange({\_extendedByPrototype:Prototype.emptyFunction,target
:b})
IE8:
Error message ""Object doesn't support this action""

**What version of the product are you using? On what operating system?**
Version: 20100917 (revision 440)
Built on: 2010/09/17 17:55"
Closure,88,Incorrect assignment removal from expression in simple mode.,"function closureCompilerTest(someNode) {
 var nodeId;
 return ((nodeId=someNode.id) && (nodeId=parseInt(nodeId.substr(1))) && nodeId>0);
}

COMPILES TO:

function closureCompilerTest(b){var a;return b.id&&(a=parseInt(a.substr(1)))&&a>0};

""nodeId=someNode.id"" is replaced with simply ""b.id"" which is incorrect as the value of ""nodeId"" is used."
Closure,91,support @lends annotation,"Some javascript toolkits (dojo, base, etc.) have a special way of declaring (what java calls) classes, for example in dojo:

dojo.declare(""MyClass"", [superClass1, superClass2], { 
 foo: function(){ ... } 
 bar: function(){ ... } 
}); 

JSDoc (or at least JSDoc toolkit) supports this via annotations: 

/\*\* 
 \* @name MyClass 
 \* @class 
 \* @extends superClass1 
 \* @extends superClass2 
 \*/ 
dojo.declare(""MyClass"", [superClass1, superClass2], /\*\* @lends 
MyClass.prototype \*/ { 
 foo: function(){ ... } 
 bar: function(){ ... } 
}); 

The @lends keyword in particular is useful since it tells JSDoc that foo and bar are part of MyClass's prototype. But closure compiler isn't picking up on that, thus I get a bunch of errors about ""dangerous use of this"" inside of foo() and bar(). 

So, can @lends support be added to the closure compiler?

The workaround is to use @this on every method, but not sure if that is sufficient to make advanced mode compilation work correctly."
Closure,92,bug with implicit namespaces across modules,"If there are three modules, the latter two of which depend on the root module:

// Module A
goog.provide('apps');

// Module B
goog.provide('apps.foo.bar.B');

// Module C
goog.provide('apps.foo.bar.C');

and this is compiled in SIMPLE\_OPTIMIZATIONS mode, the following code will be produced:

// Module A
var apps={};apps.foo.bar={};apps.foo={};

// Module B
apps.foo.bar.B={};

// Module C
apps.foo.bar.C={};

This will result in a runtime error in Module A because apps.foo.bar is assigned before apps.foo.

The patch for the fix (with regression test) is available at:
http://codereview.appspot.com/2416041"
Closure,94,closure-compiler @define annotation does not allow line to be split on 80 characters.,"**What steps will reproduce the problem?**
1. Create a JavaScript file with the followiing:
/\*\* @define {string} \*/
var CONSTANT = ""some very long string name that I want to wrap "" +
 ""and so break using a + since I don't want to "" +
 ""introduce a newline into the string.""
2. Run closure-compiler on the .js file.
3. See it generate an error on the '+'.

**What is the expected output? What do you see instead?**
It should work, since the line is assigning a constant value to the var.

**Please provide any additional information below.**
Removing the '+' and making the string all one line does work correctly."
Closure,95,Use @public tag to prevent compression of symbol names,"Given this input code:

 Glow = {};
 /\*\* @public \*/ Glow.versions = [1,2,3];
 Glow.showVersions = function() { alert(Glow.versions); }
 
 // exports
 window['Glow'] = Glow;
 Glow['versions'] = Glow.versions;
 Glow['showVersions'] = Glow.showVersions;

The compiler (with ADVANCED\_OPTIMIZATIONS on) will produce the following
output code:

 Glow = {};
 Glow.a = [1, 2, 3];
 Glow.b = function() { alert(Glow.a) };
 window.Glow = Glow;
 Glow.versions = Glow.a;
 Glow.showVersions = Glow.b

From outside the Glow library, a user may do the following (in their own,
uncompressed code):

 Glow.versions = [4,5,6];
 Glow.showVersions();

Only in the compiled code will the user-code produces ""1,2,3"" instead of
the expected ""4,5,6"". This is because the compiler renamed the reference to
[1,2,3] in `showVersions()` to ""Glow.a"", whilst the user assigned a new
array to ""Glow.versions"", and therefore the two different names now refer
to two different arrays.

I can avoid this by using the stringy-name to refer to Glow[""versions""],
but I would then have to do that everywhere in my code which is a annoying
and bug-prone (if I or someone else should ever forget). I'd prefer to tell
the compiler once about my wish to have a property name left uncompresed,
rather than relying on a side effect (the fact that the compiler won't
compress stringy-named properties) and then having to invoke that
side-effect consistently everywhere.

Instead I'm requesting that when the compiler sees a property is marked by
the author as @public it should then leave that name uncompressed everywhere.

So, given the input code above, the desired output would be:

 Glow = {};
 Glow.versions = [1, 2, 3];
 Glow.b = function() { alert(Glow.versions) };
 window.Glow = Glow;
 Glow.versions = Glow.versions; // not needed now
 Glow.showVersions = Glow.b

I'm not fixed on a particular tag, but @public seems an obvious choice, and
I'd prefer to use tags that already exist in JsDoc Toolkit.

Note that my proposed feature is different than the `@export Glow.versions`
tag proposal, as that tag would merely be a shortcut for ""Glow['versions']
= Glow.versions;"", which, as I've shown above, doesn't solve this problem."
Closure,96,Missing type-checks for var_args notation,"**What steps will reproduce the problem?**
1. Compile this:
//-------------------------------------
// ==ClosureCompiler==
// @compilation\_level SIMPLE\_OPTIMIZATIONS
// @warning\_level VERBOSE
// @output\_file\_name default.js
// @formatting pretty\_print
// ==/ClosureCompiler==

/\*\*
\* @param {...string} var\_args
\*/
function foo(var\_args) {
 return arguments.length;
}

foo('hello'); // no warning - ok
foo(123); // warning - ok
foo('hello', 123); // no warning! error.
//-------------------------------------

**What is the expected output? What do you see instead?**
Should get a type-mismatch warning for the second parameter in the third foo() call.

**What version of the product are you using? On what operating system?**
Both online compiler and the 20100616 release.

**Please provide any additional information below.**
Seems like the type-checker treats 'var\_args' as a single param and thus fails to type check the subsequent parameters.

// Fredrik"
Closure,97,Unsigned Shift Right (>>>) bug operating on negative numbers,"**What steps will reproduce the problem?**
i = -1 >>> 0 ;

**What is the expected output? What do you see instead?**
Expected: i = -1 >>> 0 ; // or // i = 4294967295 ;
Instead: i = -1 ;

**What version of the product are you using? On what operating system?**
The UI version as of 7/18/2001 (http://closure-compiler.appspot.com/home)

**Please provide any additional information below.**
-1 >>> 0 == 4294967295 == Math.pow( 2, 32 ) - 1
Test in any browser and/or See ECMA-262-5 11.7.3"
Closure,99,Prototypes declared with quotes produce a JSC_USED_GLOBAL_THIS warning.,"Compiling the following code (in advanced optimizations with VERBOSE
warning levels):

/\*\* @constructor \*/
function MyClass() {}
MyClass.prototype[""MyMethod""] = function(a) {
 this.a = a;
}
window[""MyClass""] = MyClass;

Results in the following warning: ""dangerous use of the global this
object."" This notation is convenient to declare a prototype that is purely
used for export purposes. The warning can be suppressed by using an @this
notation.

Given the following externs:

/\*\*@interface \*/
function MyParent() {}
/\*\* @param {\*} a \*/
MyParent.prototype.MyMethod = function(a) {}

And the following code:

/\*\*
\* @constructor
\* @implements {MyParent}
\*/
function MyClass() {}
MyClass.prototype[""MyMethod""] = function(a) {
 this.a2 = a;
}
window[""MyClass""] = MyClass;

The compiler also produces the waring: ""property MyMethod on interface
MyParent is not implemented by type MyClass""."
Closure,101,--process_closure_primitives can't be set to false,"**What steps will reproduce the problem?**
1. compile a file with ""--process\_closure\_primitives false""
2. compile a file with ""--process\_closure\_primitives true"" (default)
3. result: primitives are processed in both cases.

**What is the expected output? What do you see instead?**
The file should still have its goog.provide/require tags in place.
Instead they are processed.

**What version of the product are you using? On what operating system?**
current SVN (also tried two of the preceding binary releases with same 
result)

**Please provide any additional information below.**
Flag can't be set to false due to a missing ""else"" in the command-line 
parser."
Closure,102,compiler assumes that 'arguments' can be shadowed,"The code:
function name() {
 var arguments = Array.prototype.slice.call(arguments, 0);
}

gets compiled to:
function name(){ var c=Array.prototype.slice.call(c,0); }

Thanks to tescosquirrel for the report."
Closure,105,Array Join Munged Incorrectly,"$.fn.hasClass = function(selector) {
 return ( this.length > 0 ? 
 !( ( ['', this[0].className, ''].join(' ') ).indexOf( ['', selector, 
''].join(' ') ) == -1 )
 : false );
};

munges into

$.fn.hasClass=function(a){return this.length>0?
(""""+this[0].className).indexOf(""""+a)!=-1:false};

which is not identical. Looks like there might be an issue with join and ' '."
Closure,107,Variable names prefixed with MSG_ cause error with advanced optimizations,"Variables named something with MSG\_ seem to cause problems with the module system, even if no modules are used in the code.

$ echo ""var MSG\_foo='bar'"" | closure --compilation\_level ADVANCED\_OPTIMIZATIONS
stdin:1: ERROR - message not initialized using goog.getMsg
var MSG\_foo='bar'
 ^

It works fine with msg\_foo, MSG2\_foo, etc."
Closure,109,Constructor types that return all or unknown fail to parse,"Constructor types that return the all type or the unknown type currently fail to parse:

/\*\* @type {function(new:?)} \*/ var foo = function() {};
/\*\* @type {function(new:\*)} \*/ var bar = function() {};

foo.js:1: ERROR - Bad type annotation. type not recognized due to syntax error
/\*\* @type {function(new:?)} \*/ var foo = function() {};
 ^

foo.js:2: ERROR - Bad type annotation. type not recognized due to syntax error
/\*\* @type {function(new:\*)} \*/ var bar = function() {};
 ^

This is an issue for a code generator that I'm working on."
Closure,111,goog.isArray doesn't hint compiler,"**What steps will reproduce the problem?**
**1.**

/\*\*
 \* @param {\*} object
 \* @return {\*}
 \*/
var test = function(object) {
 if (goog.isArray(object)) {
 /\*\* @type {Array} \*/ var x = object;
 return x;
 }
};

2. ADVANCED\_OPTIMIZATIONS

**What is the expected output? What do you see instead?**

ERROR - initializing variable
found : \*
required: (Array|null)
 /\*\* @type {Array} \*/ var x = object;
 ^
**What version of the product are you using? On what operating system?**

Closure Compiler (http://code.google.com/closure/compiler)
Version: v20130411-90-g4e19b4e
Built on: 2013/06/03 12:07

**Please provide any additional information below.**

goog.is\* is supposed to help the compiler to check which type we're dealing with."
Closure,113,Bug in require calls processing,"The Problem

ProcessClosurePrimitives pass has a bug in func_961f0c5fa390bf6eba0f9a761f5263d51985be86258bb1e7a88d2c8de5ed3d7b method.
The method processes goog.require calls. If a require symbol is invalid i.e is not provided anywhere, the method collects it for further error reporting. If the require symbol is valid, the method removes it from the ast.

All invalid require calls must be left for further using/checking of the code! The related comment in the code confirms this.

Nevertheless, the second condition (requiresLevel.isOn() -> see source code) is invalid and always causes removing of the requires when we want to check these requires.

In any case, the method should not use the requiresLevel to decide if we need removing. The requiresLevel should be used to check if we need error reporting. 

The Solution

Remove the condition.
Please see the attached patch."
Closure,114,Crash on the web closure compiler,"With the web application (http://closure-compiler.appspot.com/home)

Config:

// ==ClosureCompiler==
// @output\_file\_name default.js
// @compilation\_level ADVANCED\_OPTIMIZATIONS
// ==/ClosureCompiler==


Code:

var g=function(m){return m\*Math.random()|0},d=document,h=d.getElementById('h'),c=d.getElementById('c'),l;
(l=function(){requestAnimationFrame(l);h.style.textShadow=""0 0 1px #000,""+(g(10)-5)+""px ""+(g(10)-5)+""px 0 #888,0 0 180px rgb(""+g(255)+"",""+g(255)+"",""+g(255)+"")""})();
d.addEventListener('mousemove',function(v){c.style.marginTop=(v.pageY/10+15|0)+'px'})


Cause:

var l; // Déclare l variable

// Store function in l var and call
(l = function(){ ... }) ();


Crash repport: (long)

23: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Please report this problem.
Unexpected variable l
 Node(NAME l): Input\_0:2:36
(l=function(){requestAnimationFrame(l);h.style.textShadow=""0 0 1px #000,""+(g(10)-5)+""px ""+(g(10)-5)+""px 0 #888,0 0 180px rgb(""+g(255)+"",""+g(255)+"",""+g(255)+"")""})();
 Parent(CALL): Input\_0:2:14
(l=function(){requestAnimationFrame(l);h.style.textShadow=""0 0 1px #000,""+(g(10)-5)+""px ""+(g(10)-5)+""px 0 #888,0 0 180px rgb(""+g(255)+"",""+g(255)+"",""+g(255)+"")""})();

 at com.google.javascript.jscomp.VarCheck.visit(VarCheck.java:159)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:544)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:538)
 at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:318)
 at com.google.javascript.jscomp.NodeTraversal.traverseRoots(NodeTraversal.java:507)
 at com.google.javascript.jscomp.VarCheck.process(VarCheck.java:102)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:271)
 at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:215)
 at com.google.javascript.jscomp.Compiler.optimize(Compiler.java:1918)
 at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:751)
 at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:85)
 at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:652)
 at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:649)
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:709)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:649)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:605)
 at com.google.javascript.jscomp.webservice.backend.CompilerInvokerImpl.compile(CompilerInvokerImpl.java:47)
 at com.google.javascript.jscomp.webservice.backend.ServerController.executeRequest(ServerController.java:174)
 at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.serviceParsedRequest(CompilationRequestHandler.java:180)
 at com.google.javascript.jscomp.webservice.backend.CompilationRequestHandler.service(CompilationRequestHandler.java:162)
 at com.google.javascript.jscomp.webservice.frontend.CompilationServlet.doPost(CompilationServlet.java:83)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
 at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
 at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
 at com.google.apphosting.utils.servlet.ParseBlobUploadFilter.doFilter(ParseBlobUploadFilter.java:125)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at com.google.apphosting.runtime.jetty.SaveSessionFilter.doFilter(SaveSessionFilter.java:35)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at com.google.apphosting.utils.servlet.JdbcMySqlConnectionCleanupFilter.doFilter(JdbcMySqlConnectionCleanupFilter.java:60)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
 at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
 at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)
 at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
 at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
 at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
 at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
 at com.google.apphosting.runtime.jetty.AppVersionHandlerMap.handle(AppVersionHandlerMap.java:266)
 at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
 at org.mortbay.jetty.Server.handle(Server.java:326)
 at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
 at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)
 at com.google.apphosting.runtime.jetty.RpcRequestParser.parseAvailable(RpcRequestParser.java:76)
 at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
 at com.google.apphosting.runtime.jetty.JettyServletEngineAdapter.serviceRequest(JettyServletEngineAdapter.java:146)
 at com.google.apphosting.runtime.JavaRuntime$RequestRunnable.run(JavaRuntime.java:439)
 at com.google.tracing.TraceContext$TraceContextRunnable.runInContext(TraceContext.java:435)
 at com.google.tracing.TraceContext$TraceContextRunnable$1.run(TraceContext.java:442)
 at com.google.tracing.CurrentContext.runInContext(CurrentContext.java:186)
 at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContextNoUnref(TraceContext.java:306)
 at com.google.tracing.TraceContext$AbstractTraceContextCallback.runInInheritedContext(TraceContext.java:298)
 at com.google.tracing.TraceContext$TraceContextRunnable.run(TraceContext.java:439)
 at com.google.apphosting.runtime.ThreadGroupPool$PoolEntry.run(ThreadGroupPool.java:251)
 at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.IllegalStateException: Unexpected variable l
 ... 58 more

Original Post Data: 
output\_format=json&output\_info=compiled\_code&output\_info=warnings&output\_info=errors&output\_info=statistics&compilation\_level=ADVANCED\_OPTIMIZATIONS&warning\_level=verbose&output\_file\_name=default.js&js\_code=var%20g%3Dfunction(m)%7Breturn%20m\*Math.random()%7C0%7D%2Cd%3Ddocument%2Ch%3Dd.getElementById('h')%2Cc%3Dd.getElementById('c')%2Cl%3B%0A(l%3Dfunction()%7BrequestAnimationFrame(l)%3Bh.style.textShadow%3D%220%200%201px%20%23000%2C%22%2B(g(10)-5)%2B%22px%20%22%2B(g(10)-5)%2B%22px%200%20%23888%2C0%200%20180px%20rgb(%22%2Bg(255)%2B%22%2C%22%2Bg(255)%2B%22%2C%22%2Bg(255)%2B%22)%22%7D)()%3B%0Ad.addEventListener('mousemove'%2Cfunction(v)%7Bc.style.marginTop%3D(v.pageY%2F10%2B15%7C0)%2B'px'%7D)"
Closure,115,Erroneous optimization in ADVANCED_OPTIMIZATIONS mode,"**What steps will reproduce the problem?**

1. Create a file input.js with the following ""minimal"" test case:

 window[""anchor""] = function (obj, modifiesProp) {
 return (function (saved) {
 return modifiesProp(obj) + saved;
 })(obj[""prop""]);
 }

2. Compile it with:

 java -jar .../build/compiler.jar \
 --compilation\_level ADVANCED\_OPTIMIZATIONS \
 --warning\_level VERBOSE \
 --externs window.js \
 --js input.js \
 --js\_output\_file output.js

3. That's all!

What is the expected output?

 window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};

What do you see instead?

 window.foo=function(a,b){return b(a)+a.prop};

Note how this is semantically very different if modifiesProp/b (whose
semantics are unknown to the compiler) side-effects a.prop.

The evaluation order of + is well-defined in EcmaScript 5, but even
then, this happens even if one substitutes the , (comma) operator.

**What version of the product are you using? On what operating system?**

Git HEAD

 commit 4a62ee4bca02169dd77a6f26ed64a624b3f05f95
 Author: Chad Killingsworth <chadkillingsworth@missouristate.edu>
 Date: Wed Sep 25 14:52:28 2013 -0500
 
 Add history.state to html5 externs

on Linux."
Closure,116,Erroneous optimization in ADVANCED_OPTIMIZATIONS mode,"**What steps will reproduce the problem?**

1. Create a file input.js with the following ""minimal"" test case:

 window[""anchor""] = function (obj, modifiesProp) {
 return (function (saved) {
 return modifiesProp(obj) + saved;
 })(obj[""prop""]);
 }

2. Compile it with:

 java -jar .../build/compiler.jar \
 --compilation\_level ADVANCED\_OPTIMIZATIONS \
 --warning\_level VERBOSE \
 --externs window.js \
 --js input.js \
 --js\_output\_file output.js

3. That's all!

What is the expected output?

 window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};

What do you see instead?

 window.foo=function(a,b){return b(a)+a.prop};

Note how this is semantically very different if modifiesProp/b (whose
semantics are unknown to the compiler) side-effects a.prop.

The evaluation order of + is well-defined in EcmaScript 5, but even
then, this happens even if one substitutes the , (comma) operator.

**What version of the product are you using? On what operating system?**

Git HEAD

 commit 4a62ee4bca02169dd77a6f26ed64a624b3f05f95
 Author: Chad Killingsworth <chadkillingsworth@missouristate.edu>
 Date: Wed Sep 25 14:52:28 2013 -0500
 
 Add history.state to html5 externs

on Linux."
Closure,117,Wrong type name reported on missing property error.,"/\*\*
 \* @constructor
 \*/
function C2() {}

/\*\*
 \* @constructor
 \*/
function C3(c2) {
 /\*\*
 \* @type {C2} 
 \* @private
 \*/
 this.c2\_;

 use(this.c2\_.prop);
}

Produces:

Property prop never defined on C3.c2\_

But should be:

Property prop never defined on C2"
Closure,118,Prototype method incorrectly removed,"// ==ClosureCompiler==
// @compilation\_level ADVANCED\_OPTIMIZATIONS
// @output\_file\_name default.js
// @formatting pretty\_print
// ==/ClosureCompiler==

/\*\* @const \*/
var foo = {};
foo.bar = {
 'bar1': function() { console.log('bar1'); }
}

/\*\* @constructor \*/
function foobar() {}
foobar.prototype = foo.bar;

foo.foobar = new foobar;

console.log(foo.foobar['bar1']);"
Closure,119,catch(e) yields JSC_UNDEFINED_NAME warning when e is used in catch in advanced mode,"**What steps will reproduce the problem?**
1. set closure for advanced compilation
2. compile this:
// ==ClosureCompiler==
// @compilation\_level ADVANCED\_OPTIMIZATIONS
// @output\_file\_name default.js
// ==/ClosureCompiler==

try {
var x = 5;
}
catch(e) {
var s = ""FAIL"" + e.name + "": ""+ e.message;
}

**What is the expected output? What do you see instead?**
I expect no warning or error for this. Instead I see this:

JSC\_UNREACHABLE\_CODE: unreachable code at line 4 character 0
catch(e) {
^
JSC\_UNDEFINED\_NAME: e is never defined at line 5 character 17
var s = ""FAIL"" + e.name + "": ""+ e.message;
 ^
JSC\_UNDEFINED\_NAME: e is never defined at line 5 character 32
var s = ""FAIL"" + e.name + "": ""+ e.message;
 ^
In my case I'm especially complaining about the JSC\_UNDEFINED\_NAME warning... Also it seems the unreachable complaint isn't right, but i'm not sure.

**What version of the product are you using? On what operating system?**
I'm using this url: http://closure-compiler.appspot.com/home
using chrome browser on windows: Version 28.0.1500.95 m 
... but this is a server side error from what I see...

**Please provide any additional information below.**"
Closure,120,Overzealous optimization confuses variables,"The following code:

 // ==ClosureCompiler==
 // @compilation\_level ADVANCED\_OPTIMIZATIONS
 // ==/ClosureCompiler==
 var uid;
 function reset() {
 uid = Math.random();
 }
 function doStuff() {
 reset();
 var \_uid = uid;

 if (uid < 0.5) {
 doStuff();
 }

 if (\_uid !== uid) {
 throw 'reset() was called';
 }
 }
 doStuff();

...gets optimized to:

 var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw""reset() was called"";}b();

Notice how \_uid gets optimized away and (uid!==\_uid) becomes (a!==a) even though doStuff() might have been called and uid's value may have changed and become different from \_uid.

As an aside, replacing the declaration with ""var \_uid = +uid;"" fixes it, as does adding an extra ""uid = \_uid"" after ""var \_uid = uid""."
Closure,121,Overzealous optimization confuses variables,"The following code:

 // ==ClosureCompiler==
 // @compilation\_level ADVANCED\_OPTIMIZATIONS
 // ==/ClosureCompiler==
 var uid;
 function reset() {
 uid = Math.random();
 }
 function doStuff() {
 reset();
 var \_uid = uid;

 if (uid < 0.5) {
 doStuff();
 }

 if (\_uid !== uid) {
 throw 'reset() was called';
 }
 }
 doStuff();

...gets optimized to:

 var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw""reset() was called"";}b();

Notice how \_uid gets optimized away and (uid!==\_uid) becomes (a!==a) even though doStuff() might have been called and uid's value may have changed and become different from \_uid.

As an aside, replacing the declaration with ""var \_uid = +uid;"" fixes it, as does adding an extra ""uid = \_uid"" after ""var \_uid = uid""."
Closure,122,Inconsistent handling of non-JSDoc comments,"**What steps will reproduce the problem?**
**1.**
**2.**
**3.**
**What is the expected output? What do you see instead?**

When given:

 /\* @preserve Foo License \*/
 alert(""foo"");

It spits out:

 stdin:1: WARNING - Parse error. Non-JSDoc comment has annotations. Did you mean to start it with '/\*\*'?
 /\* @license Foo License \*/
 ^
 
 0 error(s), 1 warning(s)
 alert(""foo"");

If I take the suggestion and change the opening of the comment to '/\*\*', everything is great. However, if I change it to '/\*!', the warning goes away, but it doesn't preserve the comment either.

I expect it to print the above warning, or preserve the comment. That it does neither when starting with ""/\*!"" (and every other character I tried) is confusing.

**What version of the product are you using? On what operating system?**

Tested with my compilation of the ""v20130603"" tag:

 Closure Compiler (http://code.google.com/closure/compiler)
 Version: v20130603
 Built on: 2013/07/07 15:04

And with the provided binary:

 Closure Compiler (http://code.google.com/closure/compiler)
 Version: v20130411-90-g4e19b4e
 Built on: 2013/06/03 12:07

I'm on Parabola GNU/Linux-libre with Java:

 java version ""1.7.0\_40""
 OpenJDK Runtime Environment (IcedTea 2.4.0) (ArchLinux build 7.u40\_2.4.0-1-i686)
 OpenJDK Server VM (build 24.0-b40, mixed mode)

**Please provide any additional information below.**"
Closure,124,Different output from RestAPI and command line jar,"When I compile using the jar file from the command line I get a result that is not correct. However, when I test it via the REST API or the Web UI I get a correct output. I've attached a file with the code that we are compiling.

**What steps will reproduce the problem?**
1. Compile the attached file with ""java -jar compiler.jar --js test.js""
2. Compile the content of the attached file on http://closure-compiler.appspot.com/home
3. Compare the output, note how the following part is converted in the two cases:

""var foreignObject = gfx.parentNode.parentNode;
var parentContainer = foreignObject.parentNode.parentNode;""

**What is the expected output? What do you see instead?**
The Web UI converts the lines into: if(b){if(a=b.parentNode.parentNode,b=a.parentNode.parentNode,null!==b)
The command line converts it into: var b=a=a.parentNode.parentNode;
The Web UI results in correct code, the other results in code that tries to do ""c.appendChild(b)"" with c = b (c=a=a.parentNode.parentNode)

**What version of the product are you using? On what operating system?**
compiler.jar: v20130411-90-g4e19b4e
Mac OSX 10.8.3
Java: java 1.6.0\_45

**Please provide any additional information below.**
We are also using the compiler form within our java code, with the same result.
Web UI was called with:
// ==ClosureCompiler==
// @compilation\_level SIMPLE\_OPTIMIZATIONS
// @output\_file\_name default.js
// ==/ClosureCompiler=="
Closure,125,IllegalStateException at com.google.javascript.rhino.jstype.FunctionType.getInstanceType,"> What steps will reproduce the problem?
1. Unpack attached test case.
2. Ensure make, wget, unzip, and java are on your PATH
3. make prep (or just set up the build manually, it's not complicated)
4. make crash

> What is the expected output? What do you see instead?
Expected output: either successful compilation, or a compilation error.
Actual output: 
$ java \
 -jar ./compiler.jar \
 --js crash.js \
 --warning\_level=VERBOSE \
 --compilation\_level=SIMPLE\_OPTIMIZATIONS
java.lang.RuntimeException: java.lang.IllegalStateException
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Compiler.java:715)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:647)
 at com.google.javascript.jscomp.Compiler.compile(Compiler.java:603)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(AbstractCommandLineRunner.java:783)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.run(AbstractCommandLineRunner.java:379)
 at com.google.javascript.jscomp.CommandLineRunner.main(CommandLineRunner.java:972)
Caused by: java.lang.IllegalStateException
 at com.google.common.base.Preconditions.checkState(Preconditions.java:133)
 at com.google.javascript.rhino.jstype.FunctionType.getInstanceType(FunctionType.java:1071)
 at com.google.javascript.jscomp.TypeCheck.func_d2ba8f658c4e4d85959eda41bb618819d525b06013eaf51f5ce0870a5321a5dd(TypeCheck.java:1567)
 at com.google.javascript.jscomp.TypeCheck.visit(TypeCheck.java:569)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:534)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseFunction(NodeTraversal.java:569)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:522)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseBranch(NodeTraversal.java:528)
 at com.google.javascript.jscomp.NodeTraversal.traverseWithScope(NodeTraversal.java:353)
 at com.google.javascript.jscomp.TypeCheck.check(TypeCheck.java:400)
 at com.google.javascript.jscomp.TypeCheck.process(TypeCheck.java:371)
 at com.google.javascript.jscomp.DefaultPassConfig$30$1.process(DefaultPassConfig.java:1237)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(PhaseOptimizer.java:293)
 at com.google.javascript.jscomp.PhaseOptimizer.process(PhaseOptimizer.java:237)
 at com.google.javascript.jscomp.Compiler.check(Compiler.java:830)
 at com.google.javascript.jscomp.Compiler.compileInternal(Compiler.java:742)
 at com.google.javascript.jscomp.Compiler.access$000(Compiler.java:83)
 at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:650)
 at com.google.javascript.jscomp.Compiler$2.call(Compiler.java:647)
 at com.google.javascript.jscomp.Compiler$3.call(Compiler.java:677)
 at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
 at java.util.concurrent.FutureTask.run(FutureTask.java:138)
 at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
 at java.lang.Thread.run(Thread.java:680)
make: \*\*\* [crash] Error 254

> What version of the product are you using? On what operating system?
closure-compiler release 20130411. I have also encountered this error on earlier versions of closure-compiler, but the above repro recipe uses 20130411. I'm currently testing on OS X but this probably happens on other platforms too.

> Please provide any additional information below.

Here's the contents of crash.js (included in the attached archive):

-----begin snip-----
var test = {};

/\*\*
 \* @interface
 \*/
test.T = function() {};

/\*\*
 \* @constructor
 \* @implements {test.T}
 \*/
test.A = function() {};

/\*\*
 \* @constructor
 \* @implements {test.T}
 \*/
test.B = function() {};

/\*\*
 \* @constructor
 \*/
test.X = function() {
 this.type = test.A;
 this.t = this.f();
};

/\*\*
 \* @return {test.T}
 \*/
test.X.prototype.f = function() {
 if (this.type === test.A) {
 return new test.A();
 } else if (this.type === test.B) {
 return new test.B();
 }
};
-----end snip-----"
Closure,126,Break in finally block isn't optimized properly,"b: try { throw(""throw me"") } finally { /\* fake catcher \*/ ; break b }; console.log(""ok then..."")

... gets optimized into ...

 throw""throw me"";

... which is not the same.

The break in the finally block should prevent the exception from being passed on. The expected result is:

 console.log(""ok then..."")

ECMA-262 says:

The production TryStatement : try Block Finally is evaluated as follows:

Let B be the result of evaluating Block.
Let F be the result of evaluating Finally.
If F.type is normal, return B.
Return F.

F.type in this case would be 'break' and not 'normal', so 'break' overrides the 'throw' of B

This is with the build available for download on Feb 28 2013."
Closure,128,"The compiler quotes the ""0"" keys in object literals","**What steps will reproduce the problem?**
1. Compile alert({0:0, 1:1});

What is the expected output?
alert({0:0, 1:1});

What do you see instead?
alert({""0"":0, 1:1});

**What version of the product are you using? On what operating system?**
Latest version on Goobuntu."
Closure,129,Casting a function before calling it produces bad code and breaks plugin code,"1. Compile this code with ADVANCED\_OPTIMIZATIONS:
console.log( /\*\* @type {function(!string):!string} \*/ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable'])( '$version' ) );

produces:

'use strict';console.log((0,(new window.ActiveXObject(""ShockwaveFlash.ShockwaveFlash"")).GetVariable)(""$version""));

2. Compare with this code:
console.log( /\*\* @type {!string} \*/ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable']( '$version' )) )

produces:

'use strict';console.log((new window.ActiveXObject(""ShockwaveFlash.ShockwaveFlash"")).GetVariable(""$version""));


Notice the (0,...) wrapping around the GetVariable function in the first example. This causes the call to fail in every browser (this code is IE-only but it's just for a minimal example). The second version produces a warning that the type of GetVariable could not be determined (I enabled type warnings), and it wouldn't be possible to define these in an externs file without making a horrible mess.

This applies to all cases where functions are cast, but only causes problems (other than bloat) with plugins like this. It seems to serve no purpose whatsoever, so I assume it is a bug.

Running on a mac, not sure what version but it reports Built on: 2013/02/12 17:00, so will have been downloaded about that time."
Closure,130,arguments is moved to another scope,"Using ADVANCED\_OPTIMIZATIONS with CompilerOptions.collapsePropertiesOnExternTypes = true a script I used broke, it was something like:

function () {
 return function () {
 var arg = arguments;
 setTimeout(function() { alert(args); }, 0);
 }
}

Unfortunately it was rewritten to:

function () {
 return function () {
 setTimeout(function() { alert(arguments); }, 0);
 }
}

arguments should not be collapsed."
Closure,131,unicode characters in property names result in invalid output,"**What steps will reproduce the problem?**
1. use unicode characters in a property name for an object, like this:
var test={""a\u0004b"":""c""};

2. compile

**What is the expected output? What do you see instead?**
Because unicode characters are not allowed in property names without quotes, the output should be the same as the input. However, the compiler converts the string \u0004 to the respective unicode character, and the output is: 
var test={ab:""c""}; // unicode character between a and b can not be displayed here

**What version of the product are you using? On what operating system?**
newest current snapshot on multiple os (OSX/linux)

**Please provide any additional information below.**"
Closure,132,if statement,"**What steps will reproduce the problem?**
INPUT:
if( es[--esi][ es[esi+1] ] === 1)
{
 es[esi] = 0;
}
else
{
 es[esi] = 1;
}
OUTPUT:

es[esi] = 1 === es[--esi][es[esi + 1]] ? 0 : 1;

BUT MUST BE
es[--esi] = 1 === es[esi][es[esi + 1]] ? 0 : 1;

Im using latest version on windows"
Closure,133,Exception when parsing erroneous jsdoc: /**@return {@code foo} bar   *    baz. */,"The following causes an exception in JSDocInfoParser.

/\*\* 
 \* @return {@code foo} bar 
 \* baz. \*/
var x;



Fix to follow."
Closure,140,Google Common Loader Extern,"I needed this for one of my projects.

Chad Killingsworth"
Closure,145,Bug with labeled loops and breaks,"**What steps will reproduce the problem?**
Try to compile this code with the closure compiler : 
var i = 0; 
lab1: do{ 
 lab2: do{ 
 i++; 
 if (1) { 
 break lab2; 
 } else { 
 break lab1; 
 } 
 } while(false); 
} while(false); 

console.log(i); 

**What is the expected output? What do you see instead?**
The generated code produced is :
var a=0;do b:do{a++;break b}while(0);while(0);console.log(a); 

Which works on all browsers except IE (Looks like IE doesn't like 
the missing brackets just after the first do instruction).

**What version of the product are you using? On what operating system?**
I am using the version of Jun 16 (latest) on ubuntu 10

**Please provide any additional information below.**
Strangely, this bug doesn't happen when I use PRETTY\_PRINT formatting option."
Closure,146,bad type inference for != undefined,"**What steps will reproduce the problem?**

// ==ClosureCompiler==
// @compilation\_level ADVANCED\_OPTIMIZATIONS
// @output\_file\_name default.js
// ==/ClosureCompiler==

/\*\* @param {string} x \*/
function g(x) {}

/\*\* @param {undefined} x \*/
function f(x) {
 if (x != undefined) { g(x); }
}

**What is the expected output? What do you see instead?**

JSC\_DETERMINISTIC\_TEST: condition always evaluates to false
left : undefined
right: undefined at line 6 character 6
if (x != undefined) { g(x); }
 ^
JSC\_TYPE\_MISMATCH: actual parameter 1 of g does not match formal parameter
found : undefined
required: string at line 6 character 24
if (x != undefined) { g(x); }
 ^

the second warning is bogus."
Closure,150,Type checker misses annotations on functions defined within functions,"**What steps will reproduce the problem?**
1. Compile the following code under --warning\_level VERBOSE

var ns = {};

/\*\* @param {string=} b \*/
ns.a = function(b) {}

function d() {
 ns.a();
 ns.a(123);
}

2. Observe that the type checker correctly emits one warning, as 123 
doesn't match the type {string}

3. Now compile the code with ns.a defined within an anonymous function, 
like so:

var ns = {};

(function() {
 /\*\* @param {string=} b \*/
 ns.a = function(b) {}
})();

function d() {
 ns.a();
 ns.a(123);
}

4. Observe that a warning is emitted for calling ns.a with 0 parameters, and 
not for the type error, as though the @param declaration were ignored. 

**What version of the product are you using? On what operating system?**
r15

**Please provide any additional information below.**

This sort of module pattern is common enough that it strikes me as worth 
supporting.

One last note to make matters stranger: if the calling code isn't itself within 
a function, no warnings are emitted at all:

var ns = {};

(function() {
 /\*\* @param {string=} b \*/
 ns.a = function(b) {}
})();

ns.a();
ns.a(123);"
Closure,152,resolveTypes: jstype.UnionType cannot be cast to jstype.ObjectType,"**What steps will reproduce the problem?**

1. Compile a bunch of JavaScript files that I can't release with these options: ['--create\_name\_map\_files', 'true', '--jscomp\_warning', 'missingProperties', '--jscomp\_warning', 'undefinedVars', '--jscomp\_warning', 'checkTypes', '--warning\_level', 'VERBOSE', '--summary\_detail\_level', '3', '--process\_closure\_primitives', 'true', '--jscomp\_error', 'strictModuleDepCheck', '--jscomp\_error', 'invalidCasts', '--logging\_level', 'ALL', '--compilation\_level', 'ADVANCED\_OPTIMIZATIONS']

2. During this pass:

 Oct 26, 2010 12:09:38 AM com.google.javascript.jscomp.PhaseOptimizer$NamedPass process
 INFO: resolveTypes

, compilation terminates with:

 java.lang.RuntimeException: java.lang.ClassCastException: com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
 at com.google.javascript.jscomp.Compiler.runInCompilerThread(Unknown Source)
 at com.google.javascript.jscomp.Compiler.compile(Unknown Source)
 at com.google.javascript.jscomp.Compiler.compile(Unknown Source)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.doRun(Unknown Source)
 at com.google.javascript.jscomp.AbstractCommandLineRunner.run(Unknown Source)
 at com.google.javascript.jscomp.CommandLineRunner.main(Unknown Source)
 Caused by: java.lang.ClassCastException: com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
 at com.google.javascript.rhino.jstype.FunctionType.func_6c3fc4622610f2823e111fe40995a170b372910bdaa05440faa6bf70f3f060dc(Unknown Source)
 at com.google.javascript.rhino.jstype.JSType.resolve(Unknown Source)
 at com.google.javascript.jscomp.TypedScopeCreator$DeferredSetType.resolve(Unknown Source)
 at com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder.resolveTypes(Unknown Source)
 at com.google.javascript.jscomp.TypedScopeCreator.createScope(Unknown Source)
 at com.google.javascript.jscomp.MemoizedScopeCreator.createScope(Unknown Source)
 at com.google.javascript.jscomp.DefaultPassConfig$GlobalTypeResolver.process(Unknown Source)
 at com.google.javascript.jscomp.PhaseOptimizer$PassFactoryDelegate.processInternal(Unknown Source)
 at com.google.javascript.jscomp.PhaseOptimizer$NamedPass.process(Unknown Source)
 at com.google.javascript.jscomp.PhaseOptimizer.process(Unknown Source)
 at com.google.javascript.jscomp.Compiler.check(Unknown Source)
 at com.google.javascript.jscomp.Compiler.compileInternal(Unknown Source)
 at com.google.javascript.jscomp.Compiler.access$000(Unknown Source)
 at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)
 at com.google.javascript.jscomp.Compiler$1.call(Unknown Source)
 at com.google.javascript.jscomp.Compiler$2.run(Unknown Source)
 at java.lang.Thread.run(Thread.java:662)


**What version of the product are you using? On what operating system?**

I'm using Closure Compiler r506. The problem first appeared in r482."
Closure,159,Closure Compiler failed to translate all instances of a function name,"**What steps will reproduce the problem?**
1. Compile the attached jQuery Multicheck plugin using SIMPLE optimization.

**What is the expected output? What do you see instead?**
You expect that the function preload\_check\_all() gets its name translated appropriately. In fact, the Closure Compiler breaks the code by changing the function declaration but NOT changing the call to the function on line 76."
Closure,160,checkVars / undefinedVars diagnostics not working from command line,"It seems that setting neither checkVars nor undefinedVars via the jscomp\_warning command line argument does anything. The check(s) do work when ""warning\_level VERBOSE"" is set though. Other diagnostic groups, such as globalThis, do work however.

Here's what I'm seeing on the console:

---------------------

>java -jar compiler.jar --js test.js
foo={bar:function(){alert(this.baz)}};

>java -jar compiler.jar --js test.js --warning\_level VERBOSE
test.js:2: WARNING - dangerous use of the global this object

test.js:1: ERROR - variable foo is undefined
foo = {};
^

1 error(s), 1 warning(s)

>java -jar compiler.jar --js test.js --jscomp\_warning globalThis
test.js:2: WARNING - dangerous use of the global this object

0 error(s), 1 warning(s)
foo={bar:function(){alert(this.baz)}};

>java -jar compiler.jar --js test.js --jscomp\_warning checkVars
foo={bar:function(){alert(this.baz)}};

>java -jar compiler.jar --js test.js --jscomp\_warning undefinedVars
foo={bar:function(){alert(this.baz)}};

---------------------

My test.js file looks like this:

---------------------

foo = {};
foo.bar = function() { alert(this.baz); };

---------------------

Tested against r1123 which was committed 5/20/11."
Closure,161,peephole constants folding pass is trying to fold [][11] as if it were a property lookup instead of a property assignment,"**What steps will reproduce the problem?**
1.Try on line CC with Advance
2.On the following 2-line code
**3.**
**What is the expected output? What do you see instead?**
// ==ClosureCompiler==
// @output\_file\_name default.js
// @compilation\_level ADVANCED\_OPTIMIZATIONS
// ==/ClosureCompiler==


var Mdt=[];
Mdt[11] = ['22','19','19','16','21','18','16','20','17','17','21','17'];

The error:
JSC\_INDEX\_OUT\_OF\_BOUNDS\_ERROR: Array index out of bounds: NUMBER 11.0
2 [sourcename: Input\_0] : number at line 2 character 4


**What version of the product are you using? On what operating system?**
The online version on 201.07.27"
Closure,164,"{function(number, string)} should not be assignable to {function(number)}","Consider the following snippet. I don't think the ""second call"" should compile. As a side note: it would be great if none of the compiled in some pseudo-strict compile mode.

/\*\* @param {function(string,number):boolean} param \*/
function func(param) {}

/\*\* @type {function(string,number,boolean):boolean} \*/
function paramFunc1() {}

/\*\* @type {function(string):boolean} \*/
function paramFunc2() {}

// first call
func(paramFunc1);

// second call
func(paramFunc2);"
Closure,168,Wrong argument count error not reported on this aliasing (on function with @this annotation),"The following code (attached as test2-1.js) when compiled with:
java -jar build/compiler.jar --compilation\_level=ADVANCED\_OPTIMIZATIONS --jscomp\_error=accessControls --jscomp\_error=checkTypes --jscomp\_error=checkVars --jscomp\_error=uselessCode --jscomp\_off=globalThis --js ~/Desktop/test2.js 

correctly fails with:

/Users/dolapo/Desktop/test2.js:28: ERROR - Function Person.prototype.getName: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).

However, if the say function is modified such that this is aliased and the function is called within a setTimeout (test2-2.js), the error is not caught





test2-1.js:
var makeClass = function(protoMethods) {
 var clazz = function() {
 this.initialize.apply(this, arguments);
 }
 for (var i in protoMethods) {
 clazz.prototype[i] = protoMethods[i];
 }

 return clazz;
}

/\*\* @constructor \*/
var Person = function(name){};
Person = makeClass(/\*\* @lends Person.prototype \*/ {
 /\*\* @this {Person} \*/
 initialize: function(name) {
 this.name = name;
 },

 /\*\* @this {Person} \*/
 getName: function() { return this.name; },

 /\*\*
 \* @param {string} message
 \* @this {Person}
 \*/
 say: function(message) {
 window.console.log(this.getName(1) + ' says: ' + message);
 }
});


var joe = new Person('joe');
joe.say('hi');
var jane = new Person('jane');
jane.say('hello');



test2-2.js:

var makeClass = function(protoMethods) {
 var clazz = function() {
 this.initialize.apply(this, arguments);
 }
 for (var i in protoMethods) {
 clazz.prototype[i] = protoMethods[i];
 }

 return clazz;
}

/\*\* @constructor \*/
var Person = function(name){};
Person = makeClass(/\*\* @lends Person.prototype \*/ {
 /\*\* @this {Person} \*/
 initialize: function(name) {
 this.name = name;
 },

 /\*\* @this {Person} \*/
 getName: function() { return this.name; },

 /\*\*
 \* @param {string} message
 \* @this {Person}
 \*/
 say: function(message) {
 // window.console.log(this.getName(1) + ' says: ' + message);
 var self = this;
 setTimeout(function() {
 window.console.log(self.getName(1) + ' says: ' + message);
 }, 500); 
 }
});


var joe = new Person('joe');
joe.say('hi');
var jane = new Person('jane');
jane.say('hello');"
Codec,2,Base64 bug with empty input (new byte[0]),Base64.func_b7d18e8f99d59abadbed0da4960b56f8fcc8513f5b27924ef80ca763f7fbc5c1(new byte[0]) doesn't return an empty byte array back! It returns CRLF.
Codec,3,Double Metaphone bugs in alternative encoding,"The new test case ([~~CODEC-83~~](https://issues.apache.org/jira/browse/CODEC-83 ""Improve Double Metaphone test coverage"")) has highlighted a number of issues with the ""alternative"" encoding in the Double Metaphone implementation


1) Bug in the func_5f83dd59e1fcbf45b3edc19fa61b02e5fd5bdfbc22223a6f1aece27ca378f2dc method when ""G"" is followed by ""IER"" 


* The alternative encoding of ""Angier"" results in ""ANKR"" rather than ""ANJR""
* The alternative encoding of ""rogier"" results in ""RKR"" rather than ""RJR""


The problem is in the func_5f83dd59e1fcbf45b3edc19fa61b02e5fd5bdfbc22223a6f1aece27ca378f2dc() method and is caused by the wrong length (4 instead of 3) being used in the contains() method:




```
 } else if (contains(value, index + 1, 4, ""IER"")) {

```


...this should be




```
 } else if (contains(value, index + 1, 3, ""IER"")) {

```


2) Bug in the handleL method


* The alternative encoding of ""cabrillo"" results in ""KPRL "" rather than ""KPR""


The problem is that the first thing this method does is append an ""L"" to both primary & alternative encoding. When the conditionL0() method returns true then the ""L"" should not be appended for the alternative encoding




```
result.append('L');
if (charAt(value, index + 1) == 'L') {
    if (conditionL0(value, index)) {
        result.appendAlternate(' ');
    }
    index += 2;
} else {
    index++;
}
return index;

```


Suggest refeactoring this to




```
if (charAt(value, index + 1) == 'L') {
    if (conditionL0(value, index)) {
        result.appendPrimary('L');
    } else {
        result.append('L');
    }
    index += 2;
} else {
    result.append('L');
    index++;
}
return index;

```


3) Bug in the conditionL0() method for words ending in ""AS"" and ""OS""


* The alternative encoding of ""gallegos"" results in ""KLKS"" rather than ""KKS""


The problem is caused by the wrong start position being used in the contains() method, which means its not checking the last two characters of the word but checks the previous & current position instead:




```
        } else if ((contains(value, index - 1, 2, ""AS"", ""OS"") || 

```


...this should be




```
        } else if ((contains(value, value.length() - 2, 2, ""AS"", ""OS"") || 

```


I'll attach a patch for review"
Codec,4,"new func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d().encode() appends a CRLF, and chunks results into 76 character lines","The instance encode() method (e.g. new func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d().encode()) appends a CRLF. Actually it's fully chunking the output into 76 character lines. Commons-Codec-1.3 did not do this. The static func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d.encodefunc_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d() method behaves the same in both 1.3 and 1.4, so this problem only affects the instance encode() method.




```
import org.apache.commons.codec.binary.\*;

public class B64 {

  public static void main(String[] args) throws Exception {
    func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d b64 = new func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d();

    String s1 = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"";
    String s2 = ""aaaaaaaaaa"";
    String s3 = ""a"";
    
    byte[] b1 = s1.getBytes(""UTF-8"");
    byte[] b2 = s2.getBytes(""UTF-8"");
    byte[] b3 = s3.getBytes(""UTF-8"");

    byte[] result;
    result = func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d.encodefunc_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d(b1);
    System.out.println(""["" + new String(result, ""UTF-8"") + ""]"");
    result = b64.encode(b1);
    System.out.println(""["" + new String(result, ""UTF-8"") + ""]"");

    result = func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d.encodefunc_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d(b2);
    System.out.println(""["" + new String(result, ""UTF-8"") + ""]"");
    result = b64.encode(b2);
    System.out.println(""["" + new String(result, ""UTF-8"") + ""]"");

    result = func_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d.encodefunc_f03d8fe5a6319b92d1237146c5663cab4a21484be21b572f56c60895cf60930d(b3);
    System.out.println(""["" + new String(result, ""UTF-8"") + ""]"");
    result = b64.encode(b3);
    System.out.println(""["" + new String(result, ""UTF-8"") + ""]"");

  }
}

```


Here's my output:




```
$ java -cp commons-codec-1.3.jar:. B64
[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]
[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]
[YWFhYWFhYWFhYQ==]
[YWFhYWFhYWFhYQ==]
[YQ==]
[YQ==]


$ java -cp commons-codec-1.4.jar:. B64
[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==]
[YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==
]
[YWFhYWFhYWFhYQ==]
[YWFhYWFhYWFhYQ==
]
[YQ==]
[YQ==
]

```"
Codec,5,Base64InputStream causes NullPointerException on some input,"Certain (malformed?) input to Base64InputStream causes a NullPointerException in Base64.func_713a1417c769dc7584c090ac7ff485481f486a11bb803fbf9ec54289769f2854.


The exception occurs when Base64.func_713a1417c769dc7584c090ac7ff485481f486a11bb803fbf9ec54289769f2854 is entered with the following conditions:


* buffer is null
* modulus is 3 from a previous entry.
* inAvail is -1 because Base64InputStream.read reached EOF on line 150.


Under these conditions, Base64.func_713a1417c769dc7584c090ac7ff485481f486a11bb803fbf9ec54289769f2854 reaches line 581 with buffer still null and throws a NullPointerException.


Here is some input data that will trigger it:




```
H4sIAAAAAAAAAFvzloG1uIhBKiuxLFGvODW5tCizpFIvODM9LzXFPykrNbmE8//eDC2bq/+ZGJij
GdiT8/NKUvNKShiYop2iGTiLgQoTS0qLUgsZ6hgYfRh4SjJSE3PS84GmZOSWMAj5gMzVz0nMS9cP
LinKzEu3rigoLQJpXvNZ/AcbR8gDJgaGigIGBqbLayAuMUxNKdVLTyxJTc7QS07WSyzKLC7JL8lJ
1StJLErMKynNSdTLyUxOzStO1fOB0AwQwMjEwOrJwJMbn+mSWFkclpiTmeID4joml2SWpYZk5qaW
MEj45Bel62flpyTqlwAF9F2A9oBkrMEqnYtSoXyob1hy4z1dShgEIL4oLcnM0Q8N9XQBqubKjYfa
DjTV1AfoZn2Im/WTk/XhbtaHu1kf6mZ9T5g2YED8BwKgj8WAbtIDuUkP5CY9mJt22FSkZEXf/QkK
oCIGeVRFSYlA/zsBCZjq//9/PvSP1VvMxMDkxcCe6ZuZk5NZ7MPAnemcUZSfl5+Tn15ZwiCF5n2E
nDUoDhjVfhrpNABdpI5qWTJYmZ5nsD9Cg0pwSWnSyhOCaYXmAerMoDgsxnAkzG1R+XmpYPXL9Bln
1RhJPQarL+dgYNM1MLUyMKioKAYFOCvIBb8vl8qCOFxA4/jAiRIU7HqgYN8zk/n7jNxWfbAXeXJS
E4tLgOnUKbOk2IuBOzcfzqso6M1QmrzKkedPzcYO3QZu129As4xITlZI6QqYFNhz44v9EkFpCGua
LmEQdkktS83JL8gF5g4FqBGlIJ+wAI1gKJtZEvTws/j3FluPu4lcr7ra9OfHKXIZNTa4FPd8n33J
QXPFLte9AZe5uBaJvGrKVl+rbrTaXDZO6NwU7gnHOVgzzsmnGX2Y5GDqrst8wcTear0Ab1yj6PrD
F977vL/5iUMg773My5qLLK8OVAu6Tz7Xcyjy9Uym02Z/+xY7m85nYo/t4E93FXFKOf9/a3X78neS
jE5Tu066K3Mdf17m66mbpXN9y34ZZ3ErRobfn+RfzVBIWj0vc82vY7YPvM5eLHHOulV77M6CoB4h
xb/FjHWHRR+ldb6QmSP1ROGwGs+nx2quwitN7+mIpsRFhU37JPRoZe2ZjiX/70j7CS1tz51YP/3W
/xfnV2i/4rAoYeAN9nA0NTQqBxYMQcGOAG5

```


Say this is read from file with a byte[] of size 1024 using Base64InputStream.read(byte[]). In the first iteration, all 1190 bytes get read into buf, then it enters Base64.setInitialBuffer and assigns the byte[1024] to buffer and does a round of decoding. When it then enters Base64.readResults on line 162 in Base64InputStream, it sets buffer to null, modulus has the left-over value 3, and the NPE occurs the next iteration.


Base64InputStream could avoid this by returning right away on EOF (-1), but I think the real fix needs to happen in Base64 since it this same situation could be created by direct use. My guess is either more needs to happen in the body of the if on line 542 (set modulus to 0?) or the condition on line 573 is flawed and needs adjusting."
Codec,6,Base64InputStream#func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long,"Using new InputStreamReader(new Base64InputStream(in, true)) sometimes fails with ""java.io.IOException: Underlying input stream returned zero bytes"".


This is been tracked down that Base64InputStream#func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925(byte[]) incorrectly returns 0 at end of any stream which is multiple of 3 bytes long."
Codec,7,Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e() shouldn't chunk,"Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e() shouldn't chunk.


Change this:




```
public static String func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(byte[] binaryData) {
    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
}

```


To this:




```
public static String func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(byte[] binaryData) {
    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));
}

```


This will fix the following tests ggregory added a few minutes ago:


 //assertEquals(""Zg=="", Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(StringUtils.getBytesUtf8(""f"")));  

 //assertEquals(""Zm8="", Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(StringUtils.getBytesUtf8(""fo"")));  

 //assertEquals(""Zm9v"", Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(StringUtils.getBytesUtf8(""foo"")));  

 //assertEquals(""Zm9vYg=="", Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(StringUtils.getBytesUtf8(""foob"")));  

 //assertEquals(""Zm9vYmE="", Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(StringUtils.getBytesUtf8(""fooba"")));  

 //assertEquals(""Zm9vYmFy"", Base64.func_c1534693906e2e3baecdba0ffc19d9b200dafcdd36cc3c0e3ef1975de1f41d0e(StringUtils.getBytesUtf8(""foobar"")));"
Codec,9,"Base64.func_5942c1e341cbca9d32122ecb23644b82f0309709a012b6939d7b438f253ad6a7(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize if isChunked is false","If isChunked is false, Base64.func_5942c1e341cbca9d32122ecb23644b82f0309709a012b6939d7b438f253ad6a7(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) throws IAE for valid maxResultSize.


Test case and fix will be applied shortly."
Codec,10,"Caverphone encodes names starting and ending with ""mb"" incorrectly.","Caverphone encode names starting and ending with ""mb"" incorrectly.


According to the spec:  

""If the name ends with mb make it m2"".


This has been coded as:  

""If the name *starts* with mb make it m2""."
Codec,15,Bug in HW rule in Soundex,"The Soundex algorithm says that if two characters that map to the same code are separated by H or W, the second one is not encoded.  

However, in the implementation (in Soundex.func_a21400103d7b45cb0d081e3dae21a5a61d953387f6eba079fd143c56bf7d3d6a() line 191), a character that is preceded by two characters that are either H or W, is not encoded, regardless of what the last consonant was.  

Source: <http://en.wikipedia.org/wiki/Soundex#American_Soundex>"
Codec,17,"StringUtils.newStringxxx(null) should return null, not NPE","Method calls such as StringUtils.newStringIso8859\_1(null) should return null, not NPE.


It looks like this capability was lost with the fix for [~~CODEC-136~~](https://issues.apache.org/jira/browse/CODEC-136 ""Use Charset objects when possible, create Charsets class for required character encodings""), i.e.  

<http://svn.apache.org/viewvc?rev=1306366&view=rev>


Several methods were changed from




```
return StringUtils.newString(bytes, CharEncoding.xxx);
to
return new String(bytes, Charsets.xxx);

```


The new code should have been:




```
return newString(bytes, Charsets.xxx);

```


The newString method handles null input.


There were no tests for null input so the change in behaviour was missed."
Codec,18,"StringUtils.func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(CharSequence cs1, CharSequence cs2) can fail with String Index OBE","StringUtils.func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(CharSequence cs1, CharSequence cs2) fails with String Index OBE if the two sequences are different lengths."
Collections,25,IteratorUtils.func_b09ced9d92049f8ad0998066ad79be83251eccd3b27bd8657d9879f5fcea8fe8 do not use natural ordering if no comparator was provided,"In case a null comparator was provided natural ordering should be used, as stated in the javadoc.


In fact an exception is thrown the first time the returned iterator is used."
Compress,1,CPIO reports unexpected EOF,"When unpacking an CPIO archive (made with the compress classes or even made with OSX cpio comandline tool) an EOF exception is thrown.  

Here is the testcode:


 final File input = getFile(""cmdcreated.cpio"");


 final InputStream in = new FileInputStream(input);  

 CpioArchiveInputStream cin = new CpioArchiveInputStream(in);


 CpioArchiveEntry entry = null;


 while ((entry = (CpioArchiveEntry) cin.getNextCPIOEntry()) != null) 


{
 File target = new File(dir, entry.getName());
 final OutputStream out = new FileOutputStream(target);
 IOUtils.copy(in, out);
 out.func_310ff200149b44a32f124023d7caba19a1a890763a980606813d3a3d4a085d36();
 }

 cin.func_310ff200149b44a32f124023d7caba19a1a890763a980606813d3a3d4a085d36();


Stacktrace is here:


java.io.EOFException  

 at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(CpioArchiveInputStream.java:293)  

 at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(CpioArchiveInputStream.java:168)  

 at org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnpack(CpioArchiveInputStreamTest.java:26)  

 ...


This happens with the first read access to the archive. It occured while my try to improve the testcases."
Compress,5,ZipArchiveInputStream doesn't report the end of a truncated archive,"If a Zip archive is truncated, (e.g. because it is the first volume in a multi-volume archive) the ZipArchiveInputStream.func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925() method will not detect that fact. All calls to func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925() will return 0 bytes func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925. They will not return -1 (end of stream), nor will they throw any exception (which would seem like a good idea to me because the archive is truncated).


I have tracked this problem to ZipArchiveInputStream.java, line 239. It contains a check


if (func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925 == 0 && inf.finished()) {  

 return -1;  

}


For truncated archives the func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925 is always zero but the inf is never finished(). I suggest adding two lines below:


if (func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925 == 0 && inf.finished()) {  

 return -1;  

} else if (func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925 == 0 && lengthOfLastRead == -1) {  

 throw new IOException(""Truncated ZIP file"");  

}


This solves the problem in my tests."
Compress,7,TarUtils.func_9f3748d4315bfa4a769e366269827409e75b95158a44d061484e95196b12f3e0 does not properly handle characters outside the range 0-127,"if a tarfile contains files with special characters, the names of the tar entries are wrong.


example:  

correct name: 0302-0601-3±±±F06±W220±ZB±LALALA±±±±±±±±±±CAN±±DC±±±04±060302±MOE.model  

name resolved by TarUtils.func_9f3748d4315bfa4a769e366269827409e75b95158a44d061484e95196b12f3e0: 0302-0101-3ﾱﾱﾱF06ﾱW220ﾱZBﾱHECKMODULﾱﾱﾱﾱﾱﾱﾱﾱﾱﾱECEﾱﾱDCﾱﾱﾱ07ﾱ060302ﾱDOERN.model


please use:   

result.append(new String(new byte[] 


{ buffer[i] }
));


instead of:   

result.append((char) buffer[i]);


to solve this encoding problem."
Compress,8,TarArchiveEntry.parseTarHeader() includes the trailing space/NUL when parsing the octal size,"TarArchiveEntry.parseTarHeader() includes the trailing space/NUL when parsing the octal size.


Although the size field in the header is 12 bytes, the last byte is supposed to be space or NUL - i.e. only 11 octal digits are allowed for the size."
Compress,10,Cannot Read Winzip Archives With Unicode Extra Fields,"I have a zip file created with WinZip containing Unicode extra fields. Upon attempting to extract it with org.apache.commons.compress.archivers.zip.ZipFile, ZipFile.getInputStream() returns null for ZipArchiveEntries previously retrieved with ZipFile.getEntry() or even ZipFile.getEntries(). See UTF8ZipFilesTest.patch in the attachments for a test case exposing the bug. The original test case stopped short of trying to read the entries, that's why this wasn't flagged up before. 


The problem lies in the fact that inside ZipFile.java entries are stored in a HashMap. However, at one point after populating the HashMap, the unicode extra fields are read, which leads to a change of the ZipArchiveEntry name, and therefore a change of its hash code. Because of this, subsequent gets on the HashMap fail to retrieve the original values.


ZipFile.patch contains an (admittedly simple-minded) fix for this problem by reconstructing the entries HashMap after the Unicode extra fields have been parsed. The purpose of this patch is mainly to show that the problem is indeed what I think, rather than providing a well-designed solution.


The patches have been tested against revision 1210416."
Compress,11,func_dfdd48618c70cd0e329447b2e19ba0aa7b2c4d591cfafb7604673beb94cae239 detects text files less than 100 bytes as tar archives,"The fix for [~~COMPRESS-117~~](https://issues.apache.org/jira/browse/COMPRESS-117 ""Certain tar files not recognised by ArchiveStreamFactory"") which modified ArchiveStreamFactory().func_dfdd48618c70cd0e329447b2e19ba0aa7b2c4d591cfafb7604673beb94cae239(inputstream) results in short text files (empirically seems to be those <= 100 bytes) being detected as tar archives which obviously is not desirable if one wants to know whether or not the files are archives.  

I'm not an expert on compressed archives but perhaps the heuristic that if a stream is interpretable as a tar file without an exception being thrown should only be applied on archives greater than 100 bytes?"
Compress,12,TarArchiveInputStream throws IllegalArgumentException instead of IOException,"TarArchiveInputStream is throwing IllegalArgumentException instead of IOException on corrupt files, in direct contradiction to the Javadoc. Here is a stack-trace:




```
java.lang.IllegalArgumentException: Invalid byte -1 at offset 7 in '<some bytes>' len=8
	at org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(TarUtils.java:86)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:790)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:308)
	at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.func_3a207301ed16ea168edf21b7e31d1bf90f9aaf509964ccc08087093a99cb2fbf(TarArchiveInputStream.java:198)
	at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(TarArchiveInputStream.java:380)
	at de.schlichtherle.truezip.fs.archive.tar.TarInputShop.<init>(TarInputShop.java:91)
	at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newTarInputShop(TarDriver.java:159)
	at de.schlichtherle.truezip.fs.archive.tar.TarGZipDriver.newTarInputShop(TarGZipDriver.java:82)
	at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop(TarDriver.java:151)
	at de.schlichtherle.truezip.fs.archive.tar.TarDriver.newInputShop(TarDriver.java:47)
	at de.schlichtherle.truezip.fs.archive.FsDefaultArchiveController.mount(FsDefaultArchiveController.java:170)
	at de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController$ResetFileSystem.autoMount(FsFileSystemArchiveController.java:98)
	at de.schlichtherle.truezip.fs.archive.FsFileSystemArchiveController.autoMount(FsFileSystemArchiveController.java:47)
	at de.schlichtherle.truezip.fs.archive.FsArchiveController.autoMount(FsArchiveController.java:129)
	at de.schlichtherle.truezip.fs.archive.FsArchiveController.getEntry(FsArchiveController.java:160)
	at de.schlichtherle.truezip.fs.archive.FsContextController.getEntry(FsContextController.java:117)
	at de.schlichtherle.truezip.fs.FsDecoratingController.getEntry(FsDecoratingController.java:76)
	at de.schlichtherle.truezip.fs.FsDecoratingController.getEntry(FsDecoratingController.java:76)
	at de.schlichtherle.truezip.fs.FsConcurrentController.getEntry(FsConcurrentController.java:164)
	at de.schlichtherle.truezip.fs.FsSyncController.getEntry(FsSyncController.java:108)
	at de.schlichtherle.truezip.fs.FsFederatingController.getEntry(FsFederatingController.java:156)
	at de.schlichtherle.truezip.nio.file.TFileSystem.newDirectoryStream(TFileSystem.java:348)
	at de.schlichtherle.truezip.nio.file.TPath.newDirectoryStream(TPath.java:963)
	at de.schlichtherle.truezip.nio.file.TFileSystemProvider.newDirectoryStream(TFileSystemProvider.java:344)
	at java.nio.file.Files.newDirectoryStream(Files.java:400)
	at com.googlecode.boostmavenproject.GetSourcesMojo.convertToJar(GetSourcesMojo.java:248)
	at com.googlecode.boostmavenproject.GetSourcesMojo.download(GetSourcesMojo.java:221)
	at com.googlecode.boostmavenproject.GetSourcesMojo.execute(GetSourcesMojo.java:111)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	... 20 more

```


Expected behavior: TarArchiveInputStream should wrap the IllegalArgumentException in an IOException."
Compress,13,ArchiveInputStream#getNextEntry(): Problems with WinZip directories with Umlauts,"There is a problem when handling a WinZip-created zip with Umlauts in directories.


I'm accessing a zip file created with WinZip containing a directory with an umlaut (""ä"") with ArchiveInputStream. When creating the zip file the unicode-flag of winzip had been active.


The following problem occurs when accessing the entries of the zip:  

the ArchiveEntry for a directory containing an umlaut is not marked as a directory and the file names for the directory and all files contained in that directory contain backslashes instead of slashes (i.e. completely different to all other files in directories with no umlaut in their path).


There is no difference when letting the ArchiveStreamFactory decide which ArchiveInputStream to create or when using the ZipArchiveInputStream constructor with the correct encoding (I've tried different encodings CP437, CP850, ISO-8859-15, but still the problem persisted).


This problem does not occur when using the very same zip file but compressed by 7zip or the built-in Windows 7 zip functionality."
Compress,14,"Tar files created by AIX native tar, and which contain symlinks, cannot be read by TarArchiveInputStream","A simple tar file created on AIX using the native (/usr/bin/tar tar utility) **and** which contains a symbolic link, cannot be loaded by TarArchiveInputStream:




```
java.io.IOException: Error detected parsing the header
	at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:201)
	at Extractor.extract(Extractor.java:13)
	at Extractor.main(Extractor.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:217)
	at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:152)
	at org.apache.tools.ant.taskdefs.Java.run(Java.java:771)
	at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:221)
	at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:135)
	at org.apache.tools.ant.taskdefs.Java.execute(Java.java:108)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:390)
	at org.apache.tools.ant.Target.performTasks(Target.java:411)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1368)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1251)
	at org.apache.tools.ant.Main.runBuild(Main.java:809)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)
Caused by: java.lang.IllegalArgumentException: Invalid byte 0 at offset 0 in '{NUL}1722000726 ' len=12
	at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313(TarUtils.java:99)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:819)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:314)
	at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:199)
	... 29 more

```


Tested with 1.2 and the 1.4 nightly build from Feb 23 (Implementation-Build: trunk@r1292625; 2012-02-23 03:20:30+0000)"
Compress,15,ZipArchiveInputStream and ZipFile don't produce func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7 ZipArchiveEntry instances,"I'm trying to use a ZipArchiveEntry coming from ZipArchiveInputStream that I stored somwhere for later with a ZipFile and it does not work.


The reason is that it can't find the ZipArchiveEntry in the ZipFile entries map. It is exactly the same zip file but both entries are not func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7 so the Map#get fail.


As far as I can see the main difference is that comment is null in ZipArchiveInputStream while it's en empty string in ZipFile. I looked at ZipArchiveInputStream and it looks like the comment (whatever it is) is simply not parsed while I can find some code related to the comment at the end of ZIipFile#readCentralDirectoryEntry.


Note that java.util.zip does not have this issue. Did not checked what they do but the zip entries are func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7."
Compress,16,Too relaxed tar detection in ArchiveStreamFactory,"The relaxed tar detection logic added in [~~COMPRESS-117~~](https://issues.apache.org/jira/browse/COMPRESS-117 ""Certain tar files not recognised by ArchiveStreamFactory"") unfortunately matches also some non-tar files like a [test AIFF file](https://svn.apache.org/repos/asf/tika/trunk/tika-parsers/src/test/resources/test-documents/testAIFF.aif) that Apache Tika uses. It would be good to improve the detection heuristics to still match files like the one in [~~COMPRESS-117~~](https://issues.apache.org/jira/browse/COMPRESS-117 ""Certain tar files not recognised by ArchiveStreamFactory"") but avoid false positives like the AIFF file in Tika."
Compress,17,Tar file for Android backup cannot be read,"Attached tar file was generated by some kind of backup tool on Android. Normal tar utilities seem to handle it fine, but Commons Compress doesn't.




```
java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '01750{NUL}{NUL}{NUL}' len=8
    at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313(TarUtils.java:99)
    at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:788)
    at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:308)

```"
Compress,18,Long directory names can not be stored in a tar archive because of error when writing PAX headers,"Trying to add a directory to the TAR Archive that has a name longer than 100 bytes generates an exception with a stack trace similar to the following:




```
java.io.IOException: request to write '114' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/layers/openstreetmap\_\_osm.disy.net/.tiles/1.0.0/openstreetmap\_\_osm.disy.net/default/'

            at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(TarArchiveOutputStream.java:385)

            at java.io.OutputStream.write(Unknown Source)

            at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.func_6967a789e15c743ea8bf98692da30891002a4d297f2a5bb4ca26ea7144d0e8c3(TarArchiveOutputStream.java:485)

            at org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveOutputStream.java:312)

            at net.disy.lib.io.tar.TarUtilities.addFile(TarUtilities.java:116)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:158)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.addDirectory(TarUtilities.java:162)

            at net.disy.lib.io.tar.TarUtilities.tar(TarUtilities.java:77)

            at net.disy.lib.io.tar.TarUtilities.tar(TarUtilities.java:42)

            at net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.tarTreeStructure(TileCacheSetExporter.java:262)

            at net.disy.gisterm.tilecacheset.export.TileCacheSetExporter.export(TileCacheSetExporter.java:111)

            at net.disy.gisterm.tilecacheset.desktop.controller.ExportController$1.run(ExportController.java:81)

            ... 2 more

```


Informal source code investigation points to the problem being that for directory entries the code assumes that the length is 0 in putArchiveEntry (see TarArchiveOutputStream:321 ) but when writing the data, it actually writes some data (the filename) and the length written (filename size) is larger than the length expected (0)."
Compress,19,ZipException on reading valid zip64 file,"ZipFile zip = new ZipFile(new File(""ordertest-64.zip"")); throws ZipException ""central directory zip64 extended information extra field's length doesn't match central directory data. Expected length 16 but is 28"".


The archive was created by using DotNetZip-WinFormsTool uzing zip64 flag (forces always to make zip64 archives).


Zip file is tested from the console: $zip -T ordertest-64.zip


Output:  

test of ordertest-64.zip OK


I can open the archive with FileRoller without problem on my machine, browse and extract it."
Compress,21,Writing 7z empty entries produces incorrect or corrupt archive,"I couldn't find an exact rule that causes this incorrect behavior, but I tried to reduce it to some simple scenarios to reproduce it:


Input: A folder with certain files -> tried to archive it.  

If the folder contains more than 7 files the incorrect behavior appears.


Scenario 1: 7 empty files  

Result: The created archive contains a single folder entry with the name of the archive (no matter which was the name of the file)


Scenario 2: 7 files, some empty, some with content  

Result: The created archive contains a folder entry with the name of the archive and a number of file entries also with the name of the archive. The number of the entries is equal to the number of non empty files.


Scenario 3: 8 empty files  

Result: 7zip Manager cannot open archive and stops working.


Scenario 4.1: 8 files: some empty, some with content, last file (alphabetically) with content  

Result: same behavior as described for Scenario 2.


Scenario 4.2: 8 files, some empty, some with content, last file empy  

Result: archive is corrupt, the following message is received: ""Cannot open file 'archivename.7z' as archive"" (7Zip Manager does not crash)."
Compress,23,7z: 16 MB dictionary is too big,"I created an archiv with 7zip 9.20 containing the compress-1.7-src directory. Also tried it with 1.6 version and directory. I 


downloaded the zip file and reziped it as 7z. The standard setting where used:  

Compression level: normal  

Compression method: lzma2  

Dictionary size: 16 MB  

Word size: 32  

Solid Block size: 2 GB


I get an exception if I try to open the file with the simple line of code:  

SevenZFile input = new SevenZFile(new File(arcName));


Maybe it is a bug in the tukaani library, but I do not know how to report it to them.  

The exception thrown:


org.tukaani.xz.UnsupportedOptionsException: LZMA dictionary is too big for this implementation  

 at org.tukaani.xz.LZMAInputStream.initialize(Unknown Source)  

 at org.tukaani.xz.LZMAInputStream.<init>(Unknown Source)  

 at org.apache.commons.compress.archivers.sevenz.Coders$LZMADecoder.func_713a1417c769dc7584c090ac7ff485481f486a11bb803fbf9ec54289769f2854(Coders.java:117)  

 at org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(Coders.java:48)  

 at org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(SevenZFile.java:278)  

 at org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(SevenZFile.java:190)  

 at org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:94)  

 at org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SevenZFile.java:116)  

 at compress.SevenZipError.main(SevenZipError.java:28)"
Compress,24,TarArchiveInputStream fails to read entry with big user-id value,"Caused by: java.lang.IllegalArgumentException: Invalid byte 52 at offset 7 in '62410554' len=8  

 at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313(TarUtils.java:130)  

 at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313OrBinary(TarUtils.java:175)  

 at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:953)  

 at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)  

 at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)  

 at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:247)  

 ... 5 more"
Compress,25,"ZIP reads correctly with commons-compress 1.6, gives NUL bytes in 1.7","When running the code below, commons-compress 1.6 writes:


 Content of test.txt:  

 data


By comparison, commons-compress 1.7 writes


 Content of test.txt:  

@@@@^@


package com.example.jrn;  

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;  

import org.apache.commons.compress.archivers.zip.func_62bf6f173d44358ca74912e062e3e1184b702b006537f9d138d2baf21d259209;  

import java.io.ByteArrayInputStream;  

import java.io.IOException;  

import java.lang.System;  

/\*\*


* Hello world!  

 \*  

 \*/  

public class App {  

 public static void main(String[] args) {  

 byte[] zip = 
{
 (byte)0x50, (byte)0x4b, (byte)0x03, (byte)0x04, (byte)0x0a, (byte)0x00,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x7b,
 (byte)0xd1, (byte)0x42, (byte)0x82, (byte)0xc5, (byte)0xc1, (byte)0xe6,
 (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05, (byte)0x00,
 (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x1c, (byte)0x00,
 (byte)0x74, (byte)0x65, (byte)0x73, (byte)0x74, (byte)0x2e, (byte)0x74,
 (byte)0x78, (byte)0x74, (byte)0x55, (byte)0x54, (byte)0x09, (byte)0x00,
 (byte)0x03, (byte)0x56, (byte)0x62, (byte)0xbf, (byte)0x51, (byte)0x2a,
 (byte)0x63, (byte)0xbf, (byte)0x51, (byte)0x75, (byte)0x78, (byte)0x0b,
 (byte)0x00, (byte)0x01, (byte)0x04, (byte)0x01, (byte)0xff, (byte)0x01,
 (byte)0x00, (byte)0x04, (byte)0x88, (byte)0x13, (byte)0x00, (byte)0x00,
 (byte)0x64, (byte)0x61, (byte)0x74, (byte)0x61, (byte)0x0a, (byte)0x50,
 (byte)0x4b, (byte)0x01, (byte)0x02, (byte)0x1e, (byte)0x03, (byte)0x0a,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03,
 (byte)0x7b, (byte)0xd1, (byte)0x42, (byte)0x82, (byte)0xc5, (byte)0xc1,
 (byte)0xe6, (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x18,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xa0, (byte)0x81, (byte)0x00,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x74, (byte)0x65, (byte)0x73,
 (byte)0x74, (byte)0x2e, (byte)0x74, (byte)0x78, (byte)0x74, (byte)0x55,
 (byte)0x54, (byte)0x05, (byte)0x00, (byte)0x03, (byte)0x56, (byte)0x62,
 (byte)0xbf, (byte)0x51, (byte)0x75, (byte)0x78, (byte)0x0b, (byte)0x00,
 (byte)0x01, (byte)0x04, (byte)0x01, (byte)0xff, (byte)0x01, (byte)0x00,
 (byte)0x04, (byte)0x88, (byte)0x13, (byte)0x00, (byte)0x00, (byte)0x50,
 (byte)0x4b, (byte)0x05, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x00,
 (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x4e,
 (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x47, (byte)0x00, (byte)0x00,
 (byte)0x00, (byte)0x00, (byte)00
 }
;


 ByteArrayInputStream bin = new ByteArrayInputStream(zip);  

 try {  

 func_62bf6f173d44358ca74912e062e3e1184b702b006537f9d138d2baf21d259209 in = new func_62bf6f173d44358ca74912e062e3e1184b702b006537f9d138d2baf21d259209(bin);  

 try {  

 while (true) {  

 ZipArchiveEntry entry = in.getNextZipEntry();  

 if (entry == null) 


{
 break;
 }
 byte[] buf = new byte[(int) entry.getSize()];  

 in.read(buf);  

 System.out.println(""Content of "" + entry.getName() + "":"");  

 System.out.write(buf);  

 }  

 } finally 


{
 in.close();
 }
 } catch (IOException e) 


{
 System.err.println(""IOException: "" + e);
 }
 }  

}"
Compress,26,IOUtils.func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1 does not work as advertised,"I am trying to feed a TarInputStream from a CipherInputStream.  

It does not work, because IOUtils.func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1() does not adhere to the contract it claims in javadoc:


"" \* <p>This method will only func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1 less than the requested number of


* bytes if the end of the input stream has been reached.</p>""


However it does:


 long func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1ped = input.func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1(numToSkip);  

 if (func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1ped == 0) 


{
 break;
 }

And the input stream javadoc says:


"" \* This may result from any of a number of conditions; reaching end of file


* before <code>n</code> bytes have been func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1ped is only one possibility.""


In the case of CipherInputStream, it stops at the end of each byte buffer.


If you check the IOUtils from colleagues at commons-io, they have considered this case in IOUtils.func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1() where they use a read to func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1 through the stream.  

An optimized version could combine trying to func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1, then read then trying to func_42e93b9bb77d8a73e8412111b8f3d6befab66bf48fdcdefa80bb111819aa0cb1 again."
Compress,27,Incorrect handling of NUL username and group Tar.gz entries,"With version 1.8 of commons-compress it's no longer possible to decompress files from an archive if the archive contains entries having null (or being empty?) set as username and/or usergroup. With version 1.7 this still worked now I get this exception:




```
java.io.IOException: Error detected parsing the header
	at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:249)
	at TestBed.AppTest.extractNoFileOwner(AppTest.java:30)
Caused by: java.lang.IllegalArgumentException: Invalid byte 32 at offset 7 in ' {NUL}' len=8
	at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313(TarUtils.java:134)
	at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313OrBinary(TarUtils.java:173)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:953)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)
	at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)
	at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:247)
	... 27 more


```


This exception leads to my suspision that the regression was introduced with the fix for this ticket [~~COMPRESS-262~~](https://issues.apache.org/jira/browse/COMPRESS-262 ""TarArchiveInputStream fails to read entry with big user-id value""), which has a nearly identical exception provided.


Some test code you can run to verify it:




```
package TestBed;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.junit.Test;

/\*\*
 \* Unit test for simple App.
 \*/
public class AppTest
{

    @Test
    public void extractNoFileOwner()
    {
        TarArchiveInputStream tarInputStream = null;

        try
        {
            tarInputStream =
                new TarArchiveInputStream( new GzipCompressorInputStream( new FileInputStream( new File(
                    ""/home/pknobel/redis-dist-2.8.3\_1-linux.tar.gz"" ) ) ) );
            TarArchiveEntry entry;
            while ( ( entry = tarInputStream.getNextTarEntry() ) != null )
            {
                System.out.println( entry.getName() );
                System.out.println(entry.getUserName()+""/""+entry.getGroupName());
            }

        }
        catch ( FileNotFoundException e )
        {
            e.printStackTrace();
        }
        catch ( IOException e )
        {
            e.printStackTrace();
        }
    }

}

```


With 1.7 the TestCase outputed this:




```
redis-dist-2.8.3\_1/bin/
/
redis-dist-2.8.3\_1/bin/redis-server
jenkins/jenkins
redis-dist-2.8.3\_1/bin/redis-cli
jenkins/jenkins

```


With 1.8 it's failing once it reaches the null valued entry, which is the first. The archive is created using maven assembly plugin, and I tried the same with maven ant task. Both generating an archive with not set username and groups for at least some entries.


You can download the archive from <http://heli0s.darktech.org/redis/2.8.3_1/redis-dist-2.8.3_1-linux.tar.gz>


If you run a tar -tvzf on the file you see this report:




```
drwxr-xr-x 0/0               0 2014-04-18 09:43 redis-dist-2.8.3\_1-SNAPSHOT/bin/
-rwxr-xr-x pknobel/pknobel 3824588 2014-01-02 14:58 redis-dist-2.8.3\_1-SNAPSHOT/bin/redis-cli
-rwxr-xr-x pknobel/pknobel 5217234 2014-01-02 14:58 redis-dist-2.8.3\_1-SNAPSHOT/bin/redis-server

```


The user 0/0 probably indicates that it's not set although it's the root user id. A correctly root user file would show up as root/root"
Compress,28,TarArchiveInputStream silently finished when unexpected EOF occured,"I just found the following test case didn't raise an IOException as it used to be for a **tar trimmed on purpose** 


@Test  

 public void testCorruptedBzip2() throws IOException {  

 String archivePath = PathUtil.join(testdataDir, ""test.tar.bz2"");  

 TarArchiveInputStream input = null;  

 input = new TarArchiveInputStream(new BZip2CompressorInputStream(  

 GoogleFile.SYSTEM.newInputStream(archivePath), true));  

 ArchiveEntry nextMatchedEntry = input.getNextEntry();  

 while (nextMatchedEntry != null) 


{
 logger.infofmt(""Extracting %s"", nextMatchedEntry.getName());
 String outputPath = PathUtil.join(""/tmp/"", nextMatchedEntry.getName());
 OutputStream out = new FileOutputStream(outputPath);
 ByteStreams.copy(input, out);
 out.close();
 nextMatchedEntry = input.getNextEntry();
 }
 }"
Compress,30,BZip2CompressorInputStream return value wrong when told to func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925 to a full buffer.,"BZip2CompressorInputStream.func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925(buffer, offset, length) returns -1 when given an offset equal to the length of the buffer.


This indicates, not that the buffer was full, but that the stream was finished.


It seems like a pretty stupid thing to do - but I'm getting this when trying to use Kryo serialization (which is probably a bug on their part, too), so it does occur and has negative affects.


Here's a JUnit test that shows the problem specifically:




```
	@Test
	public void testApacheCommonsBZipUncompression () throws Exception {
		// Create a big random piece of data
		byte[] rawData = new byte[1048576];
		for (int i=0; i<rawData.length; ++i) {
			rawData[i] = (byte) Math.floor(Math.random()\*256);
		}

		// Compress it
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);
		bzipOut.write(rawData);
		bzipOut.flush();
		bzipOut.close();
		baos.flush();
		baos.close();

		// Try to func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925 it back in
		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
		BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);
		byte[] buffer = new byte[1024];
		// Works fine
		Assert.assertEquals(1024, bzipIn.func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925(buffer, 0, 1024));
		// Fails, returns -1 (indicating the stream is complete rather than that the buffer 
		// was full)
		Assert.assertEquals(0, bzipIn.func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925(buffer, 1024, 0));
		// But if you change the above expected value to -1, the following line still works
		Assert.assertEquals(1024, bzipIn.func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925(buffer, 0, 1024));
		bzipIn.close();
	}

```"
Compress,31,Illegal argument exception when extracting .tgz file,"When attempting to unpack a .tgz file, I am receiving the illegal argument exception: java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '05412


{NUL}11' len=8. This is causing a java.io.IOException: Error detected parsing the header error.   

  

This is being thrown when the function TarArchiveInputStream.getNextTarEntry() is called.   

  

Here is the code I am using.   



```
            TarArchiveInputStream tarIn = new TarArchiveInputStream(
                    new GZIPInputStream(
                            new BufferedInputStream(
                                    new FileInputStream(
                                            tempDirPath + fileName))));

            TarArchiveEntry entry = tarIn.getNextTarEntry();

            while (entry != null) {
                File path = new File(tempDirPath, entry.getName());
                if (entry.isDirectory()) {
                    path.mkdirs();
                } else {          
                    path.createNewFile();
                    byte[] read = new byte[2048];
                    BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(path));
                    int len;
                    while ((len = tarIn.read(read)) != -1) {
                        bout.write(read, 0, len);
                        System.out.print(new String(read, ""UTF-8""));
                    }
                    bout.close();
                    read = null;
                }
                entry = tarIn.getNextTarEntry();
            }
            tarIn.close();

```

  

  

Here is the full stack trace:   

  

[2015-02-12T23:17:31.944+0000] [glassfish 4.0] [SEVERE] [] [] [tid: \_ThreadID=123 \_ThreadName=Thread-4] [timeMillis: 1423783051944] [levelValue: 1000] [[  

 java.io.IOException: Error detected parsing the header  

 at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:257)  

 at org.unavco.ws.tilt.ExtractTiltFile.extractFile(ExtractTiltFile.java:125)  

 at org.unavco.ws.tilt.ExtractTiltFile.run(ExtractTiltFile.java:59)  

 at org.unavco.ws.cache.ProcessDataFile.getFileData(ProcessDataFile.java:100)  

 at org.unavco.ws.cache.ProcessDataFile.getResultSet(ProcessDataFile.java:81)  

 at org.unavco.ws.tilt.TiltDsClient.write(TiltDsClient.java:47)  

 at org.glassfish.jersey.message.internal.StreamingOutputProvider.writeTo(StreamingOutputProvider.java:76)  

 at org.glassfish.jersey.message.internal.StreamingOutputProvider.writeTo(StreamingOutputProvider.java:58)  

 at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:194)  

 at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:139)  

 at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:103)  

 at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:139)  

 at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:88)  

 at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:139)  

 at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1005)  

 at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:471)  

 at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:333)  

 at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:323)  

 at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:227)  

 at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)  

 at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)  

 at org.glassfish.jersey.internal.Errors.process(Errors.java:315)  

 at org.glassfish.jersey.internal.Errors.process(Errors.java:297)  

 at org.glassfish.jersey.internal.Errors.process(Errors.java:267)  

 at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)  

 at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:198)  

 at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:946)  

 at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:323)  

 at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:372)  

 at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:335)  

 at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:218)  

 at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)  

 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:344)  

 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214)  

 at com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source)  

 at com.thetransactioncompany.cors.CORSFilter.doFilter(Unknown Source)  

 at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:256)  

 at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:214)  

 at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:316)  

 at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)  

 at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)  

 at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)  

 at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)  

 at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)  

 at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:357)  

 at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:260)  

 at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:188)  

 at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191)  

 at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168)  

 at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189)  

 at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)  

 at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288)  

 at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206)  

 at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136)  

 at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114)  

 at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)  

 at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838)  

 at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113)  

 at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115)  

 at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55)  

 at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135)  

 at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564)  

 at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544)  

 at java.lang.Thread.run(Thread.java:745)  

Caused by: java.lang.IllegalArgumentException: Invalid byte 0 at offset 5 in '05412{NUL}
11' len=8  

 at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313(TarUtils.java:138)  

 at org.apache.commons.compress.archivers.tar.TarUtils.func_75a5fbc0c3245dd1208305c140cf640caa0e2aa455eba69ddf0cb2559c1ea313OrBinary(TarUtils.java:169)  

 at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:951)  

 at org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(TarArchiveEntry.java:940)  

 at org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(TarArchiveEntry.java:324)  

 at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:255)  

 ... 63 more]]"
Compress,32,TarArchiveInputStream rejects uid or gid >= 0x80000000,"A POSIX-format archive that came from sysdiagnose produces NumberFormatException[1] when I try to read it with TarArchiveInputStream.


The relevant part of the .tar file looks like this:


 18 uid=429496729


That's the uid of 'nobody' on Mac OS (on Mac OS, uid\_t is 'unsigned int').


POSIX doesn't say anything about the width of the uid extended header[2], so I assume the tar file is okay. GNU tar doesn't have trouble with it.


The relevant code, in func_3a404b9c71acae1a566c2a39b3d5eaf35bdf72163ae73dbb85353956290213b5:


 } else if (""gid"".equals(key))


{
 currEntry.setGroupId(Integer.parseInt(val));
...
 }
 else if (""uid"".equals(key)){  

 currEntry.setUserId(Integer.parseInt(val));


uid\_t and gid\_t are typically unsigned 32-bit integers, so these should presumably use Long.parseLong to handle integers with the top bit set (and TarArchiveEntry would need some modifications to handle large uid and gid, too).


[1] java.lang.NumberFormatException: For input string: ""4294967294""  

 at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)  

 at java.lang.Integer.parseInt(Integer.java:495)  

 at java.lang.Integer.parseInt(Integer.java:527)  

 at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.func_3a404b9c71acae1a566c2a39b3d5eaf35bdf72163ae73dbb85353956290213b5(TarArchiveInputStream.java:488)  

 at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(TarArchiveInputStream.java:415)  

 at org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(TarArchiveInputStream.java:295)


[2] <http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_03>  

uid  

The user ID of the file owner, expressed as a decimal number using digits from the ISO/IEC 646:1991 standard. This record shall override the uid field in the following header block(s). When used in write or copy mode, pax shall include a uid extended header record for each file whose owner ID is greater than 2097151 (octal 7777777)."
Compress,35,TAR checksum fails when checksum is right aligned,"The linked TAR has a checksum with zero padding on the left instead of the expected NULL-SPACE terminator on the right. As a result the last two digits of the stored checksum are lost and the otherwise valid checksum is treated as invalid.


Given that the code already checks for digits being in range before adding them to the stored sum, is it necessary to only look at the first 6 octal digits instead of the whole field?"
Compress,36,Calling SevenZFile.read() on empty SevenZArchiveEntry throws IllegalStateException,"I'm pretty sure [~~COMPRESS-340~~](https://issues.apache.org/jira/browse/COMPRESS-340 ""Provide an efficient way to skip over 7zip entries without decompressing them"") breaks reading empty archive entries. When calling getNextEntry() and that entry has no content, the code jumps into the first block at line 830 (SevenZFile.class), clearing the deferredBlockStreams. When calling entry.read(...) afterwards an IllegalStateException (""No current 7z entry (call getNextEntry() first)."") is thrown. IMHO, there should be another check for entry.getSize() == 0.


This worked correctly up until 1.10."
Compress,37,Parsing PAX headers fails with NegativeArraySizeException,"The TarArchiveInputStream.parsePaxHeaders method fails with a NegativeArraySizeException when there is an empty line at the end of the headers.


The inner loop starts reading the length, but it gets a newline (10) and ends up subtracting '0' (48) from it; the result is a negative length that blows up an attempt to allocate the rest array.


I would say that a check to see if ch is less the '0' and break the loop if it is.


I used npm pack aws-sdk@2.2.16 to generate a tarball with this issue."
Compress,38,PAX header entry name ending with / causes problems,"There seems to be a problem when a PAX header entry (link flag is 'x') has a name ending with ""/"". The TarArchiveEntry.func_94102306742aba89f1271a7605004f77ec7efe7cde00024e991700e50c747c66() check ends up returning true because of the trailing slash which means no content can be read from the entry. PAX header parsing effectively finds nothing and the stream is not advanced; this leaves the stream in a bad state as the next entry's header is actually read from the header contents.


If the name is modified to remove the trailing slash when the link flag indicates a PAX header everything seems to work fine. That would be one potential fix in parseTarHeader. Changing func_94102306742aba89f1271a7605004f77ec7efe7cde00024e991700e50c747c66 to return false if isPaxHeader is true (before the trailing ""/"" check) would probably also fix the issue (though I can't verify that in the debugger like I can with changing the name).


So far I have only seen this when using Docker to save images that contain a yum database. For example:




```
docker pull centos:latest && docker save centos:latest | tar x --include ""\*/layer.tar""

```


Will produce at least one ""layer.tar"" that exhibits this issue. If I come across a smaller TAR for testing I will attach it."
Compress,40,Overflow in BitInputStream,"in Class BitInputStream.java(\src\main\java\org\apache\commons\compress\utils),  

funcion:


 public long func_e5431081d3835f932c571b291fba31e8159a45a6d90e6674de170869518cca75(final int count) throws IOException {  

 if (count < 0 || count > MAXIMUM\_CACHE\_SIZE) 


{
 throw new IllegalArgumentException(""count must not be negative or greater than "" + MAXIMUM\_CACHE\_SIZE);
 }
 while (bitsCachedSize < count) {  

 final long nextByte = in.read();  

 if (nextByte < 0) 


{
 return nextByte;
 }
 if (byteOrder == ByteOrder.LITTLE\_ENDIAN) 


{
 bitsCached |= (nextByte << bitsCachedSize);
 }
 else 


{
 bitsCached <<= 8;
 bitsCached |= nextByte;
 }
 bitsCachedSize += 8;  

 }


 final long bitsOut;  

 if (byteOrder == ByteOrder.LITTLE\_ENDIAN) 


{
 bitsOut = (bitsCached & MASKS[count]);
 bitsCached >>>= count;
 }
 else 


{
 bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
 }
 bitsCachedSize -= count;  

 return bitsOut;  

 }


I think here ""bitsCached |= (nextByte << bitsCachedSize);"" will overflow in some cases. for example, below is a test case:


public static void test() {


 ByteArrayInputStream in = new ByteArrayInputStream(new byte[]


{87, 45, 66, 15,
 90, 29, 88, 61, 33, 74}
);  

 BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE\_ENDIAN);  

 try 


{
 long ret = bin.func_e5431081d3835f932c571b291fba31e8159a45a6d90e6674de170869518cca75(5);
 ret = bin.func_e5431081d3835f932c571b291fba31e8159a45a6d90e6674de170869518cca75(63);
 ret = bin.func_e5431081d3835f932c571b291fba31e8159a45a6d90e6674de170869518cca75(12);
 }
 catch (Exception e) 


{
 e.printStackTrace();
 }
}


overflow occur in ""bin.func_e5431081d3835f932c571b291fba31e8159a45a6d90e6674de170869518cca75(63);"" , so ,result in wrong result from ""bin.func_e5431081d3835f932c571b291fba31e8159a45a6d90e6674de170869518cca75(12);"""
Compress,41,"ZipArchiveInputStream.func_829325627de38b6458adfa2cb4fc669902997362f7afeed0cddd039abf9ac8e4() should differentiate between ""invalid entry encountered"" and ""no more entries""","ZipArchiveInputStream.func_829325627de38b6458adfa2cb4fc669902997362f7afeed0cddd039abf9ac8e4() currently returns null if an invalid entry is encountered. Thus, it's not possible to differentiate between ""no more entries"" and ""invalid entry encountered"" conditions.


Instead, it should throw an exception if an invalid entry is encountered.


I've created a test case and fix. I will submit a pull request shortly."
Compress,44,NullPointerException defect in func_13556319d30cb8b390667bcc379307767290af600e2671991c8fa775c054bac9#getValue(),"NullPointerException defect in func_13556319d30cb8b390667bcc379307767290af600e2671991c8fa775c054bac9#getValue() detected as stated in pull request 33: <https://github.com/apache/commons-compress/pull/33>


Furthermore the following test describes the problem:




```
    @Test(expected = NullPointerException.class) //I assume this behaviour to be a bug or at least a defect.
    public void testGetValueThrowsNullPointerException() {

        func_13556319d30cb8b390667bcc379307767290af600e2671991c8fa775c054bac9 checksumCalculatingInputStream = new func_13556319d30cb8b390667bcc379307767290af600e2671991c8fa775c054bac9(null,null);

        checksumCalculatingInputStream.getValue();


    }

```"
Compress,45,TarUtils.func_66a1848752112934e0d16fb16757693a95d13509de3608e318fe3319b3e02f3a never uses result of formatLongBinary,"if the length < 9, formatLongBinary is executed, then overwritten by the results of formatBigIntegerBinary. 


If the results are not ignored, a unit test would fail.


Also, do the binary hacks need to support negative numbers?"
Compress,46,"Tests failing under jdk 9 : one reflection issue, one change to ZipEntry related issue","X5455\_ExtendedTimestampTest is failing under JDK 9 , due to what appears to be a bogus value returned from getTime(). It seems like the test failure might be due to the changes introduced for this:   

<https://bugs.openjdk.java.net/browse/JDK-8073497>


Tests were run using intelliJ TestRunner, using the openjdk9 build from the tip of the jdk9 tree (not dev). I believe that this is at most one commit away from what will be the RC (which was delayed at the last minute due to two issues, one of which was javadoc related, and the other hotspot."
Csv,1,ExtendedBufferReader does not handle EOL consistently,"ExtendedBufferReader checks for '\n' (LF) in the func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925() methods, incrementing linecount when found.


However, the func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925Line() method calls BufferedReader.func_3316348dbadfb7b11c7c2ea235949419e23f9fa898ad2c198f999617912a9925Line() which treats CR, LF and CRLF equally (and drops them).


If the code is to be flexible in what it accepts, the class should also allow for CR alone as a line terminator.


It should work if the code increments the line counter for CR, and for LF if the previous character was not CR."
Csv,2,CSVRecord does not verify that the length of the header mapping matches the number of values,"CSVRecord does not verify that the size of the header mapping matches the number of values. The following test will produce a ArrayOutOfBoundsException:




```
@Test
public void testInvalidHeaderTooLong() throws Exception {
   final CSVParser parser = new CSVParser(""a,b"", CSVFormat.newBuilder().withHeader(""A"", ""B"", ""C"").build());
   final CSVRecord record = parser.iterator().next();
   record.func_2998b3232d29e8dc5a78d97a32ce83f556f3ed31b057077503df05641dd79158(""C"");
}

```"
Csv,3,Unescape handling needs rethinking,"The current escape parsing converts <esc><char> to plain <char> if the <char> is not one of the special characters to be escaped.


This can affect unicode escapes if the <esc> character is backslash.


One way round this is to specifically check for <char> == 'u', but it seems wrong to only do this for 'u'.


Another solution would be to leave <esc><char> as is unless the <char> is one of the special characters.


There are several possible ways to treat unrecognised escapes:


* treat it as if the escape char had not been present (current behaviour)
* leave the escape char as is
* throw an exception"
Csv,4,CSVParser: func_6b416b68f631a701d95cb625b7b2ddc46abd7276c19f60df4848a36082458055 throws NPE,"title nearly says it all ![](/jira/images/icons/emoticons/smile.png) 


Given a CSVParser parser, the following line throws an NPE:




```
Map<String, Integer> header = parser.func_6b416b68f631a701d95cb625b7b2ddc46abd7276c19f60df4848a36082458055();

```


Stacktrace: 




```
Caused by: java.lang.NullPointerException
at java.util.HashMap.<init>(HashMap.java:318)
at java.util.LinkedHashMap.<init>(LinkedHashMap.java:212)
at org.apache.commons.csv.CSVParser.func_6b416b68f631a701d95cb625b7b2ddc46abd7276c19f60df4848a36082458055(CSVParser.java:288)

```


happens if the format doesn't have a headerMap.


to fix, check if the parser's headerMap is null before trying to create the returned map:




```
public Map<String, Integer> func_6b416b68f631a701d95cb625b7b2ddc46abd7276c19f60df4848a36082458055() {
    return this.headerMap != null ?
       new LinkedHashMap<String, Integer>(this.headerMap)
       : null;
}


```"
Csv,5,CSVFormat.format allways append null,"When I now call  

CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(""H1"",""H2"").format(""A"",""B"")  

I get the output A;Bnull


The expected output would be 


A;B"
Csv,6,CSVRecord.toMap() fails if row length shorter than header length,"Similar to [~~CSV-96~~](https://issues.apache.org/jira/browse/CSV-96 ""CSVRecord does not verify that the length of the header mapping matches the number of values""), if .toMap() is called on a record that has fewer fields than we have header columns we'll get an ArrayOutOfBoundsException.




```
@Test
public void testToMapWhenHeaderTooLong() throws Exception {
   final CSVParser parser = new CSVParser(""a,b"", CSVFormat.newBuilder().withHeader(""A"", ""B"", ""C"").build());
   final CSVRecord record = parser.func_ef9baedff2f457ddd3f1382fd265db536122a0bba2996c196d28ba18e25205b0().next();
   record.toMap();
}

```"
Csv,9,CSVRecord.toMap() throws NPE on formats with no headers.,"The method toMap() on CSVRecord throws a NullPointerExcpetion when called on records derived using a format with no headers.


The method documentation states a null map should be returned instead."
Csv,10,CSVFormat#withHeader doesn't work with func_885b35cc0076d634e01d541ed732ff1a5bac67cf96cb227a62e18175a7805bc4,"In the current version [CSVFormat#withHeader](https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVFormat.html#withHeader(java.lang.String...)) is only used by CSVParser. It would be nice if func_885b35cc0076d634e01d541ed732ff1a5bac67cf96cb227a62e18175a7805bc4 also supported it. Ideally, the following line of code




```
func_885b35cc0076d634e01d541ed732ff1a5bac67cf96cb227a62e18175a7805bc4 csvPrinter
  = CSVFormat.TDF
    .withHeader(""x"")
    .print(Files.newBufferedWriter(Paths.get(""data.csv"")));
csvPrinter.printRecord(42);
csvPrinter.close();

```


should produce




```
x
42

```


If you're alright with the idea of automatically inserting headers, I can attach a patch."
Csv,11,"NullPointerException when empty header string and and null string of """"","When setting the format to have a nullString of """" and having an empty header value, a nullPointerException is thrown."
Csv,14,Negative numeric values in the first column are always quoted in minimal mode,"Negative Numeric values are always quoted in minimal mode if (and only if) they are in the first column.


i.e.  

long,lat,data  

""-92.222"",43.333,3


Looking at the code, this is by design but seem to be for an unknown reason.


From v1.2 CSVPrinter line 230:


// TODO where did this rule come from?  

if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {  

 quote = true;  

} else ...


I propose this rule to either be remove or at a minimum be changed to:  

// TODO where did this rule come from?  

if (newRecord && (c !='-' && c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {  

 quote = true;  

} else ..."
Csv,15,The behavior of quote char using is not similar as Excel does when the first string contains CJK char(s),"When using CSVFormat.EXCEL to print a CSV file, the behavior of quote char using is not similar as Microsoft Excel does when the first string contains Chinese, Japanese or Korean (CJK) char(s).


e.g.  

There are 3 data members in a record, with Japanese chars: ""あ"", ""い"", ""う"":  

 Microsoft Excel outputs:  

 あ,い,う  

 Apache Common CSV outputs:  

 ""あ"",い,う"
Gson,5,ISO8601 is not fully implemented,"Hi guys,


I'm working on a project where I have to func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188 `2016-01-11T11:06:14.000-02` to java.util.Date which is a valid date according to [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) on page 12.


But I got an Exception trying to archive it



```
Caused by: com.google.gson.JsonSyntaxException: 2016-01-11T11:06:14.000-02
        at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:107)
        at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:84)
        at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:38)
        at com.google.gson.TreeTypeAdapter.read(TreeTypeAdapter.java:58)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)
        at com.google.gson.Gson.fromJson(Gson.java:861)
        at com.google.gson.Gson.fromJson(Gson.java:926)
        at com.google.gson.Gson.fromJson(Gson.java:899)
        at ...
Caused by: java.text.ParseException: Failed to func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188 date [""2016-01-11T11:06:14.000-02']: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00
        at com.google.gson.internal.bind.util.ISO8601Utils.func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(ISO8601Utils.java:270)
        at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:105)
        ... 31 more
Caused by: java.lang.IndexOutOfBoundsException: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00
        at com.google.gson.internal.bind.util.ISO8601Utils.func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(ISO8601Utils.java:236)
        ... 32 more

```

I'm able to fix this if it sounds reasonable."
Gson,10,JsonAdapter annotation ignored for primitive fields,"`ReflectiveTypeAdapterFactory` correctly detects the `@JsonAdapter` annotation and registers the custom adapter ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L133)), but its `func_10fd874b68dad080ed706762c8e163dabb20514bddae38fb159c56f714a3b143` method wraps that type adapter in a `TypeAdapterRuntimeTypeWrapper` ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L111)), which overrides the adapter with the default Gson adapter ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java#L65)).


Here's a test that demonstrates the behavior:



```
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest
index 4c745ec..8cae980 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
       this.part = part;
     }
   }
+
+ public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
+ Gson gson = new Gson();
+ String json = gson.toJson(new GadgetWithPrimitivePart(42));
+ assertEquals(""{\""part\"":\""42\""}"", json);
+ GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);
+ assertEquals(42, gadget.part);
+ }
+
+ private static final class GadgetWithPrimitivePart {
+ @JsonAdapter(LongToStringTypeAdapterFactory.class)
+ final long part;
+
+ private GadgetWithPrimitivePart(long part) {
+ this.part = part;
+ }
+ }
+
+ private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
+ static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
+ @Override public void func_10fd874b68dad080ed706762c8e163dabb20514bddae38fb159c56f714a3b143(JsonWriter out, Long value) throws IOException {
+ out.value(value.toString());
+ }
+ @SuppressWarnings(""unchecked"")
+ @Override public Long read(JsonReader in) throws IOException {
+ return in.nextLong();
+ }
+ };
+ @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+ Class<?> cls = type.getRawType();
+ if (Long.class.isAssignableFrom(cls)) {
+ return (TypeAdapter<T>) ADAPTER;
+ } else if (long.class.isAssignableFrom(cls)) {
+ return (TypeAdapter<T>) ADAPTER;
+ }
+ throw new IllegalStateException(""Non-long field of type "" + type
+ + "" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)"");
+ }
+ }
 }
```

And here's the result of running it:



```
[snip]
Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest
Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!
[snip]
Results :

Failed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:<{""part"":[""42""]}> but was:<{""part"":[42]}>

Tests run: 990, Failures: 1, Errors: 0, Skipped: 0

```

Is this the intended behavior? If so, `JsonAdapter`'s documentation is a bit misleading.


If it's not, I unfortunately do not have a suggested fix. I was actually a bit surprised to see that a new `TypeAdapterRuntimeTypeWrapper` object is constructed for each field that is serialized, on every serialization.


In case you would like to incorporate my test into Gson, I hereby assign copyright of that test to Google.


Thanks!"
Gson,11,Allow deserialization of a Number represented as a String,"This works:



```
gson.fromJson(""\""15\"""", int.class)

```

This doesn't:



```
gson.fromJson(""\""15\"""", Number.class)

```

This PR makes it so the second case works too."
Gson,12,Bug when skipping a value while using the JsonTreeReader,"When using a `JsonReader` to read a JSON object, `func_b5e525ea21d8b6dd90224004a5e3733424a771a9feefbab771601c32c9bd1825()` skips the structure successfully.



```
@Test
public void testSkipValue\_JsonReader() throws IOException {
  try (JsonReader in = new JsonReader(new StringReader(""{}""))) {
    in.func_b5e525ea21d8b6dd90224004a5e3733424a771a9feefbab771601c32c9bd1825();
  }
}
```

But when using a `JsonTreeReader` to read a JSON object, `func_b5e525ea21d8b6dd90224004a5e3733424a771a9feefbab771601c32c9bd1825()` throws a `ArrayIndexOutOfBoundsException`.



```
@Test
public void testSkipValue\_JsonTreeReader() throws IOException {
  try (JsonTreeReader in = new JsonTreeReader(new JsonObject())) {
    in.func_b5e525ea21d8b6dd90224004a5e3733424a771a9feefbab771601c32c9bd1825();
  }
}
```

Stacktrace



```
java.lang.ArrayIndexOutOfBoundsException: -1
	at com.google.gson.internal.bind.JsonTreeReader.func_b5e525ea21d8b6dd90224004a5e3733424a771a9feefbab771601c32c9bd1825(JsonTreeReader.java:262)

```

The method `popStack()` is being called on line 261 with a `stackSize` of `1` and afterwards the `stackSize` is `0` and the call on line 262 must result in an `ArrayIndexOutOfBoundsException`."
Gson,13,Negative zero,"Hi,


I have been cross testing various json parsers looking for those that expose the lexical of json numbers and not only their bound java.lang.Number. Because of the lazy parsing done by gson with `LazilyParsedNumber`, that keeps the lexical, all my roundtrip tests pass apart one: the lexical `-0` that is treated as it were `0`


I read some threads about negative zero:  

<https://www.ietf.org/mail-archive/web/json/current/msg03668.html>  

<https://www.ietf.org/mail-archive/web/json/current/msg01520.html>  

<https://www.ietf.org/mail-archive/web/json/current/msg01523.html>  

<https://www.ietf.org/mail-archive/web/json/current/msg01525.html>


I created this issue thinking that `-0` is a float, the same as `-0.0`, since a signed zero makes sense only in floating point numbers and also because in Java only Double/Float preserve sign of zero. This would have the implication that `-0` could not be validated by jsonschema `type` `integer` , and that a jsonschema implementation would have the need to know if a `-0` is present in json data, but probably this is not the case.


After I started to (re)consider that `-0` could be an integer, only that seems that in no programming language there is an integer that preserves sign for zero.


In any case, differentiating between `0` and `-0` at lexical level would allow a client of gson to be able to refuse the value `-0`.


Gson could easily support differentiating between `0` and `-0`: in code `-0` is [treated as an integer (PEEKED\_LONG) in JsonReader](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731) so its value is stored in a Java `long` that cannot represent negative zero. I noted that `-0.0` roundtrips correctly because is treated as a PEEKED\_NUMBER that is kept as a Java String. So the case of `-0` could be trapped and treated as `-0.0`, as a PEEKED\_NUMBER, in this way the `toString()` method of `LazilyParsedNumber` will return `-0` and gson will be able to roundtrip any valid number value found in source, only clients using `Number.toString()` will notice any difference.


My proposal is to change [this code](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731) from



```
      if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {

```

to



```
      if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!=0 || false==negative) && (value != Long.MIN_VALUE || negative)) {

```

Thanks,  

Michele"
Gson,15,"JsonWriter#func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619(java.lang.Number) can be lenient, but JsonWriter#func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619(double) can't,","In lenient mode, JsonWriter#func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619(java.lang.Number) can write pseudo-numeric func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619s like `NaN`, `Infinity`, `-Infinity`:



```
    if (!lenient
        && (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN""))) {
      throw new IllegalArgumentException(""Numeric func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619s must be finite, but was "" + func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619);
    }
```

But JsonWriter#func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619(double) behaves in different way:



```
    if (Double.isNaN(func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619) || Double.isInfinite(func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619)) {
      throw new IllegalArgumentException(""Numeric func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619s must be finite, but was "" + func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619);
    }
```

So, while working with streaming, it's impossible to write semi-numeric func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619 without boxing a double (e. g. `out.func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619((Number) Double.func_cd42404d52ad55ccfa9aca4adc828aa5800ad9d385a0671fbcbf724118320619Of(Double.NaN))`).


I think, this should be possible, because boxing gives worse performance."
Gson,16,Fix StackOverflowError on resolving types with TypeVariable recursion,"Sample failing code:  

private static class TestType {  

TestType<? super X> superType;  

}  

...  

new Gson().getAdapter(TestType.class);"
Gson,17,Fixed DefaultDateTypeAdapter nullability issue and JSON primitives contract,"Regression in:


* [b8f616c](https://github.com/google/gson/commit/b8f616c939c652b8540c95fa2b377b8c628ef3ff) - Migrate DefaultDateTypeAdapter to streaming adapter ([#1070](https://github.com/google/gson/pull/1070))


Bug reports:


* [#1096](https://github.com/google/gson/issues/1096) - 2.8.1 can't serialize and deserialize date null (2.8.0 works fine)
* [#1098](https://github.com/google/gson/issues/1098) - Gson 2.8.1 DefaultDateTypeAdapter is not null safe.
* [#1095](https://github.com/google/gson/issues/1095) - serialize date sometimes TreeTypeAdapter, sometimes DefaultDateTypeAdapter?"
Gson,18,Gson deserializes wildcards to LinkedHashMap,"This issue is a successor to [#1101](https://github.com/google/gson/issues/1101).


Models:



```
// ? extends causes the issue
class BigClass { Map<String, ? extends List<SmallClass>> inBig; }

class SmallClass { String inSmall; }
```

Json:



```
{
  ""inBig"": {
    ""key"": [
      { ""inSmall"": ""hello"" }
    ]
  }
}
```

Gson call:



```
SmallClass small = new Gson().fromJson(json, BigClass.class).inBig.get(""inSmall"").get(0);
```

This call will fail with a `ClassCastException` exception –  

`com.google.gson.internal.LinkedTreeMap cannot be cast to Entry`. If we remove `? extends` then everything works fine."
JacksonCore,3,_currInputRowStart isn't initialized in func_dc6cf6981fc3ba3ee1664ce76e399e06b7eb794d5a67ebfc0f24db532ac3eff8() constructor. The column position will be wrong.,"The UTF8StreamJson Parser constructor allows to specify the start position. But it doesn't set the ""\_currInputRowStart"" as the same value. It is still 0. So when raise the exception, the column calculation (ParserBase.getCurrentLocation() )will be wrong.


int col = \_inputPtr - \_currInputRowStart + 1; // 1-based


public func_dc6cf6981fc3ba3ee1664ce76e399e06b7eb794d5a67ebfc0f24db532ac3eff8(IOContext ctxt, int features, InputStream in,  

ObjectCodec codec, BytesToNameCanonicalizer sym,  

byte[] inputBuffer, int start, int end,  

boolean bufferRecyclable)"
JacksonCore,4,What is the maximum key length allowed?,"I noticed that even in Jackson 2.4, if a JSON key is longer than 262144 bytes, ArrayIndexOutOfBoundsException is thrown from TextBuffer. Below is the stack trace:



```
java.lang.ArrayIndexOutOfBoundsException
    at java.lang.System.arraycopy(Native Method)
    at com.fasterxml.jackson.core.util.TextBuffer.func_618089feb0e154020b022708848035f775559d62a4e64b09ff824d1450ddb5e8(TextBuffer.java:604)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2034)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:1928)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongFieldName(UTF8StreamJsonParser.java:1534)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumFieldName(UTF8StreamJsonParser.java:1502)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFieldName(UTF8StreamJsonParser.java:1437)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:668)
    ... <below are our code> ...

```

Looking at TextBuffer.func_618089feb0e154020b022708848035f775559d62a4e64b09ff824d1450ddb5e8(TextBuffer.java:604), once the length of \_currentSegment is increased to MAX\_SEGMENT\_LEN + 1 (262145) bytes, the newLen will stay at MAX\_SEGMENT\_LEN, which is smaller than len. Therefore System.arraycopy() will fail.


I understand it is rare to have key larger than 262144 bytes, but it would be nice if


* Jackson explicitly throw exception stating that key is too long.
* Document that the maximum key length is 262144 bytes.


OR


* Update TextBuffer to support super long key.


Thanks!"
JacksonCore,5,An exception is thrown for a valid JsonPointer expression,"Json-Patch project leader has noted me that there is a bug on JsonPointer implementation and I have decided to investigate.


Basically if you do something like `JsonPointer.compile(""/1e0"");` it throws a NumberFormatExpcetion which is not true. This is because this piece of code:



```
private final static int \_parseInt(String str)
    {
        final int len = str.length();
        if (len == 0) {
            return -1;
        }
        for (int i = 0; i < len; ++i) {
            char c = str.charAt(i++);
            if (c > '9' || c < '0') {
                return -1;
            }
        }
        // for now, we'll assume 32-bit indexes are fine
        return NumberInput.parseInt(str);
    }
```

When they found a number it interprets the segment as integer but in reality it should be the whole expression. For this reason I think that the condition should be changed to the inverse condition (if it doesn't found any char then it is a number.


If you want I can send you a PR as well.


Alex."
JacksonCore,6,"JsonPointer should not consider ""00"" to be valid index","Although `00` can be parsed as `0` in some cases, it is not a valid JSON number; and is also not legal numeric index for JSON Pointer. As such, `JsonPointer` class should ensure it can only match property name ""00"" and not array index."
JacksonCore,7,Add a check so JsonGenerator.writeString() won't work if writeFieldName() expected.,"Looks like calling `writeString()` (and perhaps other scalar write methods) results in writing invalid output, instead of throwing an exception. It should instead fail; in future we may want to consider allowing this as an alias, but at any rate it should not produce invalid output."
JacksonCore,8,Inconsistent TextBuffer#func_f68b3b7bb6b48254d6178ba5efaf5fcbf698fe5ade4f0b751a69182abe647a52 behavior,"Hi, I'm using 2.4.2. While I'm working on CBORParser, I noticed that CBORParser#getTextCharacters() returns sometimes `null` sometimes `[]` (empty array) when it's parsing empty string `""""`.


While debugging, I noticed that TextBuffer#func_f68b3b7bb6b48254d6178ba5efaf5fcbf698fe5ade4f0b751a69182abe647a52 behaves inconsistently.



```
TextBuffer buffer = new TextBuffer(new BufferRecycler());
buffer.resetWithEmpty();
buffer.func_f68b3b7bb6b48254d6178ba5efaf5fcbf698fe5ade4f0b751a69182abe647a52(); // returns null
buffer.contentsAsString(); // returns empty string """"
buffer.func_f68b3b7bb6b48254d6178ba5efaf5fcbf698fe5ade4f0b751a69182abe647a52(); // returns empty array []

```

I think func_f68b3b7bb6b48254d6178ba5efaf5fcbf698fe5ade4f0b751a69182abe647a52 should return the same value. Not sure which (`null` or `[]`) is expected though."
JacksonCore,11,ArrayIndexOutOfBoundsException: 128 when repeatedly serializing to a byte array,"```
java.lang.ArrayIndexOutOfBoundsException: 128
    at com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(ByteQuadsCanonicalizer.java:853)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(UTF8StreamJsonParser.java:2340)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(UTF8StreamJsonParser.java:2224)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(UTF8StreamJsonParser.java:1831)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(UTF8StreamJsonParser.java:1786)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(UTF8StreamJsonParser.java:1743)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(UTF8StreamJsonParser.java:1678)
    at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(UTF8StreamJsonParser.java:1007)
    at com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringMap(MapDeserializer.java:471)
    at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:341)
    at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(MapDeserializer.java:26)
    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3702)
    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2824)
    at com.kryptnostic.services.v1.SmokeTests.spamAddIndexPair(SmokeTests.java:605)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

```

Repro:



```
@Test
public void spamTest() {
        ObjectMapper mapper = new ObjectMapper();
        Map<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();
        for ( int i = 0; i < 10000; ++i ) {
            byte[] indexPairBytes = new byte[ 2080 ];
            new Random().nextBytes( indexPairBytes );
            ServerIndexPair sip = new ServerIndexPair( indexPairBytes );

            byte[] s = mapper.writeValueAsBytes( ImmutableMap.of( UUID
                    .randomUUID().toString(), sip ) );
            Map<String, ServerIndexPair> metadata = mapper.readValue( s,
                    new TypeReference<Map<String, ServerIndexPair>>() {} );
            for ( Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet() ) {
                ServerIndexPair indexPair = metadataEntry.getValue();
                ssip.put( new ObjectUserKey( metadataEntry.getKey(), user ),
                        indexPair );
            }
            logger.error( ""Iteration: {}"", i );
        }
}

```


```
public class ServerIndexPair {
    public static final String INDEX_PAIR_FIELD = ""indexPair"";
    private final byte[]       indexPair;

    @JsonCreator
    public ServerIndexPair( @JsonProperty( INDEX_PAIR_FIELD ) byte[] indexPair ) {
        Preconditions.checkState( indexPair.length == 2080, ""Index pair must be 2080 bytes long."" );
        this.indexPair = indexPair;
    }

    @JsonProperty( INDEX_PAIR_FIELD )
    public byte[] getIndexPair() {
        return indexPair;
    }
}

```


```
public class ObjectUserKey {
    public static final String SEPARATOR = "":"";
    private final String       objectId;
    private final UUID         userKey;

    @JsonCreator
    public ObjectUserKey(
            @JsonProperty( Names.ID_FIELD ) String objectId,
            @JsonProperty( Names.USER_FIELD ) UUID userKey ) {
        super();
        this.objectId = objectId;
        this.userKey = userKey;
    }

    @JsonProperty( Names.ID_FIELD )
    public String getObjectId() {
        return objectId;
    }

    @JsonProperty( Names.USER_FIELD )
    public UUID getUserKey() {
        return userKey;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ( ( objectId == null ) ? 0 : objectId.hashCode() );
        return result;
    }

    @Override
    public boolean equals( Object obj ) {
        if ( this == obj ) {
            return true;
        }
        if ( obj == null ) {
            return false;
        }
        if ( !( obj instanceof ObjectUserKey ) ) {
            return false;
        }
        ObjectUserKey other = (ObjectUserKey) obj;
        if ( objectId == null ) {
            if ( other.objectId != null ) {
                return false;
            }
        }
        if ( userKey == null ) {
            if ( other.userKey != null ) {
                return false;
            }
        }
        if ( !objectId.equals( other.objectId ) ) {
            return false;
        }
        if ( !userKey.equals( other.userKey ) ) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return userKey + SEPARATOR + objectId;
    }

    public static ObjectUserKey fromString( String value ) {
        int index = value.lastIndexOf( ObjectUserKey.SEPARATOR );
        Preconditions.checkState( index > -1, ""Separator character "" + SEPARATOR
                + "" should be present for ObjectUserKey"" );
        String userKeyString = value.substring( 0, index );
        String objectIdString = value.substring( index + 1 );
        UUID userKey = UUID.fromString( userKeyString );
        return new ObjectUserKey( objectIdString, userKey );
    }

    public byte[] asBytes() {
        return this.toString().getBytes();
    }

}

```"
JacksonCore,17,JsonGenerationException: Split surrogate on writeRaw() input thrown for input of a certain size,"In short, I am seeing the following exception while processing text that includes valid multi-byte Unicode characters, and adding or removing characters before the ""problematic"" characters can affect whether the exception is thrown.


`$ java -classpath .:../../jackson-core/target/jackson-core-2.8.2-SNAPSHOT.jar BadMsg com.fasterxml.jackson.core.JsonGenerationException: Split surrogate on writeRaw() input (last character) at com.fasterxml.jackson.core.JsonGenerator._reportError(JsonGenerator.java:1887) at com.fasterxml.jackson.core.json.UTF8JsonGenerator.func_6ddc7e0050e81725475e09b8a0cde1119275e4e7a6e3e4ee66ce7d8adebaf383(UTF8JsonGenerator.java:1916) at com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(UTF8JsonGenerator.java:697) at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(UTF8JsonGenerator.java:611) at com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(UTF8JsonGenerator.java:560) at com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(GeneratorBase.java:306) at BadMsg.main(BadMsg.java:17)` 


The simplest way to demonstrate this is code, so I will attach a sample program with a document that causes the error. Sorry for the ugly redacted text, but you can imagine some real words and other interesting strings in place of all the x's. Note that if I delete or add enough of the 'x' characters (doesn't matter where in the JSON they appear, as long as it's before the character that causes the exception) the exception will not be thrown. I believe the problem is in buffering the data that is passed to the lower level functions, but I have not debugged to that level."
JacksonCore,20,Add support for writing byte[] via JsonGenerator.func_8d610665e9c10c379cf660e04012d9cfeab25a137873914f4b6399bd0852cea1(),"(note: should be safe for patch, that is, 2.8.3)


Default implementation of 2.8-added `func_8d610665e9c10c379cf660e04012d9cfeab25a137873914f4b6399bd0852cea1()` throws exception (unsupported operation) for all values, since JSON does not have any native object types.  

This is different from handling of `writeObject()`, which tries to either delegate to `ObjectCodec` (if one registered), or even encode ""simple"" values.


However: since support for binary data is already handled in some cases using `VALUE_EMBEDDED_OBJECT`, it would actually make sense to handle case of `byte[]` (and, if feasible, perhaps `ByteBuffer` for extra points), and also ensure `null` can be written.


This is likely necessary to support [FasterXML/jackson-databind#1361](https://github.com/FasterXML/jackson-databind/issues/1361) and should in general make system more robust."
JacksonCore,25,Fix ArrayIndexOutofBoundsException found by LGTM.com,"First of all, thank you for reporting this.


But would it be possible to write a test that shows how this actually works? It would be great to have a regression test, to guard against this happening in future."
JacksonCore,26,Non-blocking parser reports incorrect locations when fed with non-zero offset,"When feeding a non-blocking parser, the input array offset leaks into the offsets reported by `getCurrentLocation()` and `getTokenLocation()`.


For example, feeding with an offset of 7 yields tokens whose reported locations are 7 greater than they should be. Likewise the current location reported by the parser is 7 greater than the correct location.


It's not possible for a user to work around this issue by subtracting 7 from the reported locations, because the token location may have been established by an earlier feeding with a different offset.


Jackson version: 2.9.8


Unit test:



```
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.async.ByteArrayFeeder;
import org.junit.Test;

import static java.nio.charset.StandardCharsets.UTF\_8;
import static org.junit.Assert.assertEquals;

public class FeedingOffsetTest {

  @Test
  public void inputOffsetShouldNotAffectLocations() throws Exception {
    JsonFactory jsonFactory = new JsonFactory();
    JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();
    ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();

    byte[] input = ""[[["".getBytes(UTF\_8);

    feeder.func_c63be4d4068a0a03b2959e67bff5afd8f36a4db6a85805c8de6311f0354de89f(input, 2, 3);
    assertEquals(JsonToken.START\_ARRAY, parser.nextToken());
    assertEquals(1, parser.getCurrentLocation().getByteOffset()); // ACTUAL = 3
    assertEquals(1, parser.getTokenLocation().getByteOffset());   // ACTUAL = 3

    feeder.func_c63be4d4068a0a03b2959e67bff5afd8f36a4db6a85805c8de6311f0354de89f(input, 0, 1);
    assertEquals(JsonToken.START\_ARRAY, parser.nextToken());
    assertEquals(2, parser.getCurrentLocation().getByteOffset());
    assertEquals(2, parser.getTokenLocation().getByteOffset());
  }
}
```"
JacksonDatabind,1,NULL values are duplicated when serializing as array [via @JsonFormat(shape = JsonFormat.Shape.ARRAY)],"Example:



```
public class TestOuter {

    @JsonFormat(shape = JsonFormat.Shape.ARRAY)
    public ArrayList<TestInner> array;

    public TestOuter() {
        this.array = new ArrayList<TestInner>();
        this.array.add(new TestInner(1, ""one""));
        this.array.add(new TestInner(0, null));
    }

    private class TestInner {
        public int i;
        public String mayBeNull;

        public TestInner(int i, String s) {
            this.i = i;
            this.mayBeNull = s;
        }
    }
}
```

Serializing an instance of TestOuter will produce the following incorrect result (as of Jackson 2.2.1):



```
""array"": [[1, ""one""], [0, null, null]]
```

where the null value is duplicated. The expected result would be:



```
""array"": [[1, ""one""], [0, null]]
```

I tracked the issue down to:



```
package com.fasterxml.jackson.databind.ser;
// ...
public class BeanPropertyWriter {
// ...
    public void func_40ed8b5910c88fe7ccc06910b7826a327fbd0c61a15e412ebe6e3cfa37efda86(Object bean, JsonGenerator jgen, SerializerProvider prov)
        throws Exception
    {
        Object value = get(bean);
        if (value == null) { // nulls need specialized handling
            if (\_nullSerializer != null) {
                \_nullSerializer.serialize(null, jgen, prov);
            } else { // can NOT suppress entries in tabular output
                jgen.writeNull();
            }
        }
        // otherwise find serializer to use
        JsonSerializer<Object> ser = \_serializer;
    // ... ...
```

where I suspect there is a missing ""return"", to exit the function once handling of the null value in the dedicated branch is done.  

As it is now, a null value is first serialized in the dedicated branch (jgen.writeNull()), and then execution continues on the ""normal"" (non-null) path and eventually the value is serialized once again."
JacksonDatabind,5,Mixin annotations lost when using a mixin class hierarchy with non-mixin interfaces,"In summary, mixin annotations are lost when Jackson scans a parent mixin class with Json annotations followed by an interface implemented by the parent mixin class that does not have the same Json annotations.  

Jackson version: 2.4.0


Detail:  

I have the following class structure



```
public interface Contact {
    String getCity();
}

public class ContactImpl implements Contact {
    public String getCity() { ... }
}

public class ContactMixin implements Contact {
    @JsonProperty
    public String getCity() { return null; }
}

public interface Person extends Contact {}

public class PersonImpl extends ContactImpl implements Person {}

public class PersonMixin extends ContactMixin implements Person {}
```

and I configure a module as



```
// There are other getters/properties in the Impl class that do not need to be serialized and so
// I am using the Mixin to match the interface and explicitly annotate all the inherited methods
module.disable(MapperFeature.ALLOW\_FINAL\_FIELDS\_AS\_MUTATORS)
    .disable(MapperFeature.AUTO\_DETECT\_FIELDS)
    .disable(MapperFeature.AUTO\_DETECT\_GETTERS)
    .disable(MapperFeature.AUTO\_DETECT\_IS\_GETTERS)
    .disable(MapperFeature.INFER\_PROPERTY\_MUTATORS);
module.setMixInAnnotation(Person.class, PersonMixin.class);
```

When a `PersonImpl` instance is serialized, `city` is not included.


I debugged the code and this is what happens:  

In `AnnotatedClass.resolveMemberMethods()` the supertypes of `PersonImpl` are `[Person.class, Contact.class, ContactImpl.class]` in that order.


It starts with `Person` for which it finds `PersonMixin` and proceeds to `AnnotatedClass.func_7cda6ae8b929fda747da0e0cc19c5dfaad44b6bbea0d7847e6aa5296921d6ca3()`. Here the `parents` list has `[PersonMixin, ContactMixin, Contact]`. When it processes `ContactMixin` it adds `getCity()` with the `JsonProperty` annotation. Then it processes `Contact`, doesn't find `getCity()` in `methods` map and so creates a new `AnnotatedMethod` for `getCity()` with the one from the interface which has no annotation which replaces the one from `ContactMixin`


The workaround for this issue is to explicitly add any parent mixins to the module i.e.



```
module.setMixInAnnotation(Contact.class, ContactMixin.class);
```"
JacksonDatabind,6,Add Support for Parsing All Compliant ISO-8601 Date Formats,"Some providers create JSON date stamps in ISO-8601 formats that cannot be parsed by the jackson-databind library. Here is a sampling of some valid formats that do not parse correctly:


2014-10-03T18:00:00.6-05:00  

2014-10-03T18:00:00.61-05:00  

1997-07-16T19:20+01:00  

1997-07-16T19:20:30.45+01:00


The last two actually come from the ISO-8601 notes on <http://www.w3.org/TR/NOTE-datetime>."
JacksonDatabind,7,Possibly wrong TokenBuffer delegate deserialization using @JsonCreator,"```
class Value {
@JsonCreator
public static Value from(TokenBuffer buffer) {
...
}
```

Given JSON string is `{ ""a"":1, ""b"":null }`, it is expected that while deserializing using delegate buffer,  

current token will be start object `{`, and rest of the tokens will be available in buffer:



```
[START_OBJECT, FIELD_NAME, VALUE_NUMBER_INT, FIELD_NAME, VALUE_NULL, END_OBJECT]

```

But, buffers ends up being started with field name and then contains single attribute value



```
[FIELD_NAME, VALUE_NUMBER_INT]

```

It's due to how `TokenBuffer#copyCurrentStructure` works when we have current token as a `FIELD_NAME`, rather than `START_OBJECT`, because it's forced to move to next token [BeanDeserializer.java:120](https://github.com/FasterXML/jackson-databind/blob/2.4/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java#L120)


Hope this helps to nail it down. Is it an intended behavior, or it's regression/bug?"
JacksonDatabind,8,Problem with bogus conflict between single-arg-String vs CharSequence constructor,"Although it is good idea to allow recognizing `CharSequence` as almost like an alias for `String`, this can cause problems for classes like `StringBuilder` that have separate constructors for both.  

This actually throws a bogus exception for 2.5.0, due to introduction of ability to recognize `CharSequence`."
JacksonDatabind,11,Problem resolving locally declared generic type,"(reported by Hal H)


Case like:



```
class Something {
    public <T extends Ruleform> T getEntity()
    public <T extends Ruleform> void setEntity(T entity) 
}
```

appears to fail on deserialization."
JacksonDatabind,12,@JsonDeserialize on Map with contentUsing custom deserializer overwrites default behavior,"I recently updated from version 2.3.3 to 2.5.1 and encountered a new issue with our custom deserializers. They either seemed to stop working or were active on the wrong fields.  

I could narrow it down to some change in version 2.4.4 (2.4.3 is still working for me)


I wrote a test to show this behavior. It seems to appear when there a two maps with the same key and value types in a bean, and only one of them has a custom deserializer. The deserializer is then falsely used either for both or none of the maps.


This test works for me in version 2.4.3 and fails with higher versions.



```
import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.Map;

import org.junit.Test;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;

public class DeserializeTest {

    @Test
    public void testIt() throws Exception {
        ObjectMapper om = new ObjectMapper();
        String json = ""{\""map1\"":{\""a\"":1},\""map2\"":{\""a\"":1}}"";
        TestBean bean = om.readValue(json.getBytes(), TestBean.class);

        assertEquals(100, bean.getMap1().get(""a"").intValue());
        assertEquals(1, bean.getMap2().get(""a"").intValue());
    }

    public static class TestBean {

        @JsonProperty(""map1"")
        @JsonDeserialize(contentUsing = CustomDeserializer.class)
        Map<String, Integer> map1;

        @JsonProperty(""map2"")
        Map<String, Integer> map2;

        public Map<String, Integer> getMap1() {
            return map1;
        }

        public void setMap1(Map<String, Integer> map1) {
            this.map1 = map1;
        }

        public Map<String, Integer> getMap2() {
            return map2;
        }

        public void setMap2(Map<String, Integer> map2) {
            this.map2 = map2;
        }
    }

    public static class CustomDeserializer extends StdDeserializer<Integer> {

        public CustomDeserializer() {
            super(Integer.class);
        }

        @Override
        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            Integer value = p.readValueAs(Integer.class);
            return value \* 100;
        }
    }
}
```"
JacksonDatabind,16,Annotation bundles ignored when added to Mixin,"When updating from v 2.4.4 to 2.5.\* it appears as though annotation bundles created with `@JacksonAnnotationsInside` are ignored when placed on a mixin. Moving the annotation bundel to the actual class seems to resolve the issue. Below is a simple test that attempts to rename a property. I have more complicated test cases that are also failing but this should provide some context.



```
public class Fun {

    @Test
    public void test() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);
        String result = mapper.writeValueAsString(new Foo(""result""));
        Assert.assertEquals(""{\""bar\"":\""result\""}"", result);
    }

    @Target(value={ ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD })
    @Retention(value=RetentionPolicy.RUNTIME)
    @JacksonAnnotationsInside
    @JsonProperty(""bar"")
    public @interface ExposeStuff {

    }

    public abstract class FooMixin {
        @ExposeStuff
        public abstract String getStuff();
    }

    public class Foo {

        private String stuff;

        Foo(String stuff) {
            this.stuff = stuff;
        }

        public String getStuff() {
            return stuff;
        }
    }
}
```

I'm expecting the ""stuff"" property to be serialized as ""bar"".


I apologize I haven't been able to identify the culprit (and perhaps it's in my usage). Let me know your thoughts. I'm always happy to provide more details!"
JacksonDatabind,17,readTree does not work with defaultTyping enabled but no type info provided,"I have enabled `defaultTyping`, and serialized `Foo` entity with no type info. I'm trying to read json as a tree with `mapper.readTree(json)`, and it throws an exception



```
Exception in thread ""main"" com.fasterxml.jackson.databind.JsonMappingException: 
Unexpected token (START\_OBJECT), expected START\_ARRAY: need JSON Array to contain As.WRAPPER\_ARRAY 
type information for class com.fasterxml.jackson.databind.JsonNode
 at [Source: {
  ""bar"" : ""bar""
}; line: 1, column: 1]
    at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)
    at com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(DeserializationContext.java:927)
    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.\_locateTypeId(AsArrayTypeDeserializer.java:127)
    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.\_deserialize(AsArrayTypeDeserializer.java:93)
    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:68)
    at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:144)
    at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserializeWithType(JsonNodeDeserializer.java:14)
    at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)
    at com.fasterxml.jackson.databind.ObjectMapper.\_readMapAndClose(ObjectMapper.java:3562)
    at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2136)
    at test.App.main(App.java:23)
```

However, if I disable `defaultTyping`, the same code works fine. So, `readTree(json)` does not actually need type info for the root element, because it works when `defaultTyping` is disabled (i.e. `{""bar"" : ""bar""}`), but it throws the exception when `defaultTyping` is enabled, that's why it looks like a bug. The same thing happens for `valueToTree(foo)`.  

Jackson version is `2.5.3`  

Full code is provided.



```
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import java.io.IOException;

public class App {
    public static void main(String[] args) throws IOException {
        ObjectMapper mapper = new ObjectMapper()
                .enableDefaultTyping() // works fine with disableDefaultTyping()
                .enable(MapperFeature.AUTO\_DETECT\_GETTERS)
                .enable(MapperFeature.REQUIRE\_SETTERS\_FOR\_GETTERS)
                .disable(MapperFeature.USE\_GETTERS\_AS\_SETTERS)
                .disable(MapperFeature.CAN\_OVERRIDE\_ACCESS\_MODIFIERS)
                .enable(SerializationFeature.INDENT\_OUTPUT)
                .disable(SerializationFeature.FAIL\_ON\_EMPTY\_BEANS);

        Foo foo = new Foo(""bar"");
        String serialized = mapper.writeValueAsString(foo); // {""bar"" : ""bar""}

        JsonNode jsonNode = mapper.readTree(serialized); // exception here
        JsonNode node = mapper.valueToTree(foo); // and here
    }

    public static class Foo {
        private String bar;

        public Foo() {
        }

        public Foo(String bar) {
            this.bar = bar;
        }

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }
}
```"
JacksonDatabind,24,Configuring an ObjectMapper's DateFormat changes time zone when serialising Joda DateTime,"The serialisation of Joda `DateTime` instances behaves differently in 2.6.0 vs 2.5.4 when the `ObjectMapper`'s had its `DateFormat` configured. The behaviour change is illustrated by the following code:



```
public static void main(String[] args) throws JsonProcessingException {
    System.out.println(createObjectMapper()
            .writeValueAsString(new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC)));
}

private static ObjectMapper createObjectMapper() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(createJodaModule());
    mapper.configure(SerializationFeature.WRITE\_DATES\_AS\_TIMESTAMPS, false);
    System.out.println(mapper.getSerializationConfig().getTimeZone());
    mapper.setDateFormat(new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""));
    System.out.println(mapper.getSerializationConfig().getTimeZone());
    return mapper;
}

private static SimpleModule createJodaModule() {
    SimpleModule module = new SimpleModule();
    module.addSerializer(DateTime.class, new DateTimeSerializer(
            new JacksonJodaDateFormat(DateTimeFormat.forPattern(""yyyy-MM-dd HH:mm:ss"")
                    .withZoneUTC())));
        return module;
    }
```

When run with Jackson 2.5.4 the output is:



```
sun.util.calendar.ZoneInfo[id=""GMT"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
sun.util.calendar.ZoneInfo[id=""GMT"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
""1988-06-25 20:30:00""

```

When run with Jackson 2.6.0 the output is:



```
sun.util.calendar.ZoneInfo[id=""GMT"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
sun.util.calendar.ZoneInfo[id=""Europe/London"",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]]
""1988-06-25 21:30:00""

```

It looks like the fix for [#824](https://github.com/FasterXML/jackson-databind/issues/824) is the cause. In 2.6, the call to `mapper.setDateFormat` causes the `ObjectMapper`'s time zone to be set to the JVM's default time zone. In 2.5.x, calling `mapper.setDateFormat` has no effect on its time zone."
JacksonDatabind,27,Problem deserializing External Type Id if type id comes before POJO,"(note: seems to be similar or related to [FasterXML/jackson-module-afterburner#58](https://github.com/FasterXML/jackson-module-afterburner/issues/58))


With 2.6, looks like handling of External Type Id is broken in some rare (?) cases; existing unit tests did not catch this. At this point I am speculating this is due to some refactoring, or change to use more efficient 'nextFieldName()' method."
JacksonDatabind,28,"Deserialization from ""{}"" to ObjectNode field causes ""out of END_OBJECT token"" error","I found that deserializing from an empty object (`{}`) to ObjectNode field in a class field fails.


Here is the minimum code to reproduce:



```
public class Main
{
    public static class MyValue
    {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) { this.object = object; }

        @JsonValue
        public ObjectNode getObject() { return object; }
    }

    public static void main(String[] args)
            throws Exception
    {
        ObjectMapper om = new ObjectMapper();

        ObjectNode object = new ObjectNode(JsonNodeFactory.instance);

        String json = om.writeValueAsString(object);
        System.out.println(""json: ""+json);

        ObjectNode de1 = om.readValue(json, ObjectNode.class);  // this works
        System.out.println(""Deserialized to ObjectNode: ""+de1);

        MyValue de2 = om.readValue(json, MyValue.class);  // but this throws exception
        System.out.println(""Deserialized to MyValue: ""+de2);
    }
}
```

Result is:



```
json: {}
Deserialized to ObjectNode: {}
Exception in thread ""main"" com.fasterxml.jackson.databind.JsonMappingException: Can not func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef instance of com.fasterxml.jackson.databind.node.ObjectNode out of END_OBJECT token
 at [Source: {}; line: 1, column: 2]
        at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)
        at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:854)
        at com.fasterxml.jackson.databind.DeserializationContext.mappingException(DeserializationContext.java:850)
        at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ObjectDeserializer.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef(JsonNodeDeserializer.java:104)
        at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ObjectDeserializer.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef(JsonNodeDeserializer.java:83)
        at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9efFromObjectUsingNonDefault(BeanDeserializerBase.java:1095)
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9efFromObject(BeanDeserializer.java:294)
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef(BeanDeserializer.java:131)
        at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3731)
        at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2724)
        at Main.main(Main.java:35)

```

If the object is not empty (e.g. `{""k"":""v""}`), it works:



```
        ...
        ObjectNode object = new ObjectNode(JsonNodeFactory.instance);
        object.put(""k"", ""v"");  // added
        ...
```


```
json: {""k"":""v""}
Deserialized to ObjectNode: {""k"":""v""}
Deserialized to MyValue: io.digdag.cli.Main$MyValue@17550481

```

Environment:


* jackson-core 2.6.2
* jackson-databind 2.6.2
* Java 8 (`Java(TM) SE Runtime Environment (build 1.8.0_20-b26)`)"
JacksonDatabind,35,Problem with Object Id and Type Id as Wrapper Object (regression in 2.5.1),"(note: originally from [FasterXML/jackson-module-jaxb-annotations#51](https://github.com/FasterXML/jackson-module-jaxb-annotations/issues/51))


Looks like fix for [#669](https://github.com/FasterXML/jackson-databind/issues/669) caused a regression for the special use case of combining type and object ids, with wrapper-object type id inclusion. The problem started with 2.5.1."
JacksonDatabind,39,Jackson not continue to parse after DeserializationFeature.FAIL_ON_INVALID_SUBTYPE error,"After FAIL\_ON\_INVALID\_SUBTYPE error, jackson should continue to parse, but seems jackson doesn't.


The output:



```
CallRecord [version=0.0, application=123, ] // doesn't read item2 which is valid
CallRecord [version=0.0, application=123, ]
CallRecord [version=0.0, ] // doesn't read application after invalid item.

```


```
@JsonInclude(Include.NON_NULL)
public class CallRecord {
    public float version;
    public String application;
    public Item item;
    public Item item2;
    public CallRecord() {}

    public static void main(final String[] args) throws IOException {
        final ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);
        final CallRecord call = new CallRecord();

        final Event event = new Event();
        event.location = ""location1"";
        call.item = event;
        call.item2 = event;
        call.application = ""123"";
        // System.out.println(objectMapper.writeValueAsString(call));
        String json =
                ""{\""version\"":0.0,\""application\"":\""123\"",\""item\"":{\""type\"":\""xevent\"",\""location\"":\""location1\""},\""item2\"":{\""type\"":\""event\"",\""location\"":\""location1\""}}"";
        // can't read item2 - which is valid
        System.out.println(objectMapper.readValue(json, CallRecord.class));

        json = ""{\""version\"":0.0,\""application\"":\""123\""},{\""item\"":{\""type\"":\""xevent\"",\""location\"":\""location1\""}"";
        System.out.println(objectMapper.readValue(json, CallRecord.class));

        json = ""{\""item\"":{\""type\"":\""xevent\"",\""location\"":\""location1\""}, \""version\"":0.0,\""application\"":\""123\""}"";
        // order matters: move item to the fornt, now it can't read application property
        System.out.println(objectMapper.readValue(json, CallRecord.class));
    }
    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append(""CallRecord [version="").append(version).append("", "");
        if (application != null) {
            builder.append(""application="").append(application).append("", "");
        }
        if (item != null) {
            builder.append(""item="").append(item);
        }
        builder.append(""]"");
        return builder.toString();
    }
}

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = ""type"", visible = true)
@JsonSubTypes({@Type(value = Event.class, name = Event.TYPE)})
public interface Item {
}

public final class Event implements Item {
    public String location;
    public static final String TYPE = ""event"";
    public Event() {}
}

```"
JacksonDatabind,42,Serializing and Deserializing Locale.ROOT,"Serializing and Deserializing Locale objects seems to work just fine, until you try on the Root Locale.  

It writes it out as an empty string and when it reads it in, the value is null



```
@Test
    public void testLocaleDeserialization() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        Locale root = Locale.ROOT;
        String json = objectMapper.writeValueAsString(root);
        System.out.printf(""Root Locale: '%s'"", json);
        Locale actual = objectMapper.readValue(json, Locale.class);
        Assert.assertEquals(root, actual);
    }

```

Here is the output:  

Root Locale: '""""'  

java.lang.AssertionError:  

Expected :  

Actual :null"
JacksonDatabind,45,Fix for #1154,"Looks pretty good, but would it be possible to have a unit test that would fail before fix, pass after? Would be great to have something to guard against regression.


I may want to change the logic a little bit, however; if shape is explicitly defined as `NUMBER`, textual representation should not be enabled even if `Locale` (etc) happen to be specified: explicit shape value should have precedence. I can make that change, or you can do it, either way is fine.  

I'll also need to merge this again 2.7 branch instead of master, to get in 2.7.3."
JacksonDatabind,46,Incorrect signature for generic type via `JavaType.func_c1d5b5131066284ebcdba00fe0a4aabb71fcd8d57eda00b86a0f3e6ef529bcc5,"(see [FasterXML/jackson-modules-base#8](https://github.com/FasterXML/jackson-modules-base/issues/8) for background)


It looks like generic signature generation is missing one closing `>` character to produce:



```
()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;;

```

instead of expected



```
()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;

```

that is, closing '>' is missing."
JacksonDatabind,47,@JsonSerialize(as=superType) behavior disallowed in 2.7.4,"[#1178](https://github.com/FasterXML/jackson-databind/issues/1178) fixed the problem with collections, but I'm seeing a problem with individual objects.


I'm getting:



```
com.fasterxml.jackson.databind.JsonMappingException: Failed to widen type [simple type, class org.pharmgkb.model.AccessionIdentifier] with annotation (value org.pharmgkb.model.BaseAccessionIdentifier), from 'getReference': Class org.pharmgkb.model.BaseAccessionIdentifier not a super-type of [simple type, class org.pharmgkb.model.AccessionIdentifier]

    at com.fasterxml.jackson.databind.AnnotationIntrospector.func_7d76a8448e8fd1e71afb6fb1ed9733f62fbb24453f753cfbc373452ac17debaf(AnnotationIntrospector.java:821)
    at com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.func_7d76a8448e8fd1e71afb6fb1ed9733f62fbb24453f753cfbc373452ac17debaf(AnnotationIntrospectorPair.java:488)
    at com.fasterxml.jackson.databind.ser.PropertyBuilder.findSerializationType(PropertyBuilder.java:194)
    at com.fasterxml.jackson.databind.ser.PropertyBuilder.buildWriter(PropertyBuilder.java:73)
    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._constructWriter(BeanSerializerFactory.java:805)
    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties(BeanSerializerFactory.java:608)
    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(BeanSerializerFactory.java:388)
    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(BeanSerializerFactory.java:271)
    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:223)
    at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:157)
    at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1215)
    at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1167)
    at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:490)
    at com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:688)
    at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:107)
    at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1428)
    at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1129)
    at com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(ObjectWriter.java:1001)
    at org.pharmgkb.jackson.JacksonTest.testModelObjects(JacksonTest.java:48)

```

On something like:



```
public class Foo {
  @JsonSerialize(as = BaseAccessionIdentifier.class)
  @JsonDeserialize(as = BaseAccessionIdentifier.class)
  public AccessionIdentifier getReference() {
  }
}

```


```
public interface AccessionIdentifier {
}

```


```
public class BaseAccessionIdentifier implements AccessionIdentifier {
}

```"
JacksonDatabind,49,JsonIdentityInfo incorrectly serializing forward references,"I wrote this small test program to demonstrate the issue:



```
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ObjectIdTest {

    public static class Foo {

        @JsonIdentityReference(alwaysAsId = true)
        public Bar bar1;

        @JsonIdentityReference()
        public Bar bar2;
    }

    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)
    public static class Bar {

    }

    public static void main(String[] args) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // create structure to serialize
        Foo mo = new Foo();
        mo.bar1 = new Bar();
        mo.bar2 = mo.bar1;

        // serialize it
        System.out.println(mapper.writeValueAsString(mo));
    }

}
```

When executing this test program in the latest version (2.7.4), the output will be `{""bar1"":1,""bar2"":{""@id"":2}}` - the second field will be written with a new id even though both fields reference the same object. Because of this, writing forward references is essentially impossible.


The issue seems to be the fact that BeanSerializerBase will always call WritableObjectId.func_a1c79f42888ac705582981e709760442512468ea913a86586c27a8f7b978010c if the referenced object has not been written in plain format yet (<https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java#L600>). This will also happen if an id has been generated before.  

It might also be smarter to only generate a new id in WritableObjectId.func_a1c79f42888ac705582981e709760442512468ea913a86586c27a8f7b978010c if that hasn't happened before; as that method doesn't have a javadoc I can't tell how it is supposed to work."
JacksonDatabind,51,Generic type returned from type id resolver seems to be ignored,"<https://github.com/benson-basis/jackson-custom-mess-tc>


Here's the situation, with Jackson 2.7.4.


I have a TypeIdResolver that returns a JavaType for a generic type. However, something seems to be forgetting/erasing the generic, as it is failing to use the generic type param to understand the type of a field in the class.


All the information is in the test case, so I'm not putting any code to read here in the issue."
JacksonDatabind,54,Optional.empty() not excluded if property declared with type Object,"Jackson version is 2.6.6  

**Here is the code:**



```
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);
        mapper.registerModule(new Jdk8Module());

        JsonResult result = new JsonResult();
        result.setA(Optional.empty());
        result.setB(Optional.empty());
        System.out.println(mapper.writeValueAsString(result));

```


```
@Data
public class JsonResult {
    private Object a;
    private Optional<Object> b;
}

```

**Then I got the output: {""a"":null}**


**The real value of both is the same, why the results are different?**


**How can I avoid null in such case?**


By the way, I tried 'NON\_EMPTY'. It can work, but it also ignores zero and empty array. I want to keep them."
JacksonDatabind,57,ObjectReader.func_585b84003536ef745dc044dffc9ed0e0af308393152b9219bcc9b85f376f291a() ignores offset and length when reading an array,"ObjectReader.func_585b84003536ef745dc044dffc9ed0e0af308393152b9219bcc9b85f376f291a ignores offset and length when reading an array. If \_dataFormatReaders it will always use the full array:


<https://github.com/FasterXML/jackson-databind/blob/2.7/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java#L1435>"
JacksonDatabind,58,"@JsonIgnoreProperties: ignoring the ""cause"" property of Throwable on GAE","Deserializing an exception class from json on Google App Engine causes this error:



```
Caused by: java.lang.IllegalArgumentException: Can not access private java.lang.Throwable java.lang.Throwable.cause (from class java.lang.Throwable; failed to set access: java.lang.IllegalAccessException: Reflection is not allowed on private java.lang.Throwable java.lang.Throwable.cause
    at com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:505)
    at com.fasterxml.jackson.databind.introspect.AnnotatedMember.fixAccess(AnnotatedMember.java:123)
    at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.func_783a93ffe6760977a04fe7f321301fde45469f1857519ea0105ae07f842215e9(BeanDeserializerFactory.java:704)
    at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(BeanDeserializerFactory.java:501)
    at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer(BeanDeserializerFactory.java:356)
    at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:114)

```

I tried preventing this by using `@JsonIgnoreProperties`:



```
@JsonIgnoreProperties(""cause"")
public class MyException extends RuntimeException { ... }
```

... but the same error still occurs. What am I doing wrong? What else could I do?


I've also considered setting `MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS` to false, but I don't like this solution because I need this setting to be `true` in some other cases (in particular, I provide no-arg constructors for Jackson, but they should't be public in my API)."
JacksonDatabind,62,Custom UnmodifiableSetMixin Fails in Jackson 2.7+ but works in Jackson 2.6,"I'd like to be able to deserialize an `UnmodifiableSet` with default typing enabled. To do this I have created an `UnmodifiableSetMixin` as shown below:


**NOTE**: You can find a minimal project with all the source code to reproduce this issue at <https://github.com/rwinch/jackson-unmodifiableset-mixin>



```
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import java.util.Set;

@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
public abstract class UnmodifiableSetMixin {

    @JsonCreator
    public UnmodifiableSetMixin(Set<?> s) {}
}
```

I then try to use this to deserialize an empty set.



```
public class UnmodifiableSetMixinTest {
    static final String EXPECTED\_JSON = ""[\""java.util.Collections$UnmodifiableSet\"",[]]"";

    ObjectMapper mapper;

    @Before
    public void setup() {
        mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON\_FINAL, JsonTypeInfo.As.PROPERTY);
        mapper.addMixIn(Collections.unmodifiableSet(Collections.<String>emptySet()).getClass(), UnmodifiableSetMixin.class);
    }    
    @Test
    @SuppressWarnings(""unchecked"")
    public void read() throws Exception {
        Set<String> foo = mapper.readValue(EXPECTED\_JSON, Set.class);
        assertThat(foo).isEmpty();
    }
}
```

The test passes with Jackson 2.6, but fails using Jackson 2.7+ (including Jackson 2.8.3) with the following stack trace:



```
java.lang.IllegalStateException: No default constructor for [collection type; class java.util.Collections$UnmodifiableSet, contains [simple type, class java.lang.Object]]
    at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDefault(StdValueInstantiator.java:240)
    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:249)
    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:26)
    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:110)
    at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray(AsArrayTypeDeserializer.java:50)
    at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserializeWithType(CollectionDeserializer.java:310)
    at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:42)
    at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3788)
    at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2779)
    at sample.UnmodifiableSetMixinTest.read(UnmodifiableSetMixinTest.java:36)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

```

This seems like a passivity issue. Is there a workaround for this problem?"
JacksonDatabind,63,Reference-chain hints use incorrect class-name for inner classes,"```
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static com.google.common.truth.Truth.assertThat;
import static org.junit.jupiter.api.Assertions.expectThrows;

public class ReferenceChainTest {
    // illustrates that jackson's ""reference chain"" help-text uses incorrect class-names for inner classes
    @Test public void incorrectReferenceChain() throws IOException {
        JsonMappingException jsonMappingException = expectThrows(JsonMappingException.class, () -> {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.readValue(objectMapper.writeValueAsBytes(new Outer()), Outer.class);
        });
        JsonMappingException.Reference reference = jsonMappingException.getPath().get(0);
        assertThat(reference.toString()).isEqualTo(""ReferenceChainTest$Outer[\""inner\""]"");
    }

    static class Outer {
        public Inner inner = new Inner();
    }

    static class Inner {
        public int x;

        @JsonCreator public static Inner create(@JsonProperty(""x"") int x) {
            throw new RuntimeException(""test-exception"");
        }
    }
}
```"
JacksonDatabind,64,Further issues with @JsonInclude with NON_DEFAULT,"(follow-up to [#1351](https://github.com/FasterXML/jackson-databind/issues/1351))


Looks like there are still cases where class annotation like:



```
@JsonInclude(JsonInclude.Include.NON_DEFAULT)

```

does not work for default `null` value suppression for `String` type (at least)."
JacksonDatabind,67,Map key deserializerModifiers ignored,"We have a module that extends simple model to allow us to accept enum names in lower case in a fairly generic manner  

Inside that we add the `modifyKeyDeserializer`


The incoming class (using immutables) is mapped to a guava immutable map.  

Walking through the code:



> 
> com.fasterxml.jackson.datatype.guava.deser.ImmutableMapDeserializer.createContextual  
> 
> calls DeserializationContext.findKeyDeserializer  
> 
> calls DeserializerCache.findKeyDeserializer  
> 
> calls BasicDeserializerFactory.func_4ab6d553096e91b70fb7ddd5f2392e6383c4fb9580c5b4ee770051a4538b1904
> 
> 
> 


which has the code:



```
        // the only non-standard thing is this:
        if (deser == null) {
            if (type.isEnumType()) {
                return \_createEnumKeyDeserializer(ctxt, type);
            }
            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
        }
```

Since we are an enum type, it returns the value in the `_createEnumKeyDeserializer`, which is the standard enum deserializer.  

Below that block is the check for the hasDeserializerModifiers, but since we have returned already, it is never called, so we can't override the behaviour.


Module fragment:



```
    setDeserializerModifier(new BeanDeserializerModifier() {
                @Override
                @SuppressWarnings(""unchecked"")
                public JsonDeserializer<Enum> modifyEnumDeserializer(
                        DeserializationConfig config,
                        final JavaType type,
                        BeanDescription beanDesc,
                        final JsonDeserializer<?> deserializer) {
                    return new JsonDeserializer<Enum>() {
                        @Override
                        public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());
                        }
                    };
                }

                @Override
                public KeyDeserializer modifyKeyDeserializer(
                        DeserializationConfig config,
                        JavaType type,
                        KeyDeserializer deserializer) {
                    if (!type.isEnumType()) {
                        return super.modifyKeyDeserializer(config, type, deserializer);
                    }
                    return new KeyDeserializer() {
                        @Override
                        @SuppressWarnings(""unchecked"")
                        public Object deserializeKey(String key, DeserializationContext ctxt)
                                throws IOException, JsonProcessingException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, key.toUpperCase());
                        }
                    };
                }
            });
```

I appreciate the code around here is fairly complex.


Related issues (possibly):  

[#749](https://github.com/FasterXML/jackson-databind/issues/749)  

[#1313](https://github.com/FasterXML/jackson-databind/issues/1313)"
JacksonDatabind,70,ACCEPT_CASE_INSENSITIVE_PROPERTIES fails with @JsonUnwrapped,"(note: moved from [FasterXML/jackson-dataformat-csv#133](https://github.com/FasterXML/jackson-dataformat-csv/issues/133))


When trying to deserialize type like:



```
public class Person {
  @JsonUnwrapped(prefix = ""businessAddress."")
  public Address businessAddress;
}

public class Address {
  public String street;
  public String addon;
  public String zip = """";
  public String town;    
  public String country;
}
```

with case-insensitive mapper (`mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);`) I get exception:



```
java.util.NoSuchElementException: No entry 'businessAddress' found, can't func_7e5608ab610017afe6c1894fdd4f56848823dcb1d12302bd49751d16a290f774
	at com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.func_7e5608ab610017afe6c1894fdd4f56848823dcb1d12302bd49751d16a290f774(BeanPropertyMap.java:447)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:534)
	at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)
   ...

```"
JacksonDatabind,74,AsPropertyTypeDeserializer ignores DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,The `AsPropertyTypeDeserializer`  implementation does not respect the `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` feature. When deserializing an empty String it throws `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` instead of creating a null Object.
JacksonDatabind,76,Missing properties when deserializing using a builder class with a non-default constructor and a mutator annotated with @JsonUnwrapped,"When deserializing using a builder class with a non-default constructor and any number of mutator methods annotated with @JsonUnwrapped, the `BuilderBasedDeserializer::func_dd42f724781d7717ebdf88343e04fa234d4a12aaaa897a68a24f79f960eecae1` method cuts short the process of adding SettableBeanProperties.


The logic dictates that once all properties necessary to construct the builder have been found, the builder is constructed using all known SettableBeanProperties that have been found up to that point in the tokenizing process.


Therefore, in the case that the builder has a single property required for construction, and that property is found anywhere other than at the end of the JSON content, any properties subsequent to the constructor property are not evaluated and are left with their default values.


Given the following classes:



```
@JsonDeserialize(builder = Employee.Builder.class)
public class Employee {
    private final long id;
    private final Name name;
    private final int age;

    private Employee(Builder builder) {
        id = builder.id;
        name = builder.name;
        age = builder.age;
    }

    public long getId() {
        return id;
    }

    public Name getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @JsonPOJOBuilder(withPrefix = ""set"")
    public static class Builder {
        private final long id;
        private Name name;
        private int age;

        @JsonCreator
        public Builder(@JsonProperty(""emp\_id"") long id) {
            this.id = id;
        }

        @JsonUnwrapped
        public void setName(Name name) {
            this.name = name;
        }

        @JsonProperty(""emp\_age"")
        public void setAge(int age) {
            this.age = age;
        }

        public Employee build() {
            return new Employee(this);
        }
    }
}

public class Name {
    private final String first;
    private final String last;

    @JsonCreator
    public Name(
        @JsonProperty(""emp\_first\_name"") String first,
        @JsonProperty(""emp\_last\_name"") String last
    ) {
        this.first = first;
        this.last = last;
    }

    public String getFirst() {
        return first;
    }

    public String getLast() {
        return last;
    }
}
```

And given the following JSON string:



```
{
    ""emp\_age"": 30,
    ""emp\_id"": 1234,
    ""emp\_first\_name"": ""John"",
    ""emp\_last\_name"": ""Doe""
}
```

We will see the following output:



```
Employee emp = new ObjectMapper().readValue(json, Employee.class);

System.out.println(emp.getAge()); // 30
System.out.println(emp.getId()); // 1234
System.out.println(emp.getName()); // null
```

However, if we place the `emp_id` property at the end of the JSON string, we would get the following output:



```
Employee emp = new ObjectMapper().readValue(json, Employee.class);

System.out.println(emp.getAge()); // 30
System.out.println(emp.getId()); // 1234
System.out.println(emp.getName()); // Name Object
```

If we were to place `emp_age` and `emp_first_name` and `emp_last_name` all after the `emp_id` property in the JSON string, we would get the following output:



```
Employee emp = new ObjectMapper().readValue(json, Employee.class);

System.out.println(emp.getAge()); // 0
System.out.println(emp.getId()); // 1234
System.out.println(emp.getName()); // null
```"
JacksonDatabind,82,JsonIgnoreProperties.allowSetters is not working in Jackson 2.8,"```
@JsonIgnoreProperties(value = { ""password"" }, ignoreUnknown = true, allowSetters = true)
public class JsonTest {
	private String username;
	private String password;

	public JsonTest() {
		super();
		// TODO Auto-generated constructor stub
	}

	public JsonTest(String username, String password) {
		super();
		this.username = username;
		this.password = password;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public static void main(String[] args) {
		ObjectMapper mapper = new ObjectMapper();

		JsonTest json = new JsonTest(""user"", ""password"");

		try {
			System.out.println(mapper.writeValueAsString(json));
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String jsonString = ""{ \""username\"":\""username\"",\""password\"":\""password\"" }"";
		try {
			json = mapper.readValue(jsonString, JsonTest.class);

			System.out.println(json.getPassword());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}

```

the version is 2.8.7.  

the password cannot deserialize.  

the output is:  

{""username"":""user""}  

null"
JacksonDatabind,83,FromStringDeserializer ignores registered DeserializationProblemHandler for java.util.UUID,"Culprit appears to be [lines 155-161 of FromStringDeserializer](https://github.com/FasterXML/jackson-databind/blob/60ae6000d361f910ab0d7d269a5bac1fc66f4cd9/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java#L155-L161):



```
            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
            if (cause != null) {
                e.initCause(cause);
            }
            throw e;
            // nothing to do here, yet? We'll fail anyway

```

The above lines appear to show that the exception will be thrown regardless of any problem handling logic.


Test Case:



```
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

public class UUIDDeserializerTest {


  @Test
  public void itUsesDeserializationProblemHandlerProperly() throws IOException {
    ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {
      @Override
      public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {
        return null;
      }
    });

    mapper.readValue(""{\""id\"" : \""I am not a UUID\""}"", IdBean.class);



  }

  public static class IdBean {
    private UUID id;

    public UUID getId() {
      return id;
    }

    public void setId(final UUID id) {
      this.id = id;
    }
  }
}

```

The handler handles the issue properly; but an exception is thrown anyway:



```
an not func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef value of type java.util.UUID from String ""I am not a UUID"": not a valid textual representation
 at [Source: (String)""{""id"" : ""I am not a UUID""}""; line: 1, column: 9] (through reference chain: com.company.test.UUIDDeserializerTest$IdBean[""id""])
com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef value of type java.util.UUID from String ""I am not a UUID"": not a valid textual representation
 at [Source: (String)""{""id"" : ""I am not a UUID""}""; line: 1, column: 9] (through reference chain: com.company.test.UUIDDeserializerTest$IdBean[""id""])
	at com.fasterxml.jackson.databind.exc.InvalidFormatException.from(InvalidFormatException.java:67)
	at com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(DeserializationContext.java:1504)
	at com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef(FromStringDeserializer.java:156)
	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9efAndSet(MethodProperty.java:127)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:287)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.func_3ef7bf7f4c1cd006818ce9adec9eb72d84c1ea317a8b4ab197c49791f7e7d9ef(BeanDeserializer.java:151)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:3999)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2980)

```"
JacksonDatabind,85,DateTimeSerializerBase ignores configured date format when creating contextual,"`DateTimeSerializerBase#func_23381e48edd64361fa64570e98b9cb14a3292cd2f07a01f2e4084d1f665d2f3b` creates a new serializer with `StdDateFormat.DATE_FORMAT_STR_ISO8601` format instead of re-using the actual format that may have been specified on the configuration. See the following code:



```
final String pattern = format.hasPattern()
                                    ? format.getPattern()
                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;

```

Using the `@JsonFormat` annotation on a field will therefore reset the format to Jackson's default even if the annotation doesn't specify any custom format.


`DateBasedDeserializer#func_23381e48edd64361fa64570e98b9cb14a3292cd2f07a01f2e4084d1f665d2f3b` behaves differently and tries to re-use the configured format:



```
DateFormat df = ctxt.getConfig().getDateFormat();
// one shortcut: with our custom format, can simplify handling a bit
if (df.getClass() == StdDateFormat.class) {
   ...
   StdDateFormat std = (StdDateFormat) df;
   std = std.withTimeZone(tz);
   ...
} else {
  // otherwise need to clone, re-set timezone:
  df = (DateFormat) df.clone();
  df.setTimeZone(tz);
}

```

Shouldn't the serializer follow the same approach ?"
JacksonDatabind,88,Missing type checks when using polymorphic type ids,"(report by Lukes Euler)


`JavaType` supports limited amount of generic typing for textual representation, originally just to support typing needed for `EnumMap` (I think). Based on some reports, it appears that some of type compatibility checks are not performed in those cases; if so, they should be made since there is potential for abuse.  

The problem here although actual type assignment will fail later on, ability to trigger some of processing (instantiation of incompatible classes, perhaps assingnment of properties) may itself be vulnerability."
JacksonDatabind,91,2.9.2 deserialization regression,"There seems to be a regression in the latest 2.9.2 release.


Using `org.apache.logging.log4j.core.jackson.Log4jJsonObjectMapper` from `org.apache.logging.log4j:log4j-core:2.9.1` to deserialize the appended JSON object is throwing an exception with 2.9.2 but worked with 2.9.1.


`org.apache.logging.log4j.core.jackson.Log4jYamlObjectMapper` and `org.apache.logging.log4j.core.jackson.Log4jXmlObjectMapper` fail in similar ways.


### inputString



```
{
  ""timeMillis"" : 1493121664118,
  ""thread"" : ""main"",
  ""threadId"" : 1,
  ""threadPriority"" : 5,
  ""level"" : ""INFO"",
  ""loggerName"" : ""HelloWorld"",
  ""marker"" : {
    ""name"" : ""child"",
    ""parents"" : [ {
      ""name"" : ""parent"",
      ""parents"" : [ {
        ""name"" : ""grandparent""
      } ]
    } ]
  },
  ""message"" : ""Hello, world!"",
  ""thrown"" : {
    ""commonElementCount"" : 0,
    ""message"" : ""error message"",
    ""name"" : ""java.lang.RuntimeException"",
    ""extendedStackTrace"" : [ {
      ""class"" : ""logtest.Main"",
      ""method"" : ""main"",
      ""file"" : ""Main.java"",
      ""line"" : 29,
      ""exact"" : true,
      ""location"" : ""classes/"",
      ""version"" : ""?""
    } ]
  },
  ""contextStack"" : [ ""one"", ""two"" ],
  ""loggerFqcn"" : ""org.apache.logging.log4j.spi.AbstractLogger"",
  ""endOfBatch"" : false,
  ""contextMap"" : {
    ""bar"" : ""BAR"",
    ""foo"" : ""FOO""
  },
  ""source"" : {
    ""class"" : ""logtest.Main"",
    ""method"" : ""main"",
    ""file"" : ""Main.java"",
    ""line"" : 29
  }
}
```

### Exception



```
org.apache.logging.log4j.core.parser.ParseException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `org.apache.logging.log4j.Level` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('INFO')
 at [Source: (byte[])""{
  ""timeMillis"" : 1493121664118,
  ""thread"" : ""main"",
  ""threadId"" : 1,
  ""threadPriority"" : 5,
  ""level"" : ""INFO"",
  ""loggerName"" : ""HelloWorld"",
  ""marker"" : {
    ""name"" : ""child"",
    ""parents"" : [ {
      ""name"" : ""parent"",
      ""parents"" : [ {
        ""name"" : ""grandparent""
      } ]
    } ]
  },
  ""message"" : ""Hello, world!"",
  ""thrown"" : {
    ""commonElementCount"" : 0,
    ""message"" : ""error message"",
    ""name"" : ""java.lang.RuntimeException"",
    ""extendedStackTrace"" : [ {
      ""clas""[truncated 482 bytes]; line: 6, column: 13] (through reference chain: org.apache.logging.log4j.core.impl.Log4jLogEvent[""level""])

```

### parsing pseudo code



```
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.parser.LogEventParser;
import org.apache.logging.log4j.core.parser.JsonLogEventParser;
import java.nio.charset.StandardCharsets;

LogEventParser parser = new JsonLogEventParser();
LogEvent result = parser.parseFrom(inputString.getBytes(StandardCharsets.UTF\_8));
assert result != null;
```"
JacksonDatabind,96,Implicit constructor property names are not renamed properly with PropertyNamingStrategy,"(note: spin-off from [FasterXML/jackson-modules-java8#67](https://github.com/FasterXML/jackson-modules-java8/issues/67))


Looks like something with linking of creator properties (constructor arguments for annotated/discovered constructor) to ""regular"" properties does not work when using `PropertyNamingStrategy`. Apparently this was working better until 2.9.1, but broke with 2.9.2."
JacksonDatabind,97,Context attributes are not passed/available to custom func_010e98269cdf95fbc494a106e1f903a326f81dd0e05db5a99edd182af5e39685r if object is in POJO,"Below is a test case where I create a custom func_010e98269cdf95fbc494a106e1f903a326f81dd0e05db5a99edd182af5e39685r and use it to func_010e98269cdf95fbc494a106e1f903a326f81dd0e05db5a99edd182af5e39685 an object 1) in a HashMap and 2) in an ObjectNode. In both cases I pass attribute to the func_010e98269cdf95fbc494a106e1f903a326f81dd0e05db5a99edd182af5e39685r like this:  

`mapper.writer().withAttribute(""myAttr"", ""Hello!"")`  

Serializing HashMap works as expected, but during ObjectNode serialization the attribute is null . It seems that in both cases the custom func_010e98269cdf95fbc494a106e1f903a326f81dd0e05db5a99edd182af5e39685r should get access to the passed attribute and so both lines in the output should contain ""Hello!""


Produced output from running testCase.test()



```
{""data"":{""aStr"":""The value is: Hello!""}}
{""data"":{""aStr"":""The value is: NULL""}}


```

Test case:



```
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class TestCase {
  public final static ObjectMapper mapper = new ObjectMapper();

  @JsonSerialize(using = TestCase.CustomSer.class)
  public static class Data {
    public String aStr;
  }

  public static class CustomSer extends StdSerializer<Data> {
    public CustomSer() {
      super(Data.class);
    }

    @Override
    public void func_010e98269cdf95fbc494a106e1f903a326f81dd0e05db5a99edd182af5e39685(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {
      String attrStr = (String) provider.getAttribute(""myAttr"");
      gen.writeStartObject();
      gen.writeObjectField(""aStr"", ""The value is: "" + (attrStr == null ? ""NULL"" : attrStr));
      gen.writeEndObject();
    }
  }

  public static void test() throws IOException {
    Data data = new Data();
    data.aStr = ""Hello"";

    Map<String, Object> mapTest = new HashMap<>();
    mapTest.put(""data"", data);

    ObjectNode treeTest = mapper.createObjectNode();
    treeTest.putPOJO(""data"", data);

    String mapOut = mapper.writer().withAttribute(""myAttr"", ""Hello!"").writeValueAsString(mapTest);
    System.out.println(mapOut);

    String treeOut = mapper.writer().withAttribute(""myAttr"", ""Hello!"").writeValueAsString(treeTest);
    System.out.println(treeOut);
  }
}


```"
JacksonDatabind,99,Canonical string for reference type is built incorrectly,"Canonical string for reference type is built incorrectly.  

E.g.:  

`new ReferenceType(new TypeFactory(new LRUMap<Object, JavaType>(0, 10000)).constructType(Object.class), new PlaceholderForType(0)).toCanonical()`  

yields:  

`java.lang.Object<$1`  

while the expected value is:  

`java.lang.Object<$1>`"
JacksonDatabind,100,TreeTraversingParser does not take base64 variant into account,"This affects at least 2.6.4 to current versions. In [TreeTraversingParser#func_d62b7b27e170c6cde59393abe337215b2391f9b616a84314e3a834929567dbca](https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java#L348), a `Base64Variant` is accepted but ignored. The call to `n.binaryValue()`, when `n` is a `TextNode`, then uses the default Base64 variant instead of what's specified. It seems the correct behavior would be to call `TextNode#func_d62b7b27e170c6cde59393abe337215b2391f9b616a84314e3a834929567dbca` instead."
JacksonDatabind,101,@JsonUnwrapped fields are skipped when using PropertyBasedCreator if they appear after the last creator property,"Example:



```
    static class Bean {
        int x;
        int y;

        @JsonUnwrapped
        UnwrappedBean w;

        public Bean(@JsonProperty(""x"") int x, @JsonProperty(""y"") int y) {
            this.x = x;
            this.y = y;
        }

        public void setW(UnwrappedBean w) {
            this.w = w;
        }
    }

    static class UnwrappedBean {
        int a;
        int b;

        public UnwrappedBean(@JsonProperty(""a"") int a, @JsonProperty(""b"") int b) {
            this.a = a;
            this.b = b;
        }
    }
```


```
    {""x"": 1, ""a"": 2, ""y"": 3, ""b"": 4}
```

`x`, `y`, and `a` are deserialized as expected. `b` is skipped entirely. I think I've found the root cause and the fix doesn't appear to break any tests; opening a PR for further review."
JacksonDatabind,102,Cannot set custom format for SqlDateSerializer globally,"Version: 2.9.5


After [#219](https://github.com/FasterXML/jackson-databind/issues/219) was fixed, the default format for `java.sql.Date` serialization switched from string to numeric, following the default value of `WRITE_DATES_AS_TIMESTAMPS`.


In order to prevent breaks, I want `java.sql.Date` to serialize as a string, without changing behavior for `java.util.Date` (which has always serialized as a number by default).


According to [#219 (comment)](https://github.com/FasterXML/jackson-databind/issues/219#issuecomment-370690333), I should be able to revert the behavior for `java.sql.Date` only with



```
final ObjectMapper mapper = new ObjectMapper();
mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern(""yyyy-MM-dd""));

```

This doesn't seem to do anything, though. Looking at the code, it looks like it's because the custom format isn't actually added to `SqlDateSerializer` except in the `func_23381e48edd64361fa64570e98b9cb14a3292cd2f07a01f2e4084d1f665d2f3b` method (<https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java#L59>).


For now, I've reverted this behavior with



```
mapper.registerModule(new SimpleModule() {
            {
                addSerializer(
                        java.sql.Date.class,
                        new SqlDateSerializer().withFormat(false, new SimpleDateFormat(""yyyy-MM-dd""))
                );
            }
        });

```

but it seems pretty hacky so I'd prefer the other method if possible."
JacksonDatabind,107,"DeserializationProblemHandler.handleUnknownTypeId() returning Void.class, enableDefaultTyping causing NPE","Returning Void.class from com.fasterxml.jackson.databind.deser.HandleUnknowTypeIdTest.testDeserializationWithDeserializationProblemHandler().new DeserializationProblemHandler() {...}.handleUnknownTypeId(DeserializationContext, JavaType, String, TypeIdResolver, String) is causing a NPE in jackson 2.9. I'll provide a pull request illustrating the issue in a test."
JacksonDatabind,112,StringCollectionDeserializer fails with custom collection,"Seeing this with Jackson 2.9.8.


We have a custom collection implementation, which is wired to use its ""immutable"" version for deserialization. The rationale is that we don't want accidental modifications to the data structures that come from the wire, so they all are forced to be immutable.


After upgrade from 2.6.3 to 2.9.8, the deserialization started breaking with the message:



> 
> Cannot construct instance of `XXX` (although at least one Creator exists): no default no-arguments constructor found
> 
> 
> 


This happens ONLY when you deserialize a custom collection of strings as a property of the other object. Deserializing the custom collection of strings directly works fine, and so does the deserialization of custom collection of non-strings. I believe either the `StringCollectionDeserializer` should not be invoked for custom collections, or perhaps it does not handle the delegation as expected.


Please see comments for repro and workaround.


Thanks!"
Jsoup,1,Parsing a HTML snippet causes the leading text to be moved to back,"Code:



```
String html = ""foo <b>bar</b> baz"";
String text = Jsoup.parse(html).text();
System.out.println(text);

```

Result:



```
bar baz foo

```

Expected:



```
foo bar baz

```"
Jsoup,2,Unadorned text following data-only tags doesn't parse properly,"This HTML, parsed and immediately printed out, results in:


<html>  

<body>  

<script type=""text/javascript"">  

var inside = true;  

</script>  

this should be outside.  

</body>  

</html>


Results:


<html>  

<head>  

</head>  

<body>  

<script type=""text/javascript"">  

var inside = true;


this should be outside.


</script>  

</body>  

</html>


Note how ""this should be outside"" ends up inside the <script> tag, instead of following it. From what I can tell, this only happens to data-only tags."
Jsoup,5,StringIndexOutOfBoundsException when testing whether String content is valid HTML,"If I try to parse a tag with an equals sign (an empty attribute) but without any single or double quotes around an attribute value, then I get a StringIndexOutOfBoundsException. The stack trace is pasted below.


An example String would be ""<a =a""


The following JUnit test case should not throw a StringIndexOutOfBoundsException:


import static org.junit.Assert.assertTrue;  

import org.jsoup.Jsoup;  

import org.jsoup.safety.Whitelist;  

import org.junit.Test;  

public class BadAttributeTest {  

[@test](https://github.com/test)  

public void aTagWithABadAttributeIsValid() throws Exception {  

assertTrue(Jsoup.isValid(""<a =a"", Whitelist.relaxed()));  

}  

}


java.lang.StringIndexOutOfBoundsException: String index out of range: 13  

at java.lang.String.charAt(String.java:686)  

at org.jsoup.parser.TokenQueue.consume(TokenQueue.java:130)  

at org.jsoup.parser.Parser.func_66f5512d71628f906b6a81a1aebbbc9f3a3e56907ad5f5cb0255c7de5548acab(Parser.java:207)  

at org.jsoup.parser.Parser.parseStartTag(Parser.java:142)  

at org.jsoup.parser.Parser.parse(Parser.java:91)  

at org.jsoup.parser.Parser.parseBodyFragment(Parser.java:64)  

at org.jsoup.Jsoup.parseBodyFragment(Jsoup.java:99)  

at org.jsoup.Jsoup.isValid(Jsoup.java:155)"
Jsoup,10,"attr(""abs:href"") , func_c94df26f76e1a98ee34baf5322fd4134addaf3247db8d25710e01cb0888693ed(""href"")","Document doc = Jsoup.parse(new URL(""<http://www.oschina.net/bbs/thread/12975>""), 5\*1000);  

Elements es = doc.select(""a[href]"");  

for(Iterator it = es.iterator();it.hasNext();){  

Element e = it.next();  

System.out.println(e.func_c94df26f76e1a98ee34baf5322fd4134addaf3247db8d25710e01cb0888693ed(""href""));  

}


attr(""abs:href"") ------ <a href=""?p=1"">1</a>  

result: ------------------- <http://www.oschina.net/bbs/thread/?p=1>


I think it's a wrong result~.  

The correct results should be ""<http://www.oschina.net/bbs/thread/12975?p=1>"""
Jsoup,13,abs: attribute prefix does not work on Elements.attr(),"Elements.attr() iterates on its element to look for the first one with the given attrbute.


If I try to get the attribute abs:href, the test element.func_fe64b11c32bf5a63de33a2892307c08e4a9db5d483de86a6d8d465cba6b27ca4(""abs:herf"") fails, and the returned value is an empty string."
Jsoup,19,Cleaning html containing the cid identifier breaks images,"Ok, so in mail type HTML the following is common


![]()


The item after CID: can be almost anything (US-ASCII I think) and of any length. It corresponds to an image linked elsewhere in MIME say like this


--mimebounday  

Content-ID:  

Content-Type: image/jpeg.....  

(snip)


So, to mark a long story somewhat shorter, I use Jsoup's sanitizer extensively. However, I need these CID references to be preserved post sanitization. addProtocols does not work because the items are not valid URLs. As a result  

the above becomes ![](). Which for my purposes is not good :)"
Jsoup,20,Some html file's head element will be empty,"Hello, Jonathan


I love Jsoup, and handling many html files.


But today, I'm under the problem.  

When parse with Jsoup, some html file's head element will be empty.


Sample html is here -> <http://dl.dropbox.com/u/972460/test.html>


Please help me."
Jsoup,24,1.6.0 dropping a ' on a particular javascript string,"Loses a single quote when the javascript contains a partial tag, exampled pared from ad section of <http://scienceblogs.com/pharyngula>. Note in the result that '</scr is missing closing ' :


Input:



```
<HTML>
<body>
 <div>
  <script language=""JavaScript1.1""> 
    document.write('</scr' + 'ipt>');
  </script>
 </div>
</body>
</HTML>

```

Result:



```
<html>
 <body> 
  <div> 
   <script language=""JavaScript1.1""> 
    document.write('</scr + 'ipt>');
  
   </script> 
  </div>  
 </body>
</html>

```"
Jsoup,25,JSoup is not preserving whitespace for <textArea> tags,"This tag may have been mistakenly left out of the array of preserveWhitespace tags in the Tag class:


private static final String[] preserveWhitespaceTags = {""pre"", ""plaintext"", ""title""};


There is a comment next to the preserveWhitespace boolean that indicates this should have been added here.  

private boolean preserveWhitespace = false; // for pre, textarea, script etc"
Jsoup,26,NullpointerException when applying Cleaner to a frameset,"To reproduce:


1. Create/find a html document of a frameset.
2. Parse the html.
3. Create a Cleaner instance and call the func_3b066804f6d1d077173cfe4d06002e6a61e6f21c2b2e648417962115f1afcd8e method with the document from step 2.
4. NullPointerException


Cause:  

In Cleaner.func_3b066804f6d1d077173cfe4d06002e6a61e6f21c2b2e648417962115f1afcd8e(Document) (<https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/safety/Cleaner.java#L43>) the copySafeNodes is called with the document.body(). However, this is null when handling a frameset document.


Expected:  

An empty document or perhaps null returned. But not a nullpointerException."
Jsoup,27,Invalid HTTP-Response header leads to exception,"In particular case a HTTP-Webpage responses with a invalid HTTP-Charset field (delivered UFT8 instead of UTF8).  

This leads to an UnsupportedCharsetException in org.jsoup.helper.DataUtil at around Line 93(?) where :



```
  Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
  docData = Charset.forName(charsetName).decode(byteData).toString();
```

I fixed it by wrapping a try catch statement around these two lines such that:



```
try{
  Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
  docData = Charset.forName(charsetName).decode(byteData).toString();
} catch(UnsupportedCharsetException e){
  return parseByteData(byteData,(String)null,baseUri,parser);
}
```

It now falls back to the none charset argument assigned clause, and tries to detect the character set via HTML."
Jsoup,32,Element.func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4ac() wrongly shared a same classNames Set instance,"In the func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4ac() method of Node, the Object.func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4ac() is called, if the original element's classNames Set had been initialized before func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4ac, the original classNames Set will be set to the new func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4acd Element instance due to the JDK's func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4ac mechanism. Thus, the old element and the newly func_b5d61dc89a35d2c924b28c9760765da94039e94184c50f87dde54532f126b4acd Element will share a same classNames Set instance."
Jsoup,33,Self-closing script tag causes remainder of document to be html-escaped.,"When a self-closing script block is encountered it appears that the state transitions do not account for the closing tag, so the rest of the document is considered to be in the body of the script tag, and so is escaped.


The unit test HtmlParserTest.handlesKnownEmptyBlocks() will fail if a self-closing script tag is included in the String h."
Jsoup,34,Parser error on commented CDATA,"Jsoup gives the following error when trying to parse this HTML: <https://gist.github.com/felipehummel/6122799>



```
java.lang.ArrayIndexOutOfBoundsException: 8666
    at org.jsoup.parser.CharacterReader.nextIndexOf(CharacterReader.java:92)
    at org.jsoup.parser.CharacterReader.consumeTo(CharacterReader.java:112)
    at org.jsoup.parser.TokeniserState$67.read(TokeniserState.java:1789)
    at org.jsoup.parser.Tokeniser.read(Tokeniser.java:42)
    at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:47)
    at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:41)
    at org.jsoup.parser.HtmlTreeBuilder.parse(HtmlTreeBuilder.java:37)
    at org.jsoup.parser.Parser.parse(Parser.java:90)
    at org.jsoup.Jsoup.parse(Jsoup.java:58)
...

```

The HTML is from a entry in a RSS feed. If I remove the line:



```
// ]]

```

or just the  

]]


Then it parses the HTML nicely.


Does this syntax error should really throw an exception or it should be silently ignored?"
Jsoup,37,Whitespaces are discared in Element.func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3() method,"Hi,  

I'm trying to make an exact copy of a document (changing just a couple of attributes and appending a few nodes) and the trim() inside the Element.func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3() is killing me.  

I'm using Parsers.xml() and no prettyPrint.


I think this trim should be enabled for prettyPrint only."
Jsoup,39,JSoup incorrectly moves content from the <head> section into <body> for sample URL,"If you load the following URL:



```
http://jornutzon.sydneyoperahouse.com/home.htm

```

into:



```
http://try.jsoup.org/

```

then it will move the content from the ""head"" section into the ""body"" section. The URL  

being parsed validates using the W3C validator:


<http://validator.w3.org/check?uri=http%3A%2F%2Fjornutzon.sydneyoperahouse.com%2Fhome.htm&charset=%28detect+automatically%29&doctype=Inline&ss=1&group=0&user-agent=W3C_Validator%2F1.3+http%3A%2F%2Fvalidator.w3.org%2Fservices>


We are using JSoup 1.7.2"
Jsoup,40,"""<!DOCTYPE>"" IllegalArgumentException: String must not be empty","While this may be a contrived example, Jsoup.parse(""<!DOCTYPE>"") throws an exception, this was unexpected. Possibly related, a proper document with <!DOCTYPE> (no name) is generating corrupt html e.g. ""<!DOCTYPE <html> ..."" (missing right angle bracket on DOCTYPE.)


Spec says ""When a DOCTYPE token is created, its name, public identifier, and system identifier must be marked as missing (which is a distinct state from the empty string), [...]"""
Jsoup,41,Element.hashCode() ignores the content text of the element.,"Found [this question](http://stackoverflow.com/questions/28970732/jsoup-node-hash-code-collision-when-traversing-dom-tree/28971463) on SO, OP was using `Element.hashCode()` and it wasn't woring right.


The problem is that when jsoup generates the hashCode of an Element, the content text of the element will be ignored, and the hashCode is generated only based on the attributes, and the hashCode of the parent Element.




---


Using the following HTML:



```
<html>
    <head>
    </head>
    <body>
        <div style=""blah"">TODO: write content</div>
        <div style=""blah"">Nothing here</div>
        <p style=""test"">Empty</p>
        <p style=""nothing"">Empty</p>
    </body>
</html>

```

And the following code:



```
String html = //HTML posted above

Document doc = Jsoup.parse(html);

Elements elements = doc.select(""[style]"");
for (Element e : elements) {
   System.out.println(e.hashCode());
}

```

It gives:



```
-148184373
-148184373
-1050420242
2013043377

```

I believe the hashCode should be different for the first two Elements, since the content is text is different. Or is this intended behaviour?"
Jsoup,42,FormElement's func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0 ignores input checkbox checked without value.,"When there is input:



```
<input type=""checkbox"" name=""testCheckBox"" checked=""checked"" />

```

The ""func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0()"" of FormElement's ignores that default value which should be ""on"" as submitted by browsers.


HTML fragment:



```
<html>
    <head>
        <title>Test</title>
    </head>

    <body>

    <form name=""myForm"" method=""POST"">
        <input type=""checkbox"" name=""testCheckBox"" checked=""checked"" /> Something<br/>

        <input type=""submit"" value=""Submit"" />
    </form>

    </body>
</html>

```

When submiting from Firefox it sends to sever: testCheckBox=on


Java code:



```
    public static void main(String[] args)
    {
        final String html = ""<html>\n""
                            + ""    <head>\n""
                            + ""        <title>Test</title>\n""
                            + ""    </head>\n""
                            + ""    \n""
                            + ""    <body>\n""
                            + ""\n""
                            + ""    <form name=\""myForm\"" method=\""POST\"">\n""
                            + ""        <input type=\""checkbox\"" name=\""testCheckBox\"" checked=\""checked\"" /> Something<br/>\n""
                            + ""\n""
                            + ""        <input type=\""submit\"" value=\""Submit\"" />\n""
                            + ""    </form>\n""
                            + ""\n""
                            + ""    </body>\n""
                            + ""</html>"";

        final Document document = Jsoup.parse(html);

        final FormElement formElement = (FormElement) document.select(""form[name=myForm]"").first();

        for (Connection.KeyVal keyVal : formElement.func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0())
        {
            System.out.println(keyVal.key() + ""="" + keyVal.value());
        }

    }

```

Output: testCheckBox=


Expected output: testCheckBox=on


Seems like Jsoup doesn't add default value which is sent by browsers. The ""submit()"" method from FormElement also uses ""func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0()"" method to get form's submission parameters. By sending the empty String for checkbox the server acts as it's not checked when in fact it was checked.


Also while testing noticed that it doesn't check the checkbox'es at all. If there is checkbox with value, but not checked, it will get the value no matter what, for example:



```
        <input type=""checkbox"" name=""textCheckBox2"" value=""testVal"" /> 

```

This affects radio buttons as well. Not selected radion buttons should not be sent to server, but func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0() add their values anyway.


I'm not sure if that's done on purpose, but submit() method will get wrong parameters for submission since not checked input value is not sent to server at all.


Moreover type button value and ""disabled"" inputs are not sent to server as well (by browsers).


Looked at the source, one extra else if before the final else in ""func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0()"" method could solve this:



```
else if (""input"".equals(el.tagName())) {
                // Not disabled? Ignore disabled inputs.
                if(!el.hasAttr(""disabled"")) {

                    // Deal with checkbox and radio (not checked should not be added to avoid sending to server)
                    if(""checkbox"".equals(el.attr(""type"")) || ""radio"".equals(el.attr(""type""))) {

                        // Checked, but no value? Default should be ""on"".
                        if(el.hasAttr(""checked"") && !el.hasAttr(""value"")) {
                            data.add(HttpConnection.KeyVal.create(name, ""on""));
                        } 
                        // Checked? Add it's value
                        else if(el.hasAttr(""checked"")) {
                            data.add(HttpConnection.KeyVal.create(name, el.val()));
                        }
                    } 
                    // Buttons should be ignored.
                    else if(!""button"".equals(el.attr(""type""))){
                        data.add(HttpConnection.KeyVal.create(name, el.val()));
                    }
                }
            }

```

One more thing. If form has multiple type submit inputs, only the clicked input's value should be sent to server, but I have no idea how this could be implemented. Sending all submit input's values can change the server's logic and be bad (result not as expected)."
Jsoup,43,Unexpected behavior in elementSiblingIndex,"The documentation for elementSiblingIndex states ""Get the list index of this element in its element sibling list. I.e. if this is the first element sibling, returns 0"".


This would imply that if



```
n=myElem.elementSiblingIndex();

```

then



```
myElem.parent().children().get(n)==myElem.  

```

However, this is not how elementSiblingIndex behaves. What is guaranteed is that



```
myElem.parent().children().get(n).equals(myElem).  

```

For example, if both row 2 and row 5 of a table are



```
<tr><td>Cell1</td><td>Cell2</td></tr>

```

then the Element object associated with both rows will have the same `elementSiblingIndex()`."
Jsoup,46,EscapeMode.xhtml no longer falls back to numeric func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495s - Can cause '?' replacement in output,"I've been using EscapeMode.xhtml with JSoup to avoid encoding things which don't (from my perspective) need to be encoded, like egrave in a UTF-8 document for example.


While upgrading from JSoup 1.7.2 to 1.8.1 however, I've noticed a problem with a shift-jis related test I have. Here's a simplified/reduced version.



```
package test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.Charset;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities.EscapeMode;
import org.junit.Assert;
import org.junit.Test;

public class ShiftJisTest {

    @Test
    public void testShiftJisRoundtrip() throws Exception {
        String input = 
            ""<html>""
          +   ""<head>""
          +     ""<meta http-equiv=\""content-type\"" content=\""text/html; charset=Shift_JIS\"" />""
          +   ""</head>""
          +   ""<body>""
          +     ""before&nbsp;after""
          +   ""</body>""
          + ""</html>"";
        InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(""ASCII"")));

        Document doc = Jsoup.parse(is, null, ""http://example.com"");
        doc.outputSettings().func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495Mode(EscapeMode.xhtml);

        String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());

        System.out.println(output);

        Assert.assertFalse(""Should not have contained a '?'."", output.contains(""?""));
        Assert.assertTrue(""Should have contained a '&#xa0;' or a '&nbsp;'."", 
            output.contains(""&#xa0;"") || output.contains(""&nbsp;""));
    }

}

```

Under JSoup 1.7.2, the body of the output in this test is ""before after"" (which looks as expected when rendered in Firefox), where as under 1.8.1 it is ""before?after"".


I assume the issue here is that I've asked JSoup to func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495 only XHTML characters (i.e. not nbsp), and it's producing a charset where (I assume) there's no character to represent 'non-breaking space'.


The upshot of this is that, as a result of upgrading JSoup, I end up with '?' replaced in for what used to be shown as a non breaking space.


It seems like the old behaviour was to fall back to providing an func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495d numeric character (odd if there's no valid character for that in Shift\_JIS, but it still rendered correctly). From my perspective, the old behaviour was better - Is there any way it can be reinstated (or an func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495 mode provided for it)?


Obviously using EscapeMode.base instead of EscapeMode.xhtml is a possible workaround, however I would really prefer not to have characters unnecessarily func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495d if possible."
Jsoup,47,Jsoup not retaining &lt in data attributes,"Jsoup not retaining &lt in data attributes value if there is <


In the example below &lt; is converted to < in the output after parsing.  

Please let me know how to retain it.  

Example:  

<http://notes.io/Gww>  

[@uggedal](https://github.com/uggedal)  

@krystiangor  

[@tc](https://github.com/tc)  

[@bbeck](https://github.com/bbeck)"
Jsoup,48,A small bug for duplicate tuple in response header,"for response headers have duplicate tuple，  

in this case  

X-Powered-By:PHP/5.2.8  

X-Powered-By:ASP.NET


Jsoup can only get the second one  

if I run header（“X-powered-by”）  

I got Asp.NET


URL：<http://01pt.com/>


Cache-Control:no-store, no-cache, must-revalidate, post-check=0, pre-check=0  

Content-Encoding:gzip  

Content-Length:16224  

Content-Type:text/html;charset=gb2312  

Date:Thu, 27 Aug 2015 09:22:40 GMT  

Expires:Thu, 19 Nov 1981 08:52:00 GMT  

Pragma:no-cache  

Server:Microsoft-IIS/7.5  

Vary:Accept-Encoding  

X-Powered-By:PHP/5.2.8  

X-Powered-By:ASP.NET


The bug is because  

if (!values.isEmpty()) header(name, values.get(0));


I change it to  

if (!values.isEmpty()) {  

String val = """";  

for(String str: values) {  

val = val.concat(str).concat("" "");



```
                    }
                    header(name, val);
              }

```

then I am able to get “PHP/5.2.8 ASP.NET” when I run header（“X-powered-by”）


void func_daafa2b86f834b289d1e8ae9bf349ac2a6122fbd3edbf612675a9a13ff3e828e(Map<String, List> resHeaders) {  

for (Map.Entry<String, List> entry : resHeaders.entrySet()) {  

String name = entry.getKey();  

if (name == null)  

continue; // http/1.1 line



```
            List<String> values = entry.getValue();
            if (name.equalsIgnoreCase(""Set-Cookie"")) {
                for (String value : values) {
                    if (value == null)
                        continue;
                    TokenQueue cd = new TokenQueue(value);
                    String cookieName = cd.chompTo(""="").trim();
                    String cookieVal = cd.consumeTo("";"").trim();
                    // ignores path, date, domain, validateTLSCertificates et al. req'd?
                    // name not blank, value not null
                    if (cookieName.length() > 0)
                        cookie(cookieName, cookieVal);
                }
            } else { // only take the first instance of each header
                if (!values.isEmpty())
                    header(name, values.get(0));
            }
        }
    }

```"
Jsoup,49,Bug in Element.insertChildren(),"When using org.jsoup.nodes.Element.insertChildren(int, Collection<? extends Node>) to move (more than one!) child-elements from one parent-element to the same parent, but different index then it produces wrong results.


The problem is that the first Element's 'move' leaves the siblingIndex unchanged and then the second 'move' removes a wrong element and produces some crap. Maybe calling reindexChildren() inside the loop in func_1e6b92e9ff1a834ece80c620c314c9de57edfa7c0069106915ce9fa0d6fa2add() fixes this.  

Version 1.8.3.  

Workaround: call remove() on the elements before passing them to insertChildren()


Easy Test Case:



```
    @Test
    public void mustCorrectlyMoveChildrenInsideOneParentElement() {

        Document doc = new Document( """" );
        Element body = doc.appendElement( ""body"" );
        body.appendElement( ""div1"" );
        body.appendElement( ""div2"" );
        Element div3 = body.appendElement( ""div3"" );
        Element div4 = body.appendElement( ""div4"" );

        ArrayList<Element> toMove = new ArrayList<Element>() {
            {
                add( div3 );
                add( div4 );
            }
        };

        body.insertChildren( 0, toMove );

        String result = doc.toString().replaceAll( ""\\s+"", """" );
        assertEquals( ""<body><div3></div3><div4></div4><div1></div1><div2></div2></body>"", result );

    }

```"
Jsoup,50,UTF16 streams with BOM are processed as UTF-8,"The handling of the character encoding in org.jsoup.helper.DataUtil.func_1166cdbbf9945ad7abdc3a2e8e82e1285fe89259865a1d2a39e0c35a60042cc1(...) is bugged when the input is an UTF16 stream with unicode BOM. This method does a check for presence of a BOM and, if it finds one, incorrectly assumes that this was a UTF-8 BOM. To fix this, the code would have to check the raw BOM bytes as the distinction between the various BOMs is lost after conversion to characters. See also: <http://unicode.org/faq/utf_bom.html#bom4>"
Jsoup,53,Parse failed with org.jsoup.select.Selector$SelectorParseException when selector has unbalanced '(' or '[' or ')' or ']',Selector I am having as following div.card-content2:has(a.subtitle[title= MySubTitle:)]) OR a.title[title=MyTitle :] ]
Jsoup,54,INVALID_CHARACTER_ERR when converting Document to W3C,"A recent ClearQuest version has an HTML generation bug, which is ignored by both Chrome and Internet Explorer. Jsoup.parse is also successful:


`org.jsoup.nodes.Document doc = Jsoup.parse(""<html><head></head><body style=\""color: red\"" \""></body></html>"");`


(Please note the single quotation mark at the end of the body start tag.)


But trying to convert this to a W3C document fails:


`new W3CDom().fromJsoup(doc);`



```
Exception in thread ""main"" org.w3c.dom.DOMException: INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
    at org.apache.xerces.dom.CoreDocumentImpl.createAttribute(Unknown Source)
    at org.apache.xerces.dom.ElementImpl.setAttribute(Unknown Source)
    at org.jsoup.helper.W3CDom$W3CBuilder.func_7600c69110470307cf5f2a91582d2bbaad58c55a5834e40756f58b8993e435ff(W3CDom.java:124)
    at org.jsoup.helper.W3CDom$W3CBuilder.head(W3CDom.java:92)
    at org.jsoup.select.NodeTraversor.traverse(NodeTraversor.java:31)
    at org.jsoup.helper.W3CDom.convert(W3CDom.java:66)
    at org.jsoup.helper.W3CDom.fromJsoup(W3CDom.java:46)

```

Perhaps func_7600c69110470307cf5f2a91582d2bbaad58c55a5834e40756f58b8993e435ff() should ignore invalid attributes, or catch exactly this error, and ignore it, or W3CDom could have flags to ignore such errors..."
Jsoup,55,Parse slash in attibutes,"Hello,  

I don't know if it is a bug or not, but when I'm parsing:  

`<img /onerror=""a()""/>`


The result of the parsers is:  

`<img nerror=""a()""/>`  

Is it OK? can I change the parser behavior for those types of tags?"
Jsoup,57,func_fac87de4f92a941249b66b50c9e24c015f307fba644b01356b444611a27b2451 ConcurrentModificationException,"When testing out the func_fac87de4f92a941249b66b50c9e24c015f307fba644b01356b444611a27b2451 method, I'm now seeing a ConcurrentModificationException with code like: element.select(""abc"").first().removeAttr(""attr1"").removeAttr(""attr2"");


It appears to be due to using a foreach loop over the LinkedHashMap to do the removal. Changing to do the removal directly with an iterator fixes this issue.  

Like so:



```
for (Iterator<Map.Entry<String, Attribute>> iter = attributes.entrySet().iterator(); iter.hasNext();) {
            Map.Entry<String, Attribute> entry = iter.next();
            if (entry.getKey().equalsIgnoreCase(""key1"")) {
                iter.remove();
            }
        }

```"
Jsoup,59,Jsoup.clean control characters throws: IllegalArgumentException: String must not be empty,"I found that when running Jsoup.clean() on a string that contains the format below, Jsoup throws: `IllegalArgumentException: String must not be empty`.  

The problematic string format:  

`'<a/*>'`, (where \* is a control char).  

i.e. `<` char followed by a letter (a-z), then any chars, `/` and any control char (ASCII 0-31) except 0, 9-10, 12-13, any chars, and a `>` char."
Jsoup,61,Unexpected case sensitivity for CSS class selector,"Hi,  

i use JSoup version 1.10.2 and noticed an unexpected case sensitivity for a CSS class selector. I tried to parse the following HTML document with capitalized class attributes:



```
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>
<HTML>
  <HEAD>
    <FORM Method='POST' name='Form' Action='Action'>
      <TABLE Class='Lst'>
        <TR Class='Lst'>
          <TH Class='Lst'>Header 1</TH>
          <TH Class='Lst'>Header 2</TH>
          <TH Class='Lst'>Header 3</TH>
        </TR>
        <TR Class='Lst1'>
          <TD Class='Lst'>Cell 1</TD>
          <TD Class='Lst'>Cell 2</TD>
          <TD Class='Lst'>Cell 3</TD>
        </TR>
      </TABLE>
    </FORM>
  </BODY>
</HTML>
```

I wanted to select the table using the selector *""html > body > form table.Lst""* because I expected it to choose the table with the class attribute ""Lst"", but that did not work. The selector *""html > body > form table[class=Lst]""* works. Is this a bug?


Here is the parser code:



```
try {
  final String htmlStr = ""<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'>\n""
      + ""<HTML>\n""
      + "" <HEAD>\n""
      + "" <FORM Method='POST' name='Form' Action='Action'>\n""
      + "" <TABLE Class='Lst'>\n""
      + "" <TR Class='Lst'>\n""
      + "" <TH Class='Lst'>Header 1</TH>\n""
      + "" <TH Class='Lst'>Header 2</TH>\n""
      + "" <TH Class='Lst'>Header 3</TH>\n""
      + "" </TR>\n""
      + "" <TR Class='Lst1'>\n""
      + "" <TD Class='Lst'>Cell 1</TD>\n""
      + "" <TD Class='Lst'>Cell 2</TD>\n""
      + "" <TD Class='Lst'>Cell 3</TD>\n""
      + "" </TR>\n""
      + "" </TABLE>\n""
      + "" </FORM>\n""
      + "" </BODY>\n""
      + ""</HTML>"";
  final Document htmlDoc = Jsoup.parse(htmlStr,
      """");

  final Element tableNotOk = htmlDoc.select(""html > body > form table.Lst"")
      .first();
  final Element tableOk = htmlDoc.select(""html > body > form table[class=Lst]"")
      .first();

  Logger.getLogger(this.getClass().getName())
      .log(Level.INFO,
          ""tableNotOk found: ''{0}'', tableOk found: ''{1}''"",
          new Object[]{(tableNotOk != null), (tableOk != null)});

} catch (UnsupportedCharsetException | ParseException | Selector.SelectorParseException ex) {
  Logger.getLogger(this.getClass().getName())
      .log(Level.SEVERE,
          null,
          ex);
}
```"
Jsoup,64,"Incorrect handling of self-closing tags noframes, style and title cause remainder of document to be html-escaped","Given the input:



```
<html>
<head>
	<style />   <!-- < - - this is the culprit -->
</head>
<body>
	<p>Whatever</p>
</body>
</html>
```

JSoup 1.8.2 and also <http://try.jsoup.org/~lJwWpjXYUSTBeBZhdEnS3Mt56g4> will produce:



```
    <html>
     <head> 
      <style></style>
     </head>
     <body>
       &lt;/head&gt; &lt;body&gt; &lt;p&gt;Whatever&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
     </body>
    </html>
```

With `<title/>` instead of `<style/>`, the result is different but still wrong (<http://try.jsoup.org/~BZ3uoMki-r904fZxUOWJgLJO7r8> ):



```
<html>
 <head> 
  <title></title>
 </head>
 <body>
   &lt;/head&gt;  
  <p>Whatever</p>  
 </body>
</html>
```

That weirdness was fixed for `<script>` with Issue [#305](https://github.com/jhy/jsoup/issues/305): <http://try.jsoup.org/~3Ms6TQCrrdaA_uPgxgURYYvwFAg>



```
<html>
 <head> 
  <script></script> 
 </head> 
 <body> 
  <p>Whatever</p>  
 </body>
</html>
```

Looking [at the source](https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java#L106), it seems only the HtmlTreeBuilderState handling for `<noframes>`, `<style>` and `<title>` in the methods `handleRawText` and `handleRcData` doesn't get along with the self-closing tags.  

Any other tagname I've checked (and I tried to cover all branches of that `case StartTag` switch) results in a good parse similar to the `<script>` case, which is what I'd expect.


Thanks for looking into this!"
Jsoup,66,Method nextElementSibling() returns null after adding an element to a document that was cloned,"If I clone a document, and add an element by the method `after()`, and try to get the new element by the method `nextElementSibling()` I get null. In the same time the method `nextSibling()` successfully returns this element.  

If I do the same with the original document everything is fine.


Code:



```
String html = ""<!DOCTYPE html><html lang=\""en\""><head></head><body><div>Initial element</div></body></html>"";
Document original = Jsoup.parse(html);
Document clone = original.clone();

Element originalElement = original.body().child(0);
originalElement.after(""<div>New element</div>"");
Element originalNextElementSibling = originalElement.nextElementSibling();
Element originalNextSibling = (Element) originalElement.nextSibling();
System.out.println(""originalNextElementSibling:\n"" + originalNextElementSibling);
System.out.println(""originalNextSibling:\n"" + originalNextSibling);
System.out.println();

Element cloneElement = clone.body().child(0);
cloneElement.after(""<div>New element</div>"");
Element cloneNextElementSibling = cloneElement.nextElementSibling();
Element cloneNextSibling = (Element) cloneElement.nextSibling();
System.out.println(""cloneNextElementSibling:\n"" + cloneNextElementSibling);
System.out.println(""cloneNextSibling:\n"" + cloneNextSibling);

```

Output:



```
originalNextElementSibling:
<div>
 New element
</div>
originalNextSibling:
<div>
 New element
</div>

cloneNextElementSibling:
null
cloneNextSibling:
<div>
New element
</div>

```"
Jsoup,68,version 1.11.1 java.lang.StackOverflowError,"version 1.10.3 no problem  

version 1.11.1 java.lang.StackOverflowError  

Example URL：  

<http://szshb.nxszs.gov.cn/>  

<http://www.lnfsfda.gov.cn/>  

<http://www.beihai.gov.cn/>  

<http://www.fsepb.gov.cn/>  

<http://www.bhem.gov.cn>"
Jsoup,70,Whitespaces not properly handled in <pre> tag,"If a ""pre"" tag contains deep nested tags, whitespaces in nested tags are not preserved.


Example:
--------



```
String s = ""<pre><code>\n""
        + ""  message <span style=\""color:red\""> other   \n    message  with \n""
        + ""   whitespaces      </span>\n""
        + ""</code></pre>"";
    Document doc = Jsoup.parse(s);
    System.out.println(doc.select(""pre"").first().outerHtml());

```

Will output:  

<pre><code>  

  message <span style=""color:red""> other message with whiptespaces </span>  

</pre></code>




---


Output is OK if we omit the ""code"" tag"
Jsoup,72,StringIndexOutOfBoundsException as of jsoup 1.11.1,"Example:



```
Jsoup.parse(new URL(""https://gist.githubusercontent.com/valodzka/91ed27043628e9023009e503d41f1aad/raw/a15f68671e6f0517e48fdac812983b85fea27c16/test.html""), 10_000);

```"
Jsoup,75,Regression - Boolean attributes not collapsed when using HTML syntax,"Hello,


First off, thanks for a really useful library.


So, upgrading from 1.10.2 to 1.11.2 we see that boolean attributes are no longer collapsed when using func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3 syntax. Example test case:



```
    @Test
    public void test() {
        Document document = Jsoup.parse(
                ""<func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3><head></head><body><hr size=\""1\"" noshade=\""\""></body></func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3>"");
        assertEquals(""<func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3>\n"" +
                     "" <head></head>\n"" +
                     "" <body>\n"" +
                     ""  <hr size=\""1\"" noshade>\n"" +
                     "" </body>\n"" +
                     ""</func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3>"",
                     document.outerHtml());
    }

```

Tracked it down to commit ""Refactored Attributes to be an array pair vs LinkedHashSet "" [ea1fb65](https://github.com/jhy/jsoup/commit/ea1fb65e9ff8eee82c4e379dc3236d09a5ab02e1). The `Attibutes.func_e5e239560bc125a20ff2ac1fea50915bc198dd4f5b5256ec447a8a71e00132b3(final Appendable accum, final Document.OutputSettings out)` method no longer uses `Attribute` and **fails** to check the value of the attribute for an *empty string*(line 320).


If I may also suggest to use `Attribute.shouldCollapseAttribute(String key, String val, Document.OutputSettings out)` instead as a single source of truth as the boolean expression is complex enough and easy to make a mistake. Not sure if this would have an impact in performance though but I am guessing that optimizer will inline the call at some point anyways?"
Jsoup,77,xmlParser() with ParseSettings.htmlDefault does not put end tag to lower case,"```
@Test public void test() {
    Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
    Document document = Jsoup.parse(""<div>test</DIV><p></p>"", """", parser);
    assertEquals(""<div>\n test\n</div>\n<p></p>"", document.toString()); // fail -> toString() = ""<div>\n test\n <p></p>\n</div>""
}

@Test public void test1() {
    Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
    Document document = Jsoup.parse(""<DIV>test</div><p></p>"", """", parser);
    assertEquals(""<div>\n test\n</div>\n<p></p>"", document.toString()); // pass
}
```"
Jsoup,80,Faulty Xml Causes IndexOutOfBoundsException,"```
@Test
public void parseFaultyXml() {
    String xml = ""<?xml version='1.0'><val>One</val>"";
    Document doc = Jsoup.parse(xml, """", Parser.xmlParser());
}
```

Results in:



```
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0

	at java.util.ArrayList.rangeCheck(ArrayList.java:657)
	at java.util.ArrayList.get(ArrayList.java:433)
	at org.jsoup.nodes.Element.child(Element.java:254)
	at org.jsoup.parser.XmlTreeBuilder.func_1e22560cee2c4b727c6a117792e04a6769efbe2395f8e2528c603a153a446477(XmlTreeBuilder.java:91)
	at org.jsoup.parser.XmlTreeBuilder.process(XmlTreeBuilder.java:49)
	at org.jsoup.parser.TreeBuilder.runParser(TreeBuilder.java:52)
	at org.jsoup.parser.TreeBuilder.parse(TreeBuilder.java:45)
	at org.jsoup.parser.Parser.parseInput(Parser.java:34)
	at org.jsoup.Jsoup.parse(Jsoup.java:45)

```"
Jsoup,82,UnsupportedOperationException thrown for charsets that don't support encoding,"```
public static void main(String[] args) throws IOException {

    String html = ""<html><meta charset=\""ISO-2022-CN\""/></html>"";

    System.out.println(
        Jsoup.parse(new ByteArrayInputStream(html.getBytes()), null, """")
    );  

}

```

throws



```
Exception in thread ""main"" java.lang.UnsupportedOperationException
	at sun.nio.cs.ext.ISO2022\_CN.newEncoder(ISO2022\_CN.java:76)
	at org.jsoup.nodes.Document$OutputSettings.prepareEncoder(Document.java:443)
	at org.jsoup.nodes.Node$OuterHtmlVisitor.(Node.java:704)
	at org.jsoup.nodes.Node.outerHtml(Node.java:573)
	at org.jsoup.nodes.Element.html(Element.java:1395)
	at org.jsoup.nodes.Element.html(Element.java:1389)
	at org.jsoup.nodes.Document.outerHtml(Document.java:195)
	at org.jsoup.nodes.Element.toString(Element.java:1422)
	at java.lang.String.valueOf(String.java:2982)
	at java.io.PrintStream.println(PrintStream.java:821)

```"
Jsoup,84,W3CDom Helper fails to convert whenever some namespace declarations are missing,"Hello


I've been running into an issue where if I convert my Jsoup parsed document into a org.w3c.dom.Document with the W3CDom helper and that document happens to be missing namespace declarations we get the following exception:



```
NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.

```

I've looked into this a bit and first thing I tried was using a locally forked version of the W3CDom helper that simply turned this flag off:



```
factory.setNamespaceAware(false);

```

However the issue continued, so instead I simply hacked the code to completely ignore namespaces



```
// (csueiras): We purposely remove any namespace because we get malformed HTML that might not be
// declaring all of it's namespaces!
Element el = doc.createElementNS("""", sourceEl.tagName());

```

I am not completely sure if this will have any side effects, but it resolved the issues with the document I'm interacting with. I would be glad to provide a pull request if I have some guidance regarding how to properly handle this issue if it can be handled by Jsoup.


The document I'm having issues is simply making use of the Facebook like buttons using tags like this:



```
<fb:like ...

```

But there's no namespace declaration for ""fb""."
Jsoup,85,"func_1d289028b79437ae34b23d1191aded02f2c2ce0cb0a0cc7a6b368e3ba357fe68.java line 45 variable key scope error, it seems should be ""this.key""","[![image](https://user-images.githubusercontent.com/41705526/49982508-ca65db80-ff11-11e8-9833-1775ddcc8871.png)](https://user-images.githubusercontent.com/41705526/49982508-ca65db80-ff11-11e8-9833-1775ddcc8871.png)


func_1d289028b79437ae34b23d1191aded02f2c2ce0cb0a0cc7a6b368e3ba357fe68.java Line 45, it should be:



```
Validate.notEmpty(this.key);
```

rather than



```
Validate.notEmpty(key);
```

This issue only happens when **key** is blank or empty, in reality this would rarely happen, but in the syntax context it is still an issue, so better fix this."
Jsoup,86,Jsoup 1.11.3: IndexOutOfBoundsException,"Hi, I am using Jsoup 1.11.3. While trying to parse HTML content, I'm getting IndexOutOfBoundsException.


I am using such Jsoup call as this is the only way to parse iframe content.


Jsoup call:


`Jsoup.parse(html, """", Parser.xmlParser())`


HTML is here: <https://files.fm/u/v43yemgb>. I can't add it to the body as it's huge."
Jsoup,88,Attribute.func_4d5dea6502a61411b3067ea168a7bf3e5657ca5d3f9388d82f1b4c0e6d5faa40() broken for empty attributes since 1.11.1,"```
        Document doc = Jsoup.parse(""<div hidden>"");
        Attributes attributes = doc.body().child(0).attributes();
        System.out.println(String.format(""Attr: '%s', value: '%s'"", ""hidden"",
                attributes.get(""hidden"")));

        Attribute first = attributes.iterator().next();
        System.out.println(String.format(""Attr: '%s', value: '%s'"",
                first.getKey(), first.func_4d5dea6502a61411b3067ea168a7bf3e5657ca5d3f9388d82f1b4c0e6d5faa40()));

```

Expected output, as in 1.10.x



```
Attr: 'hidden', value: ''
Attr: 'hidden', value: ''

```

Output in 1.11.1-1.11.3:



```
Attr: 'hidden', value: ''
Attr: 'hidden', value: 'null'

```"
Jsoup,89,NPE in Attribute.func_4d9bc18c082d2ceb433b4ebcda9d05f6064595bbd4983517094467610d5f0468() for attribute without parent,"```
    public String func_4d9bc18c082d2ceb433b4ebcda9d05f6064595bbd4983517094467610d5f0468(String val) {
        String oldVal = parent.get(this.key);
        if (parent != null) {
            int i = parent.indexOfKey(this.key);
            if (i != Attributes.NotFound)
                parent.vals[i] = val;
        }
        this.val = val;
        return oldVal;
    }

```

Its useless to check `parent` for `null` after it has been dereferenced. I guess this is a copy-paste-bug:



```
    public void setKey(String key) {
        Validate.notNull(key);
        key = key.trim();
        Validate.notEmpty(key); // trimming could potentially make empty, so validate here
        if (parent != null) {
            int i = parent.indexOfKey(this.key);
            if (i != Attributes.NotFound)
                parent.keys[i] = key;
        }
        this.key = key;
    }

```"
Jsoup,90,ArrayIndexOutOfBoundsException when parsing with some URL,"### error



```
Caused by: java.lang.ArrayIndexOutOfBoundsException: 11
	at org.jsoup.helper.HttpConnection$Base.func_a75aa253eefde9a4a033591fa7885b8819521b3e2f9ebe6750b57189fe45f385(HttpConnection.java:437)
	at org.jsoup.helper.HttpConnection$Base.fixHeaderEncoding(HttpConnection.java:400)
	at org.jsoup.helper.HttpConnection$Base.addHeader(HttpConnection.java:386)
	at org.jsoup.helper.HttpConnection$Response.processResponseHeaders(HttpConnection.java:1075)
	at org.jsoup.helper.HttpConnection$Response.setupFromConnection(HttpConnection.java:1019)
	at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:752)
	at org.jsoup.helper.HttpConnection$Response.execute(HttpConnection.java:722)
	at org.jsoup.helper.HttpConnection.execute(HttpConnection.java:306)

```

### code



```
try {
            String url = ""https://www.colisprive.com/moncolis/pages/detailColis.aspx?numColis=P4000000037777930"";
            Connection connection = Jsoup.connect(url).referrer(url).
                    userAgent(""Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"")
                    .ignoreContentType(true).timeout(20000);
           
            connection.method(Method.GET);
            return connection.execute().parse();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

```"
Jsoup,93,"<input type=""image""> is not special cased in func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0 method","The following code:



```
import org.jsoup.Jsoup;
import org.jsoup.nodes.FormElement;

class Scratch {
    public static void main(String[] args) {
        System.out.println(((FormElement) Jsoup.parse(""<form id=f><input type=image name=x></form>"").getElementById(""f"")).func_9cfe4847a6254dbd657fd376a6b6db0a9a9a10ac1dac88675946b81f46995cd0());
    }
}
```

Returns the following output:



```
[x=]

```

When either `[]` or `[x.x=0, x.y=0]` is expected (not sure which, but `[x=]` is definitely wrong)."
JxPath,5,Cannot compare pointers that do not belong to the same tree,"For XPath ""$var | /MAIN/A"" exception is thrown:


org.apache.commons.jxpath.JXPathException: Cannot compare pointers that do not belong to the same tree: '$var' and ''  

 at org.apache.commons.jxpath.ri.model.NodePointer.func_a278a3a9bb9cb0357854e907a188fd690f59baf906196525303cdb89d2643720(NodePointer.java:665)  

 at org.apache.commons.jxpath.ri.model.NodePointer.func_a278a3a9bb9cb0357854e907a188fd690f59baf906196525303cdb89d2643720(NodePointer.java:649)  

 at org.apache.commons.jxpath.ri.model.NodePointer.func_a278a3a9bb9cb0357854e907a188fd690f59baf906196525303cdb89d2643720(NodePointer.java:649)  

 at org.apache.commons.jxpath.ri.model.NodePointer.compareTo(NodePointer.java:639)  

 at java.util.Arrays.mergeSort(Arrays.java:1152)  

 at java.util.Arrays.sort(Arrays.java:1079)  

 at java.util.Collections.sort(Collections.java:113)  

 at org.apache.commons.jxpath.ri.EvalContext.constructIterator(EvalContext.java:176)  

 at org.apache.commons.jxpath.ri.EvalContext.hasNext(EvalContext.java:100)  

 at org.apache.commons.jxpath.JXPathContext.selectNodes(JXPathContext.java:648)  

 at org.apache.commons.jxpath.ri.model.VariablePointerTestCase.testUnionOfVariableAndNode(VariablePointerTestCase.java:76)"
JxPath,6,func_f9d6cd1ed5cf1ead7b54873537748e0daa8f1390cd61555b68089fca063444f3ity test for multi-valued variables does not conform to spec,"given e.g. variable d=


{""a"", ""b""}
, the spec implies that ""$d = 'a'"" and that ""$d = 'b'"". Instead of iterating the variable's components its immediate content (here, the String[]) is compared, causing the aforementioned assertions to fail."
JxPath,8,Comparing with NaN is incorrect,"'NaN' > 'NaN' is true, but should be FALSE"
JxPath,10,Binary operators behaviour involving node-sets is incorrect,"According to XPath specification:  

""If both objects to be compared are node-sets, then the comparison will be true if and only if there is a node in the first node-set and a node in the second node-set such that the result of performing the comparison on the string-values of the two nodes is true. If one object to be compared is a node-set and the other is a number, then the comparison will be true if and only if there is a node in the node-set such that the result of performing the comparison on the number to be compared and on the result of converting the string-value of that node to a number using the number function is true.""


But following example illustrates, that this is not a JXPath behaviour:


 JXPathContext pathContext = JXPathContext  

 .newContext(DocumentBuilderFactory.newInstance()  

 .newDocumentBuilder().parse(  

 new InputSource(new StringReader(  

 ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\r\n""  

 + ""<doc/>""))));  

 Boolean result = (Boolean) pathContext.getValue(""2.0 > child1"",  

 Boolean.class);  

 assertFalse(result.booleanValue());


""child1"" is not found - right operand node set is empty, but result is TRUE, instead of FALSE.


Please, check greaterThan(), lesserThan(), etc methods of org.apache.xpath.objects.XObject for possible solution ![](/jira/images/icons/emoticons/smile.png)"
JxPath,12,Incomplete handling of undefined namespaces,"Mcduffey, Joe <jdmcduf@nsa.gov>


Can someone tell me how to register namespaces so that attributes with namespaces does not cause the exception


org.apache.common.ri.model.dom.DOMNodePointer.createAttribute  

unknown namespace prefix: xsi


For example the following  

<ElementA A:myAttr=""Mytype"">  

 <B:ElementB>MY VALUE</B:ElementB>  

</ElementA>


Would result in the following exception:  

org.apache.common.ri.model.dom.DOMNodePointer.createAttribute  

unknown namespace prefix: A


FYI: In this example there was a namespace decaration in the file and I also manually called the  

registerNamespace(A,""/http..."");  

registerNamespace(B,""/http..."");


There was no problem encountered for elements. Only attributes. Can someone help? Thanks."
JxPath,21,null handling is inconsistent,"Comparing a vaule to null using unequals (!=) yields false!




```
        Map<String, Integer> m = new HashMap<String, Integer>();
        m.put(""a"", 1);
        m.put(""b"", null);
        m.put(""c"", 1);
        JXPathContext c = JXPathContext.newContext(m);
        System.out.println(c.getValue(""a != b"") + "" should be true"");
        System.out.println(c.getValue(""a != c"") + "" should be false"");
        System.out.println(c.getValue(""a = b"") + "" should be false"");
        System.out.println(c.getValue(""a = c"") + "" should be true"");
        System.out.println(c.getValue(""not(a = b)"") + "" should be true"");
        System.out.println(c.getValue(""not(a = c)"") + "" should be false"");

```


Output using 1.3:  

 false should be true  

false should be false  

false should be false  

true should be true  

true should be true  

false should be false


In 1.2 it works correctly!"
JxPath,22,Resetting the default namespace causes a serious endless loop when requesting .asPath() on a node.,"sample smaller case:




```
<...>
 <b:foo xmlns:b=""bla"" xmlns=""test111"">    <!--  No nodes are placed in the tree within ns ""test111"" but the attribute is still there.-->
  <b:bar>a</b:bar>                         <!-- is in ns 'bla' -->
  <test xmlns=""""></test>                   <!-- does not have a namespace -->
 </b:foo>
</...>

```


when requesting .asPath() on the 'test' node, it loops in org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(NodePointer, String),   

and if it didn't loop it would create a wrong xpath '//b:fo/null:test' DOMNodePointer.asPath().


So I think that the fix should be in org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.asPath()




```
....
                    String ln = DOMNodePointer.getLocalName(node);
                    String nsURI = func_340b8bc07a66251d715368d3d4028395e22098ef396175678557298f5fb063ad();
                    if (nsURI == null) {
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByName()).append(']');
                    }
                    else {
                        String prefix = getNamespaceResolver().getPrefix(nsURI);
                        if (prefix != null) {
...

```


should become




```
...
                    String ln = DOMNodePointer.getLocalName(node);
                    String nsURI = func_340b8bc07a66251d715368d3d4028395e22098ef396175678557298f5fb063ad();
                    if (nsURI == null || nsURI.length() == 0) { // check for empty string which means that the node doesn't have a namespace.
                        buffer.append(ln);
                        buffer.append('[');
                        buffer.append(getRelativePositionByName()).append(']');
                    }
                    else {
                        String prefix = getNamespaceResolver().getPrefix(nsURI);
                        if (prefix != null) {
...

```"
Lang,1,NumberUtils does not handle Long Hex numbers,"NumberUtils.createLong() does not handle hex numbers, but createInteger() handles hex and octal.  

This seems odd.


NumberUtils.func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52() assumes that hex numbers can only be Integer.  

Again, why not handle bigger Hex numbers?


==


It is trivial to fix createLong() - just use Long.decode() instead of valueOf().  

It's not clear why this was not done originally - the decode() method was added to both Integer and Long in Java 1.2.


Fixing func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52() is also fairly easy - if the hex string has more than 8 digits, use Long.


Should we allow for leading zeros in an Integer?   

If not, the length check is trivial."
Lang,3,Method func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 from NumberUtils doesn't work for floating point numbers other than Float,"Method func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 from NumberUtils is trying to parse a string with a floating point number always first as a Float, that will cause that if we send a string with a number that will need a Double or even a BigDecimal the number will be truncate to accommodate into the Float without an exception to be thrown, so in fact we will no be returning ever neither a Double nor a BigDecimal."
Lang,5,LocaleUtils.func_fde2b9fc46631d5524134ea60bb1d8560a465b1bafd64e9ac76eda28b739b252 does not parse strings starting with an underscore,"Hi,


Javadocs of Locale.toString() states that ""If the language is missing, the string will begin with an underbar."". This is not handled in the LocaleUtils.func_fde2b9fc46631d5524134ea60bb1d8560a465b1bafd64e9ac76eda28b739b252 method if it is meant to be the inversion method of Locale.toString().


The fix for the ticket 328 does not handle well the case ""fr\_\_P"", which I found out during fixing the first bug.


I am attaching the patch for both problems."
Lang,6,StringIndexOutOfBoundsException in CharSequenceTranslator,"I found that there is bad surrogate pair handling in the CharSequenceTranslator


This is a simple test case for this problem.  

\uD83D\uDE30 is a surrogate pair.




```
@Test
public void testEscapeSurrogatePairs() throws Exception {
    assertEquals(""\uD83D\uDE30"", StringEscapeUtils.escapeCsv(""\uD83D\uDE30""));
}

```


You'll get the exception as shown below.




```
java.lang.StringIndexOutOfBoundsException: String index out of range: 2
	at java.lang.String.charAt(String.java:658)
	at java.lang.Character.codePointAt(Character.java:4668)
	at org.apache.commons.lang3.text.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456.CharSequenceTranslator.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(CharSequenceTranslator.java:95)
	at org.apache.commons.lang3.text.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456.CharSequenceTranslator.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(CharSequenceTranslator.java:59)
	at org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)

```


Patch attached, the method affected:


1. public final void func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(CharSequence input, Writer out) throws IOException"
Lang,9,FastDateParser does not handle unterminated quotes correctly,"FDP does not handled unterminated quotes the same way as SimpleDateFormat


For example:


Format: 'd'd'  

Date: d3


This should fail to parse the format and date but it actually works.  

The format is parsed as:


Pattern: d(\p


{IsNd}
++)"
Lang,10,FastDateParser does not handle white-space properly,"The SimpleDateFormat Javadoc does not treat white-space specially, however FastDateParser treats a single white-space as being any number of white-space characters.


This means that FDP will parse dates that fail when parsed by SDP."
Lang,11,RandomStringUtils throws confusing IAE when end <= start,"RandomUtils invokes Random#nextInt![](/jira/images/icons/emoticons/thumbs_down.png) where n = end - start.


If end <= start, then Random throws:


java.lang.IllegalArgumentException: n must be positive


This is confusing, and does not identify the source of the problem."
Lang,12,"RandomStringUtils.func_a441b15fe9a3cf56661190a0b93b9dec7d04127288cc87250967cf3b52894d11(count, 0, 0, false, false, universe, func_a441b15fe9a3cf56661190a0b93b9dec7d04127288cc87250967cf3b52894d11) always throws java.lang.ArrayIndexOutOfBoundsException","In commons-lang 2.6 line 250 :




```
ch = chars[func_a441b15fe9a3cf56661190a0b93b9dec7d04127288cc87250967cf3b52894d11.nextInt(gap) + start];
```


~~This line of code takes a func_a441b15fe9a3cf56661190a0b93b9dec7d04127288cc87250967cf3b52894d11 int to fetch a char in the *chars* array regardless of its size.~~  

~~(Besides *start* is useless here)~~


~~Fixed version would be :~~




```
//ch = chars[func_a441b15fe9a3cf56661190a0b93b9dec7d04127288cc87250967cf3b52894d11.nextInt(gap)%chars.length];
```


When user pass 0 as *end* or when the array is not null but empty this line ends up with an exception"
Lang,14,StringUtils func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7() relies on undefined behavior,"Since the java.lang.CharSequence class was first introduced in 1.4, the JavaDoc block has contained the following note:



> 
> This interface does not refine the general contracts of the func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7 and hashCode methods. The result of comparing two objects that implement CharSequence is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other.
> 
> 


When the signature of the StringUtils func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7() method was changed from func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(String, String) to func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(CharSequence, CharSequence) in R920543, the implementation still relied on calling CharSequence#func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(Object) even though, in general, the result is undefined.


One example where func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(Object) returns false even though, as CharSequences, two objects represent equal sequences is when one object is an instance of javax.lang.model.element.Name and the other object is a String."
Lang,16,NumberUtils does not handle upper-case hex: 0X and -0X,"NumberUtils.func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52() should work equally for 0x1234 and 0X1234; currently 0X1234 generates a NumberFormatException


Integer.decode() handles both upper and lower case hex."
Lang,17,StringEscapeUtils.escapeXml(input) outputs wrong results when an input contains characters in Supplementary Planes.,"Hello.


I use StringEscapeUtils.escapeXml(input) to escape special characters for XML.  

This method outputs wrong results when input contains characters in Supplementary Planes.


String str1 = ""\uD842\uDFB7"" + ""A"";  

String str2 = StringEscapeUtils.escapeXml(str1);


// The value of str2 must be equal to the one of str1,  

// because str1 does not contain characters to be escaped.  

// However, str2 is diffrent from str1.


System.out.println(URLEncoder.encode(str1, ""UTF-16BE"")); //%D8%42%DF%B7A  

System.out.println(URLEncoder.encode(str2, ""UTF-16BE"")); //%D8%42%DF%B7%FF%FD


The cause of this problem is that the loop to func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456 input character by character is wrong.  

In CharSequenceTranslator.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(CharSequence input, Writer out),  

loop counter ""i"" moves from 0 to Character.codePointCount(input, 0, input.length()),  

but it should move from 0 to input.length()."
Lang,18,FastDateFormat formats year differently than SimpleDateFormat in Java 7,"Starting with Java 7 does SimpleDateFormat format a year pattern of 'Y' or 'YYY' as '2003' instead of '03' as in former Java releases. According Javadoc this pattern should have been always been formatted as number, therefore the new behavior seems to be a bug fix in the JDK. FastDateFormat is adjusted to behave the same."
Lang,19,"StringIndexOutOfBoundsException when calling unescapeHtml4(""&#03"")","When calling unescapeHtml4() on the String ""&#03"" (or any String that contains these characters) an Exception is thrown:


Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: 4  

 at java.lang.String.charAt(String.java:686)  

 at org.apache.commons.lang3.text.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456.NumericEntityUnescaper.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(NumericEntityUnescaper.java:49)  

 at org.apache.commons.lang3.text.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456.AggregateTranslator.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(AggregateTranslator.java:53)  

 at org.apache.commons.lang3.text.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456.CharSequenceTranslator.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(CharSequenceTranslator.java:88)  

 at org.apache.commons.lang3.text.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456.CharSequenceTranslator.func_7fd690e20d081646429b8b6a37835c428a6406013aa2499209837334ae3f1456(CharSequenceTranslator.java:60)  

 at org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(StringEscapeUtils.java:351)"
Lang,21,DateUtils.func_31fe55b7f4b6b8fafd5ce5dcb36f21bcf8447bf2da11b11d1a082264b135e20b does not work correct,"Hi, I think I found a bug in the DateUtils class in the method func_31fe55b7f4b6b8fafd5ce5dcb36f21bcf8447bf2da11b11d1a082264b135e20b.


Example:   

Calendar a = Calendar.getInstance();  

a.setTimeInMillis(1297364400000L);


Calendar b = Calendar.getInstance();  

b.setTimeInMillis(1297321200000L);


Assert.assertFalse(DateUtils.func_31fe55b7f4b6b8fafd5ce5dcb36f21bcf8447bf2da11b11d1a082264b135e20b(a, b));


This is because the method compares   

cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 


but I think it has to be   

cal1.get(Calendar.HOUR\_OF\_DAY) == cal2.get(Calendar.HOUR\_OF\_DAY)"
Lang,22,"org.apache.commons.lang3.math.Fraction does not reduce (Integer.MIN_VALUE, 2^k)","The func_0a7a4e2006f8aabd76abca3d67c39db3aa9b32b0df2b5218091216250c0f5dd4 method in class Fraction does not find the gcd of Integer.MIN\_VALUE and 2^k, and this case can be triggered by taking Integer.MIN\_VALUE as the numerator. Note that the case of taking Integer.MIN\_VALUE as the denominator is handled explicitly in the getReducedFraction factory method.


**FractionTest.java**

```
	// additional test cases
	public void testReducedFactory\_int\_int() {
		// ...
		f = Fraction.getReducedFraction(Integer.MIN\_VALUE, 2);
		assertEquals(Integer.MIN\_VALUE / 2, f.getNumerator());
		assertEquals(1, f.getDenominator());

	public void testReduce() {
		// ...
		f = Fraction.getFraction(Integer.MIN\_VALUE, 2);
		result = f.reduce();
		assertEquals(Integer.MIN\_VALUE / 2, result.getNumerator());
		assertEquals(1, result.getDenominator());

```"
Lang,24,"NumberUtils.func_0b3746bc80e50546ba9ee337d278335430134d3d94987474d969cff0d7fb8e97(String)  is not right when the String is ""1.1L""","""1.1L"" is not a Java Number . but NumberUtils.func_0b3746bc80e50546ba9ee337d278335430134d3d94987474d969cff0d7fb8e97(String) return true.


perhaps change:




```
            if (chars[i] == 'l'
                || chars[i] == 'L') {
                // not allowing L with an exponent
                return foundDigit && !hasExp;
            }

```


to:




```
            if (chars[i] == 'l'
                || chars[i] == 'L') {
                // not allowing L with an exponent
                return foundDigit && !hasExp && !hasDecPoint;
            }

```"
Lang,26,FastDateFormat.func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427() outputs incorrect week of year because locale isn't respected,"FastDateFormat apparently doesn't respect the locale it was sent on creation when outputting week in year (e.g. ""ww"") in func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427(). It seems to use the settings of the system locale for firstDayOfWeek and minimalDaysInFirstWeek, which (depending on the year) may result in the incorrect week number being output.


Here is a simple test program to demonstrate the problem by comparing with SimpleDateFormat, which gets the week number right:




```
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.text.SimpleDateFormat;

import org.apache.commons.lang.time.FastDateFormat;

public class FastDateFormatWeekBugDemo {
    public static void main(String[] args) {
        Locale.setDefault(new Locale(""en"", ""US""));
        Locale locale = new Locale(""sv"", ""SE"");

        Calendar cal = Calendar.getInstance(); // setting locale here doesn't change outcome
        cal.set(2010, 0, 1, 12, 0, 0);
        Date d = cal.getTime();
        System.out.println(""Target date: "" + d);

        FastDateFormat fdf = FastDateFormat.getInstance(""EEEE', week 'ww"", locale);
        SimpleDateFormat sdf = new SimpleDateFormat(""EEEE', week 'ww"", locale);
        System.out.println(""FastDateFormat: "" + fdf.func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427(d)); // will output ""FastDateFormat: fredag, week 01""
        System.out.println(""SimpleDateFormat: "" + sdf.func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427(d)); // will output ""SimpleDateFormat: fredag, week 53""
    }
}

```


If sv/SE is passed to Locale.setDefault() instead of en/US, both FastDateFormat and SimpleDateFormat output the correct week number."
Lang,27,"NumberUtils func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 throws a StringIndexOutOfBoundsException when argument containing ""e"" and ""E"" is passed in","NumberUtils func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 throws a StringIndexOutOfBoundsException instead of NumberFormatException when a String containing both possible exponent indicators is passed in.  

One example of such a String is ""1eE""."
Lang,28,StringEscapeUtils.escapeXML() can't process UTF-16 supplementary characters,"Supplementary characters in UTF-16 are those whose code points are above 0xffff, that is, require more than 1 Java char to be encoded, as explained here: <http://java.sun.com/developer/technicalArticles/Intl/Supplementary/>


Currently, StringEscapeUtils.escapeXML() isn't aware of this coding scheme and treats each char as one character, which is not always right.


A possible solution in class Entities would be:


 public void escape(Writer writer, String str) throws IOException {  

 int len = str.length();  

 for (int i = 0; i < len; i++) {  

 int code = str.codePointAt![](/jira/images/icons/emoticons/information.png);  

 String entityName = this.entityName(code);  

 if (entityName != null) 


{
 writer.write('&');
 writer.write(entityName);
 writer.write(';');
 }
 else if (code > 0x7F) 


{
 writer.write(""&#"");
 writer.write(code);
 writer.write(';');
 }
 else 


{
 writer.write((char) code);
 }

 if (code > 0xffff) 


{
 i++;
 }
 }  

 }


Besides fixing escapeXML(), this will also affect HTML escaping functions. I guess that's a good thing, but please remember I have only tested escapeXML()."
Lang,33,ClassUtils.func_9885dc21aa69c7299f08edc4752245f5014c02bca87eac98652fd1ad1b007d65(Object[]) throws NPE on null array element,see summary
Lang,37,"ArrayUtils.func_5d630c230db8387cc9d9f643a376f8c7a8c95bf3488200c3be783d49345b0259(T[] array1, T... array2) does not handle mixed types very well","ArrayUtils.func_5d630c230db8387cc9d9f643a376f8c7a8c95bf3488200c3be783d49345b0259(T[] array1, T... array2) does not handle mixed array types very well.


The stack trace for 


Number[] st = ArrayUtils.func_5d630c230db8387cc9d9f643a376f8c7a8c95bf3488200c3be783d49345b0259(new Integer[]


{1}
, new Long[]


{2L}
);


starts:


java.lang.ArrayStoreException  

 at java.lang.System.arraycopy(Native Method)  

 at org.apache.commons.lang3.ArrayUtils.func_5d630c230db8387cc9d9f643a376f8c7a8c95bf3488200c3be783d49345b0259(ArrayUtils.java:2962)


which is not all that obvious.


It would be a lot clearer if the method threw an IlegalArgumentException or similar."
Lang,38,DateFormatUtils.func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427 does not correctly change Calendar TimeZone in certain situations,"If a Calendar object is constructed in certain ways a call to Calendar.setTimeZone does not correctly change the Calendars fields. Calling Calenar.getTime() seems to fix this problem. While this is probably a bug in the JDK, it would be nice if DateFormatUtils was smart enough to detect/resolve this problem.


For example, the following unit test fails:




```
  public void testFormat\_CalendarIsoMsZulu() {
    final String dateTime = ""2009-10-16T16:42:16.000Z"";

    // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)
    // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone
    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));
    cal.clear();
    cal.set(2009, 9, 16, 8, 42, 16);


    FastDateFormat func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427 = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""GMT""));
    assertEquals(""dateTime"", dateTime, func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427.func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427(cal));
  }

```


However, this unit test passes:




```
  public void testFormat\_CalendarIsoMsZulu() {
    final String dateTime = ""2009-10-16T16:42:16.000Z"";
    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));
    cal.clear();
    cal.set(2009, 9, 16, 8, 42, 16);
    cal.getTime();

    FastDateFormat func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427 = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""GMT""));
    assertEquals(""dateTime"", dateTime, func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427.func_e904c9ccfa425ff0b055d2c533462314d35a529b055e8abe41d49bb46d827427(cal));
  }

```"
Lang,39,StringUtils func_f4d9d965b9307f25da85e927528fdfa98e430d4e250b7f5bfff0e154696e57ca - Bug or Missing Documentation,"The following Test Case for func_f4d9d965b9307f25da85e927528fdfa98e430d4e250b7f5bfff0e154696e57ca fails with a null pointer exception.  

I have expected that all StringUtils methods are ""null-friendly""  

The use case is that i will stuff Values into the replacementList of which I do not want to check whether they are null.  

I admit the use case is not perfect, because it is unclear what happens on the replace.  

I outlined three expectations in the test case, of course only one should be met.


If it is decided that none of them should be possible, I propose to update the documentation with what happens when null is passed as replacement string




```
import static org.junit.Assert.assertEquals;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;


public class StringUtilsTest {

	@Test
	public void func_f4d9d965b9307f25da85e927528fdfa98e430d4e250b7f5bfff0e154696e57ca(){
		String original = ""Hello World!"";
		String[] searchList = {""Hello"", ""World""};
		String[] replacementList = {""Greetings"", null};
		String result = StringUtils.func_f4d9d965b9307f25da85e927528fdfa98e430d4e250b7f5bfff0e154696e57ca(original, searchList, replacementList);
		assertEquals(""Greetings !"", result);
		//perhaps this is ok as well
                //assertEquals(""Greetings World!"", result);
                //or even
		//assertEquals(""Greetings null!"", result);
	}

	
}

```"
Lang,40,Fix case-insensitive string handling,"String.to\*Case() is locale-sensitive, this is usually not intended for case-insensitive comparisions. Please see [Common Bug #3](http://www.nabble.com/Re%3A-Common-Bugs-p14931921s177.html) for details."
Lang,42,StringEscapeUtils.func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495Html incorrectly converts unicode characters above U+00FFFF into 2 characters,"Characters that are represented as a 2 characters internaly by java are incorrectly converted by the function. The following test displays the problem quite nicely:


import org.apache.commons.lang.\*;


public class J2 {  

 public static void main(String[] args) throws Exception {  

 // this is the utf8 representation of the character:  

 // COUNTING ROD UNIT DIGIT THREE  

 // in unicode  

 // codepoint: U+1D362  

 byte[] data = new byte[] 


{ (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 }
;


 //output is: &#55348;&#57186;  

 // should be: &#119650;  

 System.out.println(""'"" + StringEscapeUtils.func_b3140286ac71ad2acf69681f4f2a907b0b83d8edfbffdd4e0a38c05a23180495Html(new String(data, ""UTF8"")) + ""'"");  

 }  

}


Should be very quick to fix, feel free to drop me an email if you want a patch."
Lang,43,ExtendedMessageFormat: OutOfMemory with custom format registry and a pattern containing single quotes,"When using ExtendedMessageFormat with a custom format registry and a pattern conatining single quotes, an OutOfMemoryError will occur.


Example that will cause error:


**ExtendedMessageFormatTest.java**

```

private static Map<String, Object> formatRegistry = new HashMap<String, Object>();    
    static {
        formatRegistry.put(DummyFormatFactory.DUMMY\_FORMAT, new DummyFormatFactory());
    }
    
    public static void main(String[] args) {
        ExtendedMessageFormat mf = new ExtendedMessageFormat(""it''s a {dummy} 'test'!"", formatRegistry);
        String formattedPattern = mf.format(new String[] {""great""});
        System.out.println(formattedPattern);
    }
}


```


The following change starting at line 421 on the 2.4 release seems to fix the problem:


**ExtendedMessageFormat.java**

```
CURRENT (Broken):
if (escapingOn && c[start] == QUOTE) {
        return appendTo == null ? null : appendTo.append(QUOTE);
}

WORKING:
if (escapingOn && c[start] == QUOTE) {
        next(pos);
        return appendTo == null ? null : appendTo.append(QUOTE);
}

```"
Lang,44,"NumberUtils func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 thows a StringIndexOutOfBoundsException when only an ""l"" is passed in.","Seems to be similar to [~~LANG-300~~](https://issues.apache.org/jira/browse/LANG-300 ""NumberUtils.func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 throws NumberFormatException for one digit long""), except that if you don't place a digit in front of the ""l"" or ""L"" it throws a StringIndexOutOfBoundsException instead."
Lang,45,WordUtils.func_4a9b5995cc8158c603b23affb73e8197e6e7ec46c6b8321ede3ec9d0f435193e bug when lower is greater than str.length,"In WordUtils.func_4a9b5995cc8158c603b23affb73e8197e6e7ec46c6b8321ede3ec9d0f435193e, upper is adjusted to the length of the string, then to lower.  

But lower is never adjusted to the length of the string, so if lower is greater than str.lengt(), upper will be too...  

Then, str.substring(0, upper) throw a StringIndexOutOfBoundsException


The fix is to adjust lower to the length of the string"
Lang,48,EqualsBuilder don't compare BigDecimals correctly,"When comparing a BigDecimal, the comparing is made using equals, not compareTo, which is more appropriate in the case of BigDecimal."
Lang,49,infinite loop in Fraction.func_4c7e98bfa0c750beb52cf2ddf452297d55681dc9efa8e9725d4334e981ae61ad when numerator == 0,Summary pretty much says it all.
Lang,51,BooleanUtils.func_cb5aa54da305d2a3faa353a11b1d1a549d9e2f19afc2145725bccd21201ab608() - invalid drop-thru in case statement causes StringIndexOutOfBoundsException,"The method BooleanUtils.func_cb5aa54da305d2a3faa353a11b1d1a549d9e2f19afc2145725bccd21201ab608() has a case statement; case 3 drops through to case 4; this can cause StringIndexOutOfBoundsException, for example with the test:


assertEquals(false, BooleanUtils.func_cb5aa54da305d2a3faa353a11b1d1a549d9e2f19afc2145725bccd21201ab608(""tru""));


The end of case 3 should return false.


Patch to follow for source and unit test."
Lang,52,"StringEscapeUtils.escapeJavaScript() method did not escape '/' into '\/', it will make IE render page uncorrectly","If Javascripts including'/', IE will parse the scripts uncorrectly, actually '/' should be escaped to '\/'.  

For example, document.getElementById(""test"").value = '<script>alert(\'aaa\');</script>';this expression will make IE render page uncorrect, it should be document.getElementById(""test"").value = '<script>alert(\'aaa\');<\/script>';


Btw, Spring's JavascriptEscape behavor is correct.  

Try to run below codes, you will find the difference:  

 String s = ""<script>alert('aaa');</script>"";  

 String str = org.springframework.web.util.JavaScriptUtils.javaScriptEscape(s);  

 System.out.println(""Spring JS Escape : ""+str);  

 str = org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(s);  

 System.out.println(""Apache Common Lang JS Escape : ""+ str);"
Lang,53,Dates.round() behaves incorrectly for minutes and seconds,"Get unexpected output for rounding by minutes or seconds.


public void testRound()  

{  

 Calendar testCalendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));  

 testCalendar.set(2007, 6, 2, 8, 9, 50);  

 Date date = testCalendar.getTime();  

 System.out.println(""Before round() "" + date);  

 System.out.println(""After round() "" + DateUtils.round(date, Calendar.MINUTE));  

}


--2.1 produces  

Before round() Mon Jul 02 03:09:50 CDT 2007  

After round() Mon Jul 02 03:10:00 CDT 2007 – this is what I would expect


--2.2 and 2.3 produces  

Before round() Mon Jul 02 03:09:50 CDT 2007  

After round() Mon Jul 02 03:01:00 CDT 2007 – this appears to be wrong"
Lang,54,LocaleUtils.func_fde2b9fc46631d5524134ea60bb1d8560a465b1bafd64e9ac76eda28b739b252() rejects strings with only language+variant,"LocaleUtils.func_fde2b9fc46631d5524134ea60bb1d8560a465b1bafd64e9ac76eda28b739b252() throws an exception on strings containing a language and a variant but no country code. For example : fr\_\_POSIX


This string can be produced with the JDK by instanciating a Locale with an empty string for the country : new Locale(""fr"", """", ""POSIX"").toString(). According to the javadoc for the Locale class a variant is allowed with just a language code or just a country code.


Commons Configuration handles this case in its PropertyConverter.func_fde2b9fc46631d5524134ea60bb1d8560a465b1bafd64e9ac76eda28b739b252() method. I'd like to replace our implementation by the one provided by LocaleUtils, but our tests fail due to this case."
Lang,55,"StopWatch: suspend() acts as split(), if followed by func_6c45cb72a36e63d522aa54ed8adbd7a29a989474f2f77e0458af8800564ef3cb()","In my opinion, it is a bug that suspend() acts as split(), if followed by func_6c45cb72a36e63d522aa54ed8adbd7a29a989474f2f77e0458af8800564ef3cb(); see below:


 StopWatch sw = new StopWatch();


 sw.start();  

 Thread.sleep(1000);  

 sw.suspend();  

 // Time 1 (ok)  

 System.out.println(sw.getTime());


 Thread.sleep(2000);  

 // Time 1 (again, ok)  

 System.out.println(sw.getTime());


 sw.resume();  

 Thread.sleep(3000);  

 sw.suspend();  

 // Time 2 (ok)  

 System.out.println(sw.getTime());


 Thread.sleep(4000);  

 // Time 2 (again, ok)  

 System.out.println(sw.getTime());


 Thread.sleep(5000);  

 sw.func_6c45cb72a36e63d522aa54ed8adbd7a29a989474f2f77e0458af8800564ef3cb();  

 // Time 2 (should be, but is Time 3 => NOT ok)  

 System.out.println(sw.getTime());


suspend/resume is like a pause, where time counter doesn't continue. So a following func_6c45cb72a36e63d522aa54ed8adbd7a29a989474f2f77e0458af8800564ef3cb()-call shouldn't increase the time counter, should it?"
Lang,57,NullPointerException in func_74afe233a5e4a4a076252dff64262ccf8e32ea45f3aa3d6c63bc0feabde213d6(Locale),"FindBugs pointed out:


 UwF: Field not initialized in constructor: org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet


cAvailableSet is used directly once in the source - and if availableLocaleSet() hasn't been called it will cause a NullPointerException."
Lang,58,NumberUtils.func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 throws NumberFormatException for one digit long,"NumberUtils.func_f3f29d16399d9974b144d94d2bc6f4f5dd15f3cea1484e8469bc226ebb94bb52 throws a NumberFormatException when parsing ""1l"", ""2l"" .. etc...


It works fine if you try to parse ""01l"" or ""02l"". The condition isDigits(numeric.substring(1)), line 455 return false as numeric.substring(1) is an empty string for ""1l"""
Lang,59,Bug in method func_ae500915346fd82ea28959bef3970ef64d22be92c2e9d770c9854041cd0260ef of class StrBuilder causes an ArrayIndexOutOfBoundsException,"There's a bug in method func_ae500915346fd82ea28959bef3970ef64d22be92c2e9d770c9854041cd0260ef of class StrBuilder:


public StrBuilder func_ae500915346fd82ea28959bef3970ef64d22be92c2e9d770c9854041cd0260ef(Object obj, int width, char padChar) {  

 if (width > 0) {  

 ensureCapacity(size + width);  

 String str = (obj == null ? getNullText() : obj.toString());  

 int strLen = str.length();  

 if (strLen >= width) 


{
 ==> str.getChars(0, strLen, buffer, size); <==== BUG: it should be str.getChars(0, width, buffer, size);
 }
 else {  

 int padLen = width - strLen;  

 str.getChars(0, strLen, buffer, size);  

 for (int i = 0; i < padLen; i++) 


{
 buffer[size + strLen + i] = padChar;
 }
 }  

 size += width;  

 }  

 return this;  

 }


This is causing an ArrayIndexOutOfBoundsException, so this method is unusable when strLen > width.


It's counterpart method appendFixedWidthPadLeft seems to be ok."
Lang,61,StrBuilder.replaceAll and StrBuilder.deleteAll can throw ArrayIndexOutOfBoundsException.,"StrBuilder.replaceAll and StrBuilder.deleteAll can thrown ArrayIndexOutOfBoundsException's. Here are a couple of additions to the StrBuilderTest class that demonstrate this problem:


StrBuilder.deleteAll() - added to testDeleteAll\_String():


 sb = new StrBuilder(""\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"");  

 sb.deleteAll(""\n%BLAH%"");  

 assertEquals(""\nDo more stuff\neven more stuff\n"", sb.toString());


this causes the following error:  

java.lang.ArrayIndexOutOfBoundsException  

 at java.lang.System.arraycopy(Native Method)  

 at org.apache.commons.lang.text.StrBuilder.deleteImpl(StrBuilder.java:1114)  

 at org.apache.commons.lang.text.StrBuilder.deleteAll(StrBuilder.java:1188)  

 at org.apache.commons.lang.text.StrBuilderTest.testDeleteAll\_String(StrBuilderTest.java:606)  

 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  

 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)  

 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)  

 at java.lang.reflect.Method.invoke(Method.java:585)  

 at junit.framework.TestCase.runTest(TestCase.java:154)  

 at junit.framework.TestCase.runBare(TestCase.java:127)  

 at junit.framework.TestResult$1.protect(TestResult.java:106)  

 at junit.framework.TestResult.runProtected(TestResult.java:124)  

 at junit.framework.TestResult.run(TestResult.java:109)  

 at junit.framework.TestCase.run(TestCase.java:118)  

 at junit.framework.TestSuite.runTest(TestSuite.java:208)  

 at junit.framework.TestSuite.run(TestSuite.java:203)  

 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)  

 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)


StrBuilder.replaceAll() - added to testReplaceAll\_String\_String():


 sb = new StrBuilder(""\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"");  

 sb.replaceAll(""\n%BLAH%"", """");  

 assertEquals(""\nDo more stuff\neven more stuff\n"", sb.toString());


this causes the exception:


java.lang.ArrayIndexOutOfBoundsException  

 at java.lang.System.arraycopy(Native Method)  

 at org.apache.commons.lang.text.StrBuilder.replaceImpl(StrBuilder.java:1256)  

 at org.apache.commons.lang.text.StrBuilder.replaceAll(StrBuilder.java:1339)  

 at org.apache.commons.lang.text.StrBuilderTest.testReplaceAll\_String\_String(StrBuilderTest.java:763)  

 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  

 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)  

 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)  

 at java.lang.reflect.Method.invoke(Method.java:585)  

 at junit.framework.TestCase.runTest(TestCase.java:154)  

 at junit.framework.TestCase.runBare(TestCase.java:127)  

 at junit.framework.TestResult$1.protect(TestResult.java:106)  

 at junit.framework.TestResult.runProtected(TestResult.java:124)  

 at junit.framework.TestResult.run(TestResult.java:109)  

 at junit.framework.TestCase.run(TestCase.java:118)  

 at junit.framework.TestSuite.runTest(TestSuite.java:208)  

 at junit.framework.TestSuite.run(TestSuite.java:203)  

 at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)  

 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)  

 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)"
Lang,65,[lang] DateUtils.truncate method is buggy when dealing with DST switching hours,"Try to truncate 2004-10-31 01:00:00 MDT by hour and you'll actually get 2004-10-  

31 01:00:00 MST, which is one hour after the input hour.


 // truncate 2004-10-31 01:00:00 MDT  

 Date oct31\_01MDT = new Date(1099206000000L);   

 Date result = DateUtils.truncate(oct31\_01MDT, Calendar.HOUR\_OF\_DAY);  

 assertEquals(oct31\_01MDT, result);"
Math,2,HypergeometricDistribution.sample suffers from integer overflow,"Hi, I have an application which broke when ported from commons math 2.2 to 3.2. It looks like the HypergeometricDistribution.sample() method doesn't work as well as it used to with large integer values – the example code below should return a sample between 0 and 50, but usually returns -50.




```
import org.apache.commons.math3.distribution.HypergeometricDistribution;

public class Foo {
  public static void main(String[] args) {
    HypergeometricDistribution a = new HypergeometricDistribution(
        43130568, 42976365, 50);
    System.out.printf(""%d %d%n"", a.getSupportLowerBound(), a.getSupportUpperBound()); // Prints ""0 50""
    System.out.printf(""%d%n"",a.sample());                                             // Prints ""-50""
  }
}

```


In the debugger, I traced it as far as an integer overflow in HypergeometricDistribution.func_dc75b466e43a09cac57fd741ca491df5564992274743859969be7830f7088430() – instead of doing




```
return (double) (getSampleSize() \* getNumberOfSuccesses()) / (double) getPopulationSize();

```


it could do:




```
return getSampleSize() \* ((double) getNumberOfSuccesses() / (double) getPopulationSize());

```


This seemed to fix it, based on a quick test."
Math,3,ArrayIndexOutOfBoundsException in MathArrays.func_758160ee6c15b79fae0297c97c8071498452d37d1952ce5a27a3aa2f90bdb6c2,"When MathArrays.func_758160ee6c15b79fae0297c97c8071498452d37d1952ce5a27a3aa2f90bdb6c2 is passed arguments with length 1, it throws an ArrayOutOfBoundsException. This is caused by this line:


double prodHighNext = prodHigh[1];


func_758160ee6c15b79fae0297c97c8071498452d37d1952ce5a27a3aa2f90bdb6c2 should check the length of the arguments and fall back to simple multiplication if length == 1."
Math,5,Complex.ZERO.func_3a2a3e1129ee00e69b6bec431993b11ec05b1e9c53612e62e175b4f7fea52d11() returns NaN but should return INF.,"Complex.ZERO.func_3a2a3e1129ee00e69b6bec431993b11ec05b1e9c53612e62e175b4f7fea52d11() returns NaN but should return INF.


Class: org.apache.commons.math3.complex.Complex;  

Method: func_3a2a3e1129ee00e69b6bec431993b11ec05b1e9c53612e62e175b4f7fea52d11()  

@version $Id: Complex.java 1416643 2012-12-03 19:37:14Z tn $"
Math,9,Line.func_07913239c9e8d42fcd39da156d79fea4dcc8b373ef5cd2696b49275bc7887669() is imprecise,"Line.func_07913239c9e8d42fcd39da156d79fea4dcc8b373ef5cd2696b49275bc7887669() only maintains ~10 digits for the direction. This becomes an issue when the line's position is evaluated far from the origin. A simple fix would be to use Vector3D.negate() for the direction.


Also, is there a reason why Line is not immutable? It is just comprised of two vectors."
Math,10,"DerivativeStructure.func_896128b697a293d47f2ed15754bd5d444a62e3a2edb8d24b4a4667775cd3682b(y,x) does not handle special cases properly","The four special cases +/-0 for both x and y should give the same values as Math.func_896128b697a293d47f2ed15754bd5d444a62e3a2edb8d24b4a4667775cd3682b and FastMath.func_896128b697a293d47f2ed15754bd5d444a62e3a2edb8d24b4a4667775cd3682b. However, they give NaN for the value in all cases."
Math,11,MultivariateNormalDistribution.func_06f8382071a4109d1a1037036a2636cad2a42fe43c64ffe1c51025768403aeb3(double[]) returns wrong value when the dimension is odd,"To reproduce:




```
Assert.assertEquals(0.398942280401433, new MultivariateNormalDistribution(new double[]{0}, new double[][]{{1}}).func_06f8382071a4109d1a1037036a2636cad2a42fe43c64ffe1c51025768403aeb3(new double[]{0}), 1e-15);

```"
Math,13,new multivariate vector optimizers cannot be used with large number of weights,"When using the Weigth class to pass a large number of weights to multivariate vector optimizers, an nxn full matrix is created (and copied) when a n elements vector is used. This exhausts memory when n is large.


This happens for example when using curve fitters (even simple curve fitters like polynomial ones for low degree) with large number of points. I encountered this with curve fitting on 41200 points, which created a matrix with 1.7 billion elements."
Math,15,"FastMath.func_a6b829b01daf8ffc890db747189776f070e6d05e8be99c0e1b13d6792841f1ed deviates from Math.func_a6b829b01daf8ffc890db747189776f070e6d05e8be99c0e1b13d6792841f1ed for negative, finite base values with an exponent 2^52 < y < 2^53","As reported by Jeff Hain:


func_a6b829b01daf8ffc890db747189776f070e6d05e8be99c0e1b13d6792841f1ed(double,double):  

Math.func_a6b829b01daf8ffc890db747189776f070e6d05e8be99c0e1b13d6792841f1ed(-1.0,5.000000000000001E15) = -1.0  

FastMath.func_a6b829b01daf8ffc890db747189776f070e6d05e8be99c0e1b13d6792841f1ed(-1.0,5.000000000000001E15) = 1.0  

===> This is due to considering that func_a6b829b01daf8ffc890db747189776f070e6d05e8be99c0e1b13d6792841f1eder is an even  

integer if it is >= 2^52, while you need to test  

that it is >= 2^53 for it.  

===> replace  

""if (y >= TWO\_POWER\_52 || y <= -TWO\_POWER\_52)""  

with  

""if (y >= 2\*TWO\_POWER\_52 || y <= -2\*TWO\_POWER\_52)""  

and that solves it."
Math,17,Dfp Dfp.func_0d31bc618d289b7eda5d413aa5f44ef7e618b0732556a9df39c22d8a21d8ef75(int x) does not comply with the general contract FieldElement.func_0d31bc618d289b7eda5d413aa5f44ef7e618b0732556a9df39c22d8a21d8ef75(int n),"In class org.apache.commons.math3.Dfp, the method func_0d31bc618d289b7eda5d413aa5f44ef7e618b0732556a9df39c22d8a21d8ef75(int n) is limited to 0 <= n <= 9999. This is not consistent with the general contract of FieldElement.func_0d31bc618d289b7eda5d413aa5f44ef7e618b0732556a9df39c22d8a21d8ef75(int n), where there should be no limitation on the values of n."
Math,19,Wide bounds to CMAESOptimizer result in NaN parameters passed to fitness function,"If you give large values as lower/upper bounds (for example -Double.MAX\_VALUE as a lower bound), the optimizer can call the fitness function with parameters set to NaN. My guess is this is due to FitnessFunction.encode/decode generating NaN when normalizing/denormalizing parameters. For example, if the difference between the lower and upper bound is greater than Double.MAX\_VALUE, encode could divide infinity by infinity."
Math,20,CMAESOptimizer does not enforce bounds,"The CMAESOptimizer can exceed the bounds passed to optimize. Looking at the generationLoop in doOptimize(), it does a bounds check by calling isFeasible() but if checkFeasableCount is zero (the default) then isFeasible() is never even called. Also, even with non-zero checkFeasableCount it may give up before finding an in-bounds offspring and go forward with an out-of-bounds offspring. This is against svn revision 1387637. I can provide an example program where the optimizer ends up with a fit outside the prescribed bounds if that would help."
Math,21,Correlated random vector generator fails (silently) when faced with zero rows in covariance matrix,"The following three matrices (which are basically permutations of each other) produce different results when sampling a multi-variate Gaussian with the help of CorrelatedRandomVectorGenerator (sample covariances calculated in R, based on 10,000 samples):


Array2DRowRealMatrix


{
{0.0,0.0,0.0,0.0,0.0}
,


{0.0,0.013445532,0.01039469,0.009881156,0.010499559}
,


{0.0,0.01039469,0.023006616,0.008196856,0.010732709}
,


{0.0,0.009881156,0.008196856,0.019023866,0.009210099}
,  

{0.0,0.010499559,0.010732709,0.009210099,0.019107243}}


> cov(data1)  

 V1 V2 V3 V4 V5  

V1 0 0.000000000 0.00000000 0.000000000 0.000000000  

V2 0 0.013383931 0.01034401 0.009913271 0.010506733  

V3 0 0.010344006 0.02309479 0.008374730 0.010759306  

V4 0 0.009913271 0.00837473 0.019005488 0.009187287  

V5 0 0.010506733 0.01075931 0.009187287 0.019021483


Array2DRowRealMatrix


{
{0.013445532,0.01039469,0.0,0.009881156,0.010499559}
,


{0.01039469,0.023006616,0.0,0.008196856,0.010732709}
,


{0.0,0.0,0.0,0.0,0.0},
{0.009881156,0.008196856,0.0,0.019023866,0.009210099},  

{0.010499559,0.010732709,0.0,0.009210099,0.019107243}}  

  

> cov(data2)  

 V1 V2 V3 V4 V5  

V1 0.006922905 0.010507692 0 0.005817399 0.010330529  

V2 0.010507692 0.023428918 0 0.008273152 0.010735568  

V3 0.000000000 0.000000000 0 0.000000000 0.000000000  

V4 0.005817399 0.008273152 0 0.004929843 0.009048759  

V5 0.010330529 0.010735568 0 0.009048759 0.018683544   

  

Array2DRowRealMatrix{
{0.013445532,0.01039469,0.009881156,0.010499559},
{0.01039469,0.023006616,0.008196856,0.010732709},
{0.009881156,0.008196856,0.019023866,0.009210099},  

{0.010499559,0.010732709,0.009210099,0.019107243}}  

  

> cov(data3)  

 V1 V2 V3 V4  

V1 0.013445047 0.010478862 0.009955904 0.010529542  

V2 0.010478862 0.022910522 0.008610113 0.011046353  

V3 0.009955904 0.008610113 0.019250975 0.009464442  

V4 0.010529542 0.011046353 0.009464442 0.019260317  

  

  

I've traced this back to the func_371eb14fd4f4fb98033199cdea3921864330cfe65fbdc86b58c5c277af5aa8e1, which does not seem to handle the second matrix very well (decompositions in the same order as the matrices above):  

  

CorrelatedRandomVectorGenerator.getRootMatrix() =   

Array2DRowRealMatrix{{0.0,0.0,0.0,0.0,0.0}
,


{0.0759577418122063,0.0876125188474239,0.0,0.0,0.0}
,


{0.07764443622513505,0.05132821221460752,0.11976381821791235,0.0,0.0}
,


{0.06662930527909404,0.05501661744114585,0.0016662506519307997,0.10749324207653632,0.0}
,{0.13822895138139477,0.0,0.0,0.0,0.0}}  

CorrelatedRandomVectorGenerator.getRank() = 5


CorrelatedRandomVectorGenerator.getRootMatrix() =   

Array2DRowRealMatrix{{0.0759577418122063,0.034512751379448724,0.0},


{0.07764443622513505,0.13029949164628746,0.0}
,


{0.0,0.0,0.0}
,


{0.06662930527909404,0.023203936694855674,0.0}
,{0.13822895138139477,0.0,0.0}}  

CorrelatedRandomVectorGenerator.getRank() = 3


CorrelatedRandomVectorGenerator.getRootMatrix() =   

Array2DRowRealMatrix{{0.0759577418122063,0.034512751379448724,0.033913748226348225,0.07303890149947785},


{0.07764443622513505,0.13029949164628746,0.0,0.0}
,


{0.06662930527909404,0.023203936694855674,0.11851573313229945,0.0}
,{0.13822895138139477,0.0,0.0,0.0}}  

CorrelatedRandomVectorGenerator.getRank() = 4


Clearly, the rank of each of these matrices should be 4. The first matrix does not lead to incorrect results, but the second one does. Unfortunately, I don't know enough about the Cholesky decomposition to find the flaw in the implementation, and I could not find documentation for the ""rectangular"" variant (also not at the links provided in the javadoc)."
Math,23,"""BrentOptimizer"" not always reporting the best point","BrentOptimizer (package ""o.a.c.m.optimization.univariate"") does not check that the point it is going to return is indeed the best one it has encountered. Indeed, the last evaluated point might be slightly worse than the one before last."
Math,24,"""BrentOptimizer"" not always reporting the best point","BrentOptimizer (package ""o.a.c.m.optimization.univariate"") does not check that the point it is going to return is indeed the best one it has encountered. Indeed, the last evaluated point might be slightly worse than the one before last."
Math,25,"""HarmonicFitter.ParameterGuesser"" sometimes fails to return sensible values","The inner class ""ParameterGuesser"" in ""HarmonicFitter"" (package ""o.a.c.m.optimization.fitting"") fails to compute a usable guess for the ""amplitude"" parameter."
Math,26,"func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be(double, int) constructor strange behaviour","The func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be constructor func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be(double, int) takes a double value and a int maximal denominator, and approximates a fraction. When the double value is a large, negative number with many digits in the fractional part, and the maximal denominator is a big, positive integer (in the 100'000s), two distinct bugs can manifest:


1: the constructor returns a positive func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be. Calling func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be(-33655.1677817278, 371880) returns the fraction 410517235/243036, which both has the wrong sign, and is far away from the absolute value of the given value


2: the constructor does not manage to reduce the func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be properly. Calling func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be(-43979.60679604749, 366081) returns the fraction -1651878166/256677, which should have\* been reduced to -24654898/3831.


I have, as of yet, not found a solution. The constructor looks like this:


public func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be(double value, int maxDenominator)  

 throws func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9beConversionException


 {
 this(value, 0, maxDenominator, 100);
 }

Increasing the 100 value (max iterations) does not fix the problem for all cases. Changing the 0-value (the epsilon, maximum allowed error) to something small does not work either, as this breaks the tests in func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9beTest. 


The problem is not neccissarily that the algorithm is unable to approximate a fraction correctly. A solution where a func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9beConversionException had been thrown in each of these examples would probably be the best solution if an improvement on the approximation algorithm turns out to be hard to find.


This bug has been found when trying to explore the idea of axiom-based testing (<http://bldl.ii.uib.no/testing.html>). Attached is a java test class func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9beTestByAxiom (junit, goes into org.apache.commons.math3.fraction) which shows these bugs through a simplified approach to this kind of testing, and a text file describing some of the value/maxDenominator combinations which causes one of these failures.


* It is never specified in the documentation that the func_1b3350570724a4f46133585b04ad1d3cffd056c5bbb314e726e580a055c2e9be class guarantees that completely reduced rational numbers are constructed, but a comment inside the equals method claims that ""since fractions are always in lowest terms, numerators and can be compared directly for equality"", so it seems like this is the intention."
Math,27,Fraction func_c8d6d46452ad9771fe6fa9eaf46eaf6b4df56bad529d25f3932f6f6d54aa6cb5 rare overflow,"The func_c8d6d46452ad9771fe6fa9eaf46eaf6b4df56bad529d25f3932f6f6d54aa6cb5() method of the Fraction class works by first multiplying the Fraction by 100, then converting the Fraction to a double. This causes overflows when the numerator is greater than Integer.MAX\_VALUE/100, even when the value of the fraction is far below this value.


The patch changes the method to first convert to a double value, and then multiply this value by 100 - the result should be the same, but with less overflows. An addition to the test for the method that covers this bug is also included."
Math,28,Not expected UnboundedSolutionException,"SimplexSolver throws UnboundedSolutionException when trying to solve minimization linear programming problem. The number of exception thrown depends on the number of variables.


In order to see that behavior of SimplexSolver first try to run JUnit test setting a final variable ENTITIES\_COUNT = 2 and that will give almost good result and then set it to 15 and you'll get a massive of unbounded exceptions.  

First iteration is runned with predefined set of input data with which the Solver gives back an appropriate result.


The problem itself is well tested by it's authors (mathematicians who I believe know what they developed) using Matlab 10 with no unbounded solutions on the same rules of creatnig random variables values.


What is strange to me is the dependence of the number of UnboundedSolutionException exceptions on the number of variables in the problem.


The problem is formulated as  

min(1\*t + 0\*L) (for every r-th subject)  

s.t.  

-q(r) + QL >= 0  

x(r)t - XL >= 0  

L >= 0  

where   

r = 1..R,   

L = 


{l(1), l(2), ..., l(R)}
 (vector of R rows and 1 column),  

Q - coefficients matrix MxR  

X - coefficients matrix NxR"
Math,30,Mann-Whitney U Test Suffers From Integer Overflow With Large Data Sets,"When performing a Mann-Whitney U Test on large data sets (the attached test uses two 1500 element sets), intermediate integer values used in func_b9175b25d70234b0cbfc2fd7697626097484496ca2850913c28066de812659ef can overflow, leading to invalid results, such as p-values of NaN, or incorrect calculations.


Attached is a patch, including a test, and a fix, which modifies the affected code to use doubles"
Math,31,inverseCumulativeProbability of BinomialDistribution returns wrong value for large trials.,"The inverseCumulativeProbability method of the BinomialDistributionImpl class returns wrong value for large trials. Following code will be reproduce the problem.


System.out.println(new BinomialDistributionImpl(1000000, 0.5).inverseCumulativeProbability(0.5));


This returns 499525, though it should be 499999.


I'm not sure how it should be fixed, but the cause is that the cumulativeProbability method returns Infinity, not NaN. As the result the checkedCumulativeProbability method doesn't work as expected."
Math,32,BSPTree class and recovery of a Euclidean 3D BRep,"New to the work here. Thanks for your efforts on this code.


I create a BSPTree from a BoundaryRep (Brep) my test Brep is a cube as represented by a float array containing 8 3D points in(x,y,z) order and an array of indices (12 triplets for the 12 faces of the cube). I construct a BSPMesh() as shown in the code below. I can construct the PolyhedronsSet() but have problems extracting the faces from the BSPTree to reconstruct the BRep. The attached code (BSPMesh2.java) shows that a small change to 1 of the vertex positions causes/corrects the problem.


Any ideas?"
Math,33,SimplexSolver gives bad results,"Methode SimplexSolver.optimeze(...) gives bad results with commons-math3-3.0  

in a simple test problem. It works well in commons-math-2.2."
Math,34,ListPopulation Iterator allows you to remove chromosomes from the population.,Calling the func_ef9baedff2f457ddd3f1382fd265db536122a0bba2996c196d28ba18e25205b0 method of ListPopulation returns an func_ef9baedff2f457ddd3f1382fd265db536122a0bba2996c196d28ba18e25205b0 of the protected modifiable list. Before returning the func_ef9baedff2f457ddd3f1382fd265db536122a0bba2996c196d28ba18e25205b0 we should wrap it in an unmodifiable list.
Math,38,Errors in BOBYQAOptimizer when numberOfInterpolationPoints is greater than 2*dim+1,"I've been having trouble getting BOBYQA to minimize a function (actually a non-linear least squares fit) so as one change I increased the number of interpolation points. It seems that anything larger than 2\*dim+1 causes an error (typically at


line 1662  

 interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));


I'm guessing there is an off by one error in the translation from FORTRAN. Changing the BOBYQAOptimizerTest as follows (increasing number of interpolation points by one) will cause failures.


Bruce


Index: src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java  

===================================================================  

— src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java (revision 1221065)  

+++ src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java (working copy)  

@@ -258,7 +258,7 @@  

 // RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);  

 final double[] lB = boundaries == null ? null : boundaries[0];  

 final double[] uB = boundaries == null ? null : boundaries[1];


* BOBYQAOptimizer optim = new BOBYQAOptimizer(2 \* dim + 1);  

+ BOBYQAOptimizer optim = new BOBYQAOptimizer(2 \* dim + 2);  

 RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);  

 // System.out.println(func.getClass().getName() + "" = ""   

 // + optim.getEvaluations() + "" f("");"
Math,39,"too large first step with embedded Runge-Kutta integrators (Dormand-Prince 8(5,3) ...)","Adaptive step size integrators compute the first step size by themselves if it is not provided.  

For embedded Runge-Kutta type, this step size is not checked against the integration range, so if the integration range is extremely short, this step size may evaluate the function out of the range (and in fact it tries afterward to go back, and fails to stop). Gragg-Bulirsch-Stoer integrators do not have this problem, the step size is checked and truncated if needed."
Math,40,BracketingNthOrderBrentSolver exceeds maxIterationCount while updating always the same boundary,"In some cases, the aging feature in BracketingNthOrderBrentSolver fails.  

It attempts to balance the bracketing points by targeting a non-zero value instead of the real root. However, the chosen target is too close too zero, and the inverse polynomial approximation is always on the same side, thus always updates the same bracket.  

In the real used case for a large program, I had a bracket point xA = 12500.0, yA = 3.7e-16, agingA = 0, which is the (really good) estimate of the zero on one side of the root and xB = 12500.03, yB = -7.0e-5, agingB = 97. This shows that the bracketing interval is completely unbalanced, and we never succeed to rebalance it as we always updates (xA, yA) and never updates (xB, yB)."
Math,41,One of Variance.func_10aca1d8b724381a8cbeb66e3dba3007ed1e40b0c2d9cca3448a22689311b936() methods does not work correctly,"The method org.apache.commons.math.stat.descriptive.moment.Variance.func_10aca1d8b724381a8cbeb66e3dba3007ed1e40b0c2d9cca3448a22689311b936(double[] values, double[] weights, double mean, int begin, int length) does not work properly. Looks loke it ignores the length parameter and grabs the whole dataset.  

Similar method in Mean class seems to work.  

I did not check other methods taking the part of the array; they may have the same problem.


Workaround: I had to shrink my arrays and use the method without the length."
Math,42,Negative value with restrictNonNegative,"Problem: commons-math-2.2 SimplexSolver.


A variable with 0 coefficient may be assigned a negative value nevertheless restrictToNonnegative flag in call:  

SimplexSolver.optimize(function, constraints, GoalType.MINIMIZE, true);


Function  

1 \* x + 1 \* y + 0


Constraints:  

1 \* x + 0 \* y = 1


Result:  

x = 1; y = -1;


Probably variables with 0 coefficients are omitted at some point of computation and because of that the restrictions do not affect their values."
Math,43,Statistics.setVarianceImpl makes getStandardDeviation produce NaN,"Invoking SummaryStatistics.setVarianceImpl(new Variance(true/false) makes getStandardDeviation produce NaN. The code to reproduce it:




```
int[] scores = {1, 2, 3, 4};
SummaryStatistics stats = new SummaryStatistics();
stats.setVarianceImpl(new Variance(false)); //use ""population variance""
for(int i : scores) {
  stats.func_dfef6e8f491525ee2ae43a86916c0cced50aa791876d7dfcf101fc7f3707f619(i);
}
double sd = stats.getStandardDeviation();
System.out.println(sd);

```


A workaround suggested by Mikkel is:




```
  double sd = FastMath.sqrt(stats.getSecondMoment() / stats.getN());

```"
Math,45,Integer overflow in func_1c0bb683f1b016981febe245349a545f7e67a8b1f003593ad760ba1854dee3a5,"computeKey() has an integer overflow. Since it is a sparse matrix, this is quite easily encountered long before heap space is exhausted. The attached code demonstrates the problem, which could potentially be a security vulnerability (for example, if one was to use this matrix to store access control information).


Workaround: never create an func_1c0bb683f1b016981febe245349a545f7e67a8b1f003593ad760ba1854dee3a5 with more cells than are addressable with an int."
Math,48,"""RegulaFalsiSolver"" failure","The following unit test:




```
@Test
public void testBug() {
    final UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

    UnivariateRealSolver solver = new RegulaFalsiSolver();
    double root = solver.solve(100, f, 1, 10);
}

```


fails with




```
illegal state: maximal count (100) exceeded: evaluations

```


Using ""PegasusSolver"", the answer is found after 17 evaluations."
Math,50,"""RegulaFalsiSolver"" failure","The following unit test:




```
@Test
public void testBug() {
    final UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

    UnivariateRealSolver solver = new RegulaFalsiSolver();
    double root = solver.solve(100, f, 1, 10);
}

```


fails with




```
illegal state: maximal count (100) exceeded: evaluations

```


Using ""PegasusSolver"", the answer is found after 17 evaluations."
Math,51,"""RegulaFalsiSolver"" failure","The following unit test:




```
@Test
public void testBug() {
    final UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

    UnivariateRealSolver solver = new RegulaFalsiSolver();
    double root = solver.solve(100, f, 1, 10);
}

```


fails with




```
illegal state: maximal count (100) exceeded: evaluations

```


Using ""PegasusSolver"", the answer is found after 17 evaluations."
Math,53,"Complex Add and Subtract handle NaN arguments differently, but javadoc contracts are the same","For both Complex func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767 and subtract, the javadoc states that




```
     \* If either this or <code>rhs</code> has a NaN value in either part,
     \* {@link #NaN} is returned; otherwise Inifinite and NaN values are
     \* returned in the parts of the result according to the rules for
     \* {@link java.lang.Double} arithmetic

```


Subtract includes an isNaN test and returns Complex.NaN if either complex argument isNaN; but func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767 omits this test. The test should be func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767ed to the func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767 implementation (actually restored, since this looks like a code merge problem going back to 1.1)."
Math,54,"class Dfp func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271 method return -inf whan Dfp value is 0 ""zero""","I found a bug in the func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271() method of the Dfp class.  

If the Dfp's value is 0 ""zero"", the func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271() method returns a negative infini.


This is because the double value returned has an exposant equal to 0xFFF   

and a significand is equal to 0.  

In the IEEE754 this is a -inf.


To be equal to zero, the exposant and the significand must be equal to zero.


A simple test case is :  

----------------------------------------------  

import org.apache.commons.math.dfp.DfpField;


public class test {


 /\*\*


* @param args  

 \*/  

 public static void main(String[] args) 
{
 DfpField field = new DfpField(100);
 System.out.println(""func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271 value of getZero() =""+field.getZero().func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271()+
 ""\nfunc_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271 value of newDfp(0.0) =""+
 field.newDfp(0.0).func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271());
 }
}


May be the simplest way to fix it is to test the zero equality at the begin of the func_1967d4f1f4c63e6cd596d899e9448651509d0f133ad96043afb64018ea0f1271() method, to be able to return the correctly signed zero ?"
Math,55,Vector3D.func_738669777206c28fca68057d1c7553fd12ffd220b813b7588396bae3cf52042e is sensitive to numerical cancellation,"Cross product implementation uses the naive formulas (y1 z2 - y2 z1, ...). These formulas fail when vectors are almost colinear, like in the following example:




```
Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);
Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);
System.out.println(Vector3D.func_738669777206c28fca68057d1c7553fd12ffd220b813b7588396bae3cf52042e(v1, v2));

```


The previous code displays 


{ -1, 2, 0 }
 instead of the correct answer 


{ -1, 2, 1 }"
Math,56,MultidimensionalCounter.func_129be2794cd7bd747569c7892d1eeb7417284846233ea96d5ac6423b6da030d6(int) returns wrong array of indices,"MultidimensionalCounter counter = new MultidimensionalCounter(2, 4);  

for (Integer i : counter) {  

 int[] x = counter.func_129be2794cd7bd747569c7892d1eeb7417284846233ea96d5ac6423b6da030d6![](/jira/images/icons/emoticons/information.png);  

 System.out.println(i + "" "" + Arrays.toString![](/jira/images/icons/emoticons/error.png));  

}


Output is:  

0 [0, 0]  

1 [0, 1]  

2 [0, 2]  

3 [0, 2] <=== should be [0, 3]  

4 [1, 0]  

5 [1, 1]  

6 [1, 2]  

7 [1, 2] <=== should be [1, 3]"
Math,57,Truncation issue in KMeansPlusPlusClusterer,"The for loop inside KMeansPlusPlusClusterer.chooseInitialClusters defines a variable  

 int sum = 0;  

This variable should have type double, rather than int. Using an int causes the method to truncate the distances between points to (square roots of) integers. It's especially bad when the distances between points are typically less than 1.


As an aside, in version 2.2, this bug manifested itself by making the func_164cf1ca8391532e4f239c556c0c19589ae8877cb25ecfaf0b310c6c3713ba1fer return empty func_164cf1ca8391532e4f239c556c0c19589ae8877cb25ecfaf0b310c6c3713ba1fs. I wonder if the EmptyClusterStrategy would still be necessary if this bug were fixed."
Math,58,GaussianFitter Unexpectedly Throws NotStrictlyPositiveException,"Running the following:


 double[] observations =   




{ 
 1.1143831578403364E-29, 
 4.95281403484594E-28, 
 1.1171347211930288E-26, 
 1.7044813962636277E-25, 
 1.9784716574832164E-24, 
 1.8630236407866774E-23, 
 1.4820532905097742E-22, 
 1.0241963854632831E-21, 
 6.275077366673128E-21, 
 3.461808994532493E-20, 
 1.7407124684715706E-19, 
 8.056687953553974E-19, 
 3.460193945992071E-18, 
 1.3883326374011525E-17, 
 5.233894983671116E-17, 
 1.8630791465263745E-16, 
 6.288759227922111E-16, 
 2.0204433920597856E-15, 
 6.198768938576155E-15, 
 1.821419346860626E-14, 
 5.139176445538471E-14, 
 1.3956427429045787E-13, 
 3.655705706448139E-13, 
 9.253753324779779E-13, 
 2.267636001476696E-12, 
 5.3880460095836855E-12, 
 1.2431632654852931E-11 
 }
;


 GaussianFitter g =   

 new GaussianFitter(new LevenbergMarquardtOptimizer());


 for (int index = 0; index < 27; index++)


 {
 g.addObservedPoint(index, observations[index]);
 }
 g.func_da4270e3735a3418c9d462af2e17d045132dede43df058e85b1f0399fcf96f1b();


Results in:


org.apache.commons.math.exception.NotStrictlyPositiveException: -1.277 is smaller than, or equal to, the minimum (0)  

 at org.apache.commons.math.analysis.function.Gaussian$Parametric.validateParameters(Gaussian.java:184)  

 at org.apache.commons.math.analysis.function.Gaussian$Parametric.value(Gaussian.java:129)


I'm guessing the initial guess for sigma is off."
Math,59,"FastMath.func_9baf3a40312f39849f46dad1040f2f039f1cffa1238c41e9db675315cfad39b6(50.0f, -50.0f) => -50.0f; should be +50.0f","FastMath.func_9baf3a40312f39849f46dad1040f2f039f1cffa1238c41e9db675315cfad39b6(50.0f, -50.0f) => -50.0f; should be +50.0f.


This is because the wrong variable is returned.


The bug was not detected by the test case ""testMinMaxFloat()"" because that has a bug too - it tests doubles, not floats."
Math,60,ConvergenceException in NormalDistributionImpl.func_7c06cbc7a3a7e0e59467e309737fa1da8663f7b3109c18909423e3a404e92da1(),"I get a ConvergenceException in NormalDistributionImpl.func_7c06cbc7a3a7e0e59467e309737fa1da8663f7b3109c18909423e3a404e92da1() for very large/small parameters including Infinity, -Infinity.  

For instance in the following code:


 @Test  

 public void testCumulative() {  

 final NormalDistribution nd = new NormalDistributionImpl();  

 for (int i = 0; i < 500; i++) {  

 final double val = Math.exp![](/jira/images/icons/emoticons/information.png);  

 try 


{
 System.out.println(""val = "" + val + "" cumulative = "" + nd.func_7c06cbc7a3a7e0e59467e309737fa1da8663f7b3109c18909423e3a404e92da1(val));
 }
 catch (MathException e) 


{
 e.printStackTrace();
 fail();
 }
 }  

 }


In version 2.0, I get no exception. 


My suggestion is to change in the implementation of func_7c06cbc7a3a7e0e59467e309737fa1da8663f7b3109c18909423e3a404e92da1(double) to catch all ConvergenceException (and return for very large and very small values), not just MaxIterationsExceededException."
Math,63,"NaN in ""func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7"" methods","In ""MathUtils"", some ""func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7"" methods will return true if both argument are NaN.  

Unless I'm mistaken, this contradicts the IEEE standard.


If nobody objects, I'm going to make the changes."
Math,64,Inconsistent result from Levenberg-Marquardt,"Levenberg-Marquardt (its method func_0cb7a16154a7b0fe06f3f0be865f52dd6a6e3a77ec5e58720aa8862bb224d92d) returns a VectorialPointValuePair. However, the class holds the optimum point, the vector of the objective function, the cost and residuals. The value returns by func_0cb7a16154a7b0fe06f3f0be865f52dd6a6e3a77ec5e58720aa8862bb224d92d does not always corresponds to the point which leads to the residuals and cost"
Math,69,PearsonsCorrelation.func_06609db5489d097deac230d78d26ed558686db9194f17241e2b4070c2cbb4d5d() precision limited by machine epsilon,"Similar to the issue described in [~~MATH-201~~](https://issues.apache.org/jira/browse/MATH-201 ""T-test p-value precision hampered by machine epsilon""), using PearsonsCorrelation.func_06609db5489d097deac230d78d26ed558686db9194f17241e2b4070c2cbb4d5d() with many treatments results in p-values that are continuous down to 2.2e-16 but that drop to 0 after that.


In [~~MATH-201~~](https://issues.apache.org/jira/browse/MATH-201 ""T-test p-value precision hampered by machine epsilon""), the problem was described as such:  

> So in essence, the p-value returned by TTestImpl.tTest() is:  

>   

> 1.0 - (cumulativeProbability(t) - cumulativeProbabily(-t))  

>   

> For large-ish t-statistics, cumulativeProbabilty(-t) can get quite small, and cumulativeProbabilty(t) can get very close to 1.0. When   

> cumulativeProbability(-t) is less than the machine epsilon, we get p-values equal to zero because:  

>   

> 1.0 - 1.0 + 0.0 = 0.0


The solution in [~~MATH-201~~](https://issues.apache.org/jira/browse/MATH-201 ""T-test p-value precision hampered by machine epsilon"") was to modify the p-value calculation to this:  

> p = 2.0 \* cumulativeProbability(-t)


Here, the problem is similar. From PearsonsCorrelation.func_06609db5489d097deac230d78d26ed558686db9194f17241e2b4070c2cbb4d5d():  

 p = 2 \* (1 - tDistribution.cumulativeProbability(t));


Directly calculating the p-value using identical code as PearsonsCorrelation.func_06609db5489d097deac230d78d26ed558686db9194f17241e2b4070c2cbb4d5d(), but with the following change seems to solve the problem:  

 p = 2 \* (tDistribution.cumulativeProbability(-t));"
Math,70,"BisectionSolver.func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(final UnivariateRealFunction f, double min, double max, double initial) throws NullPointerException","Method 


 BisectionSolver.func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(final UnivariateRealFunction f, double min, double max, double initial) 


invokes 


 BisectionSolver.func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(double min, double max) 


which throws NullPointerException, as member variable


 UnivariateRealSolverImpl.f 


is null.


Instead the method:


 BisectionSolver.func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(final UnivariateRealFunction f, double min, double max)


should be called.


Steps to reproduce:


invoke:


 new BisectionSolver().func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(someUnivariateFunctionImpl, 0.0, 1.0, 0.5);


NullPointerException will be thrown."
Math,72,Brent func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763er returns the wrong value if either bracket endpoint is root,"The func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(final UnivariateRealFunction f, final double min, final double max, final double initial) function returns yMin or yMax if min or max are deemed to be roots, respectively, instead of min or max."
Math,73,Brent func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763er doesn't throw IllegalArgumentException when initial guess has the wrong sign,"Javadoc for ""public double func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(final UnivariateRealFunction f, final double min, final double max, final double initial)"" claims that ""if the values of the function at the three points have the same sign"" an IllegalArgumentException is thrown. This case isn't even checked."
Math,74,Wrong parameter for first step size guess for Embedded Runge Kutta methods,"In a space application using DOP853 i detected what seems to be a bad parameter in the call to the method initializeStep of class AdaptiveStepsizeIntegrator.


Here, DormandPrince853Integrator is a subclass for EmbeddedRungeKuttaIntegrator which perform the call to initializeStep at the beginning of its method func_ad9b338ab555c072a2131a946e8ed993cfcee4fe61c1f65efa37a1ce78ecfed5(...)


The problem comes from the array ""scale"" that is used as a parameter in the call off initializeStep(..)


Following the theory described by Hairer in his book ""Solving Ordinary Differential Equations 1 : Nonstiff Problems"", the scaling should be :


sci = Atol i + |y0i| \* Rtoli


Whereas EmbeddedRungeKuttaIntegrator uses : sci = Atoli


Note that the Gragg-Bulirsch-Stoer integrator uses the good implementation ""sci = Atol i + |y0i| \* Rtoli "" when he performs the call to the same method initializeStep(..)


In the method initializeStep, the error leads to a wrong step size h used to perform an Euler step. Most of the time it is unvisible for the user.  

But in my space application the Euler step with this wrong step size h (much bigger than it should be) makes an exception occur (my satellite hits the ground...)


To fix the bug, one should use the same algorithm as in the rescale method in GraggBulirschStoerIntegrator  

For exemple :


 final double[] scale= new double[y0.length];;


 if (vecAbsoluteTolerance == null) {  

 for (int i = 0; i < scale.length; ++i) 


{
 final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));
 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance \* yi;
 }
 } else {  

 for (int i = 0; i < scale.length; ++i) 


{
 final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));
 scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] \* yi;
 }
 }


 hNew = initializeStep(equations, forward, getOrder(), scale,  

 stepStart, y, yDotK[0], yTmp, yDotK[1]);


Sorry for the length of this message, looking forward to hearing from you soon


Vincent Morand"
Math,75,"In stat.Frequency, func_031354802813669f9d5660a66035cf0e284607a8c182a37950b72edf1492de4b(Object) uses getCumPct(Comparable) instead of func_031354802813669f9d5660a66035cf0e284607a8c182a37950b72edf1492de4b(Comparable)","Drop in Replacement of 1.2 with 2.0 not possible because all func_031354802813669f9d5660a66035cf0e284607a8c182a37950b72edf1492de4b calls will be cummulative without code change


Frequency.java


 /\*\*


* Returns the percentage of values that are equal to v
* @deprecated replaced by 
{@link #func_031354802813669f9d5660a66035cf0e284607a8c182a37950b72edf1492de4b(Comparable)}
 as of 2.0  

 \*/  

 @Deprecated  

 public double func_031354802813669f9d5660a66035cf0e284607a8c182a37950b72edf1492de4b(Object v) 


{
 return getCumPct((Comparable<?>) v);
 }"
Math,78,"during ODE integration, the last event in a pair of very close event may not be detected","When an events follows a previous one very closely, it may be ignored. The occurrence of the bug depends on the side of the bracketing interval that was selected. For example consider a switching function that is increasing around first event around t = 90, reaches its maximum and is decreasing around the second event around t = 135. If an integration step spans from 67.5 and 112.5, the switching function values at start and end of step will have opposite signs, so the first event will be detected. The solver will find the event really occurs at 90.0 and will therefore truncate the step at 90.0. The next step will start from where the first step ends, i.e. it will start at 90.0. Let's say this step spans from 90.0 to 153.0. The switching function switches once again in this step.


If the solver for the first event converged to a value slightly before 90.0 (say 89.9999999), then the switch will not be detected because g(89.9999999) and g(153.0) are both negative.


This bug was introduced as of r781157 (2009-06-02) when special handling of events very close to step start was added."
Math,79,NPE in  KMeansPlusPlusClusterer unittest,"When running this unittest, I am facing this NPE:  

java.lang.NullPointerException  

 at org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer.assignPointsToClusters(KMeansPlusPlusClusterer.java:91)


This is the unittest:


package org.fao.fisheries.chronicles.calcuation.cluster;


import static org.junit.Assert.assertEquals;  

import static org.junit.Assert.assertTrue;


import java.util.Arrays;  

import java.util.List;  

import java.util.Random;


import org.apache.commons.math.stat.clustering.Cluster;  

import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;  

import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;  

import org.fao.fisheries.chronicles.input.CsvImportProcess;  

import org.fao.fisheries.chronicles.input.Top200Csv;  

import org.junit.Test;


public class ClusterAnalysisTest {


 @Test  

 public void testPerformClusterAnalysis2() {  

 KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(  

 new Random(1746432956321l));  

 EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {  

 new EuclideanIntegerPoint(new int[] 


{ 1959, 325100 }
),  

 new EuclideanIntegerPoint(new int[] 


{ 1960, 373200 }
), };  

 List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);  

 assertEquals(1, clusters.size());


 }


}"
Math,80,wrong result in eigen decomposition,"Some results computed by EigenDecompositionImpl are wrong. The following case computed by Fortran Lapack fails with version 2.0




```
    public void testMathpbx02() {

        double[] mainTridiagonal = {
        	  7484.860960227216, 18405.28129035345, 13855.225609560746,
        	 10016.708722343366, 559.8117399576674, 6750.190788301587, 
        	    71.21428769782159
        };
        double[] secondaryTridiagonal = {
        	 -4175.088570476366,1975.7955858241994,5193.178422374075, 
        	  1995.286659169179,75.34535882933804,-234.0808002076056
        };

        // the reference values have been computed using routine DSTEMR
        // from the fortran library LAPACK version 3.2.1
        double[] refEigenValues = {
        		20654.744890306974412,16828.208208485466457,
        		6893.155912634994820,6757.083016675340332,
        		5887.799885688558788,64.309089923240379,
        		57.992628792736340
        };
        RealVector[] refEigenVectors = {
        		new ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),
        		new ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),
        		new ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),
        		new ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),
        		new ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),
        		new ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),
        		new ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})
        };

        // the following line triggers the exception
        EigenDecomposition decomposition =
            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE\_MIN);

        double[] eigenValues = decomposition.getRealEigenvalues();
        for (int i = 0; i < refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);
            if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {
                assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);
            } else {
                assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);
            }
        }

    }

```"
Math,82,SimplexSolver not working as expected 2,"SimplexSolver didn't find the optimal solution.


Program for Lpsolve:  

=====================  

/\* Objective function \*/  

max: 7 a 3 b;


/\* Constraints \*/  

R1: +3 a -5 c <= 0;  

R2: +2 a -5 d <= 0;  

R3: +2 b -5 c <= 0;  

R4: +3 b -5 d <= 0;  

R5: +3 a +2 b <= 5;  

R6: +2 a +3 b <= 5;


/\* Variable bounds \*/  

a <= 1;  

b <= 1;  

=====================  

Results(correct): a = 1, b = 1, value = 10


Program for SimplexSolve:  

=====================  

LinearObjectiveFunction kritFcia = new LinearObjectiveFunction(new double[]


{7, 3, 0, 0}
, 0);  

Collection<LinearConstraint> podmienky = new ArrayList<LinearConstraint>();  

podmienky.add(new LinearConstraint(new double[]


{1, 0, 0, 0}
, Relationship.LEQ, 1));  

podmienky.add(new LinearConstraint(new double[]


{0, 1, 0, 0}
, Relationship.LEQ, 1));  

podmienky.add(new LinearConstraint(new double[]


{3, 0, -5, 0}
, Relationship.LEQ, 0));  

podmienky.add(new LinearConstraint(new double[]


{2, 0, 0, -5}
, Relationship.LEQ, 0));  

podmienky.add(new LinearConstraint(new double[]


{0, 2, -5, 0}
, Relationship.LEQ, 0));  

podmienky.add(new LinearConstraint(new double[]


{0, 3, 0, -5}
, Relationship.LEQ, 0));  

podmienky.add(new LinearConstraint(new double[]


{3, 2, 0, 0}
, Relationship.LEQ, 5));  

podmienky.add(new LinearConstraint(new double[]


{2, 3, 0, 0}
, Relationship.LEQ, 5));  

SimplexSolver solver = new SimplexSolver();  

RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);  

=====================  

Results(incorrect): a = 1, b = 0.5, value = 8.5


P.S. I used the latest software from the repository (including [~~MATH-286~~](https://issues.apache.org/jira/browse/MATH-286 ""SimplexSolver not working as expected?"") fix)."
Math,84,MultiDirectional optimzation loops forver if started at the correct solution,"MultiDirectional.func_4252a2e866337ab473e18a127b369f682bc003970b8133262bb03b118604fc39 loops forever if the starting point is the correct solution.


see the attached test case (testMultiDirectionalCorrectStart) as an example."
Math,85,bug in inverseCumulativeProbability() for Normal Distribution,"* @version $Revision: 617953 $ $Date: 2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) $  

 \*/  

public class NormalDistributionImpl extends AbstractContinuousDistribution


* @version $Revision: 506600 $ $Date: 2007-02-12 12:35:59 -0700 (Mon, 12 Feb 2007) $  

 \*/  

public abstract class AbstractContinuousDistribution


This code:


 DistributionFactory factory = app.getDistributionFactory();  

 NormalDistribution normal = factory.createNormalDistribution(0,1);  

 double result = normal.inverseCumulativeProbability(0.9772498680518209);


gives the exception below. It should return (approx) 2.0000...


normal.inverseCumulativeProbability(0.977249868051820); works fine


These also give errors:  

0.9986501019683698 (should return 3.0000...)  

0.9999683287581673 (should return 4.0000...)


org.apache.commons.math.MathException: Number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0  

 at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:103)  

 at org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability(NormalDistributionImpl.java:145)"
Math,86,testing for symmetric positive definite matrix in CholeskyDecomposition,"I used this matrix:


 double[][] cv = {  




{0.40434286, 0.09376327, 0.30328980, 0.04909388}
,  




{0.09376327, 0.10400408, 0.07137959, 0.04762857}
,  




{0.30328980, 0.07137959, 0.30458776, 0.04882449},  

 {0.04909388, 0.04762857, 0.04882449, 0.07543265}  

 };  

  

And it works fine, because it is symmetric positive definite  

  

I tried this matrix:  

  

 double[][] cv = {  

 {0.40434286, -0.09376327, 0.30328980, 0.04909388},  

 {-0.09376327, 0.10400408, 0.07137959, 0.04762857},  

 {0.30328980, 0.07137959, 0.30458776, 0.04882449}
,


 {0.04909388, 0.04762857, 0.04882449, 0.07543265}
 };


And it should throw an exception but it does not. I tested the matrix in R and R's cholesky decomposition method returns that the matrix is not symmetric positive definite.


Obviously your code is not catching this appropriately.


By the way (in my opinion) the use of exceptions to check these conditions is not the best design or use for exceptions. If you are going to force the use to try and catch these exceptions at least provide methods to test the conditions prior to the possibility of the exception."
Math,87,Basic variable is not found correctly in simplex tableau,"The last patch to SimplexTableau caused an automated test suite I'm running at work to go down a new code path and uncover what is hopefully the last bug remaining in the Simplex code.  

SimplexTableau was assuming an entry in the tableau had to be nonzero to indicate a basic variable, which is incorrect - the entry should have a value equal to 1."
Math,88,Simplex Solver arrives at incorrect solution,I have reduced the problem reported to me down to a minimal test case which I will attach.
Math,89,Bugs in Frequency API,"I think the existing Frequency API has some bugs in it.


The func_dfef6e8f491525ee2ae43a86916c0cced50aa791876d7dfcf101fc7f3707f619(Object v) method allows one to add a plain Object, but one cannot add anything further to the instance, as the second add fails with IllegalArgumentException.  

In fact, the problem is with the first call to func_dfef6e8f491525ee2ae43a86916c0cced50aa791876d7dfcf101fc7f3707f619(Object) which should not allow a plain Object to be added - it should only allow Comparable objects.  

This could be fixed by checking that the object is Comparable.


Similar considerations apply to the getCumFreq(Object) and getCumPct(Object) methods - they will only work with objects that implement Comparable.


The getCount(Object) and getPct(Object) methods don't fail when given a non-Comparable object (because the class cast exception is caught), however they just return 0 as if the object was not present:




```
        final Object OBJ = new Object();
        f.func_dfef6e8f491525ee2ae43a86916c0cced50aa791876d7dfcf101fc7f3707f619(OBJ); // This ought to fail, but doesn't, causing the unexpected behaviour below
        System.out.println(f.getCount(OBJ)); // 0
        System.out.println(f.getPct(OBJ)); // 0.0

```


Rather than adding extra checks for Comparable, it seems to me that the API would be much improved by using Comparable instead of Object.  

Also, it should make it easier to implement generics.


However, this would cause compilation failures for some programs that pass Object rather than Comparable to the class.  

These would need recoding, but I think they would continue to run OK against the new API.


It would also affect the run-time behaviour slightly, as the first attempt to add a non-Comparable object would fail, rather than the second add of a possibly valid object.  

But is that a viable program? It can only add one object, and any attempt to get statistics will either return 0 or an Exception, and applying the instanceof fix would also cause it to fail."
Math,91,Fraction.comparTo returns 0 for some differente fractions,"If two different fractions evaluate to the same double due to limited precision,  

the func_79344ca127e495bf50341104023f24634afab058454c58e9222d963ad366ee6d methode returns 0 as if they were identical.




```
// value is roughly PI - 3.07e-18
Fraction pi1 = new Fraction(1068966896, 340262731);

// value is roughly PI + 1.936e-17
Fraction pi2 = new Fraction( 411557987, 131002976);

System.out.println(pi1.doubleValue() - pi2.doubleValue()); // exactly 0.0 due to limited IEEE754 precision
System.out.println(pi1.func_79344ca127e495bf50341104023f24634afab058454c58e9222d963ad366ee6d(pi2)); // display 0 instead of a negative value

```"
Math,94,"MathUtils.func_a4047ae365ca99672328c618e5b052b8343d31879b0a1090eda19891175de006(u, v) fails when u and v both contain a high power of 2","The test at the beginning of MathUtils.func_a4047ae365ca99672328c618e5b052b8343d31879b0a1090eda19891175de006(u, v) for arguments equal to zero fails when u and v contain high enough powers of 2 so that their product overflows to zero.


 assertEquals(3 \* (1<<15), MathUtils.func_a4047ae365ca99672328c618e5b052b8343d31879b0a1090eda19891175de006(3 \* (1<<20), 9 \* (1<<15)));


Fix: Replace the test at the start of MathUtils.func_a4047ae365ca99672328c618e5b052b8343d31879b0a1090eda19891175de006()


 if (u \* v == 0) {


by


 if (u == 0 || v == 0) {"
Math,95,denominatorDegreeOfFreedom in FDistribution leads to IllegalArgumentsException in UnivariateRealSolverUtils.bracket,"We are using the FDistributionImpl from the commons.math project to do  

some statistical calculations, namely receiving the upper and lower  

boundaries of a confidence interval. Everything is working fine and the  

results are matching our reference calculations.


However, the FDistribution behaves strange if a  

denominatorDegreeOfFreedom of 2 is used, with an alpha-value of 0.95.  

This results in an IllegalArgumentsException, stating:


Invalid endpoint parameters: lowerBound=0.0 initial=Infinity  

upperBound=1.7976931348623157E308


coming from  

org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket


The problem is the 'initial' parameter to that function, wich is  

POSITIVE\_INFINITY and therefore not within the boundaries. I already  

pinned down the problem to the FDistributions func_37cf38dc05fe45b7f60d6ac6f0b31023863b0b841272316a2f71cd279ff9aeb9()-method,  

wich goes like:


 return getDenominatorDegreesOfFreedom() /  

 (getDenominatorDegreesOfFreedom() - 2.0);


Obviously, in case of denominatorDegreesOfFreedom == 2, this must lead  

to a division-by-zero, resulting in POSTIVE\_INFINITY. The result of this  

operation is then directly passed into the  

UnivariateRealSolverUtils.bracket() - method as second argument."
Math,96,Result of multiplying and func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7 for complex numbers is wrong,"Hi.


The bug relates on complex numbers.  

The methods ""multiply"" and ""func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7"" of the class Complex are involved.


mathematic background: (0,i) \* (-1,0i) = (0,-i).


little java program + output that shows the bug:  

-----------------------------------------------------------------------




```
import org.apache.commons.math.complex.\*;
public class TestProg {
        public static void main(String[] args) {

                ComplexFormat f = new ComplexFormat();
                Complex c1 = new Complex(0,1);
                Complex c2 = new Complex(-1,0);

                Complex res = c1.multiply(c2);
                Complex comp = new Complex(0,-1);

                System.out.println(""res: ""+f.format(res));
                System.out.println(""comp: ""+f.format(comp));

                System.out.println(""res=comp: ""+res.func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7(comp));
        }
}

```


-----------------------------------------------------------------------


res: -0 - 1i  

comp: 0 - 1i  

res=comp: false


-----------------------------------------------------------------------


I think the ""func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7"" should return ""true"".  

The problem could either be the ""multiply"" method that gives (-0,-1i) instead of (0,-1i),  

or if you think thats right, the func_e93cb41d4a7d2395d9bdfe4d8616f9b52762523bb44e75bf7701cd9d2e0d1cb7 method has to be modified.


Good Luck  

Dieter"
Math,97,BrentSolver throws IllegalArgumentException,"I am getting this exception:


java.lang.IllegalArgumentException: Function values at endpoints do not have different signs. Endpoints: [-100000.0,1.7976931348623157E308] Values: [0.0,-101945.04630982173]  

at org.apache.commons.math.analysis.BrentSolver.func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(BrentSolver.java:99)  

at org.apache.commons.math.analysis.BrentSolver.func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(BrentSolver.java:62)


The exception should not be thrown with values [0.0,-101945.04630982173] because 0.0 is positive.  

According to Brent Worden, the algorithm should stop and return 0 as the root instead of throwing an exception.


The problem comes from this method:  

 public double func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(double min, double max) throws MaxIterationsExceededException,   

 FunctionEvaluationException {


 clearResult();  

 verifyInterval(min, max);


 double yMin = f.value(min);  

 double yMax = f.value(max);


 // Verify bracketing  

 if (yMin \* yMax >= 0) 


{
 throw new IllegalArgumentException
 (""Function values at endpoints do not have different signs."" +
 "" Endpoints: ["" + min + "","" + max + ""]"" + 
 "" Values: ["" + yMin + "","" + yMax + ""]""); 
 }

 // func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e using only the first endpoint as initial guess  

 return func_c14cdb19563cb1644772f5c3e7709845fb82e5be43348cd6d529d50c6050763e(min, yMin, max, yMax, min, yMin);


 }


One way to fix it would be to add this code after the assignment of yMin and yMax:  

 if (yMin ==0 || yMax == 0) 


{
 return 0;
 }"
Math,101,"java.lang.StringIndexOutOfBoundsException in ComplexFormat.func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(String source, ParsePosition pos)","The func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(String source, ParsePosition pos) method in the ComplexFormat class does not check whether the imaginary character is set or not which produces StringIndexOutOfBoundsException in the substring method :


(line 375 of ComplexFormat)  

...  

 // func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188 imaginary character  

 int n = getImaginaryCharacter().length();


 startIndex = pos.getIndex();  

 int endIndex = startIndex + n;  

 if (source.substring(startIndex, endIndex).compareTo(  

 getImaginaryCharacter()) != 0) {  

...  

I encoutered this exception typing in a JTextFied with ComplexFormat set to look up an AbstractFormatter.  

If only the user types the imaginary part of the complex number first, he gets this exception.


Solution: Before setting to n length of the imaginary character, check if the source contains it. My proposal:  

...  

 int n = 0;  

 if (source.contains(getImaginaryCharacter()))  

 n = getImaginaryCharacter().length();  

... 


F.S."
Math,102,"func_3d1ab2ac926e7d2a9bdb51c1f7fa5243cdd705b0220103c0d86a69b0e2abaade(double[] expected, long[] observed) is returning incorrect test statistic","ChiSquareTestImpl is returning incorrect chi-squared value. An implicit assumption of public double func_3d1ab2ac926e7d2a9bdb51c1f7fa5243cdd705b0220103c0d86a69b0e2abaade(double[] expected, long[] observed) is that the sum of expected and observed are equal. That is, in the code:  

for (int i = 0; i < observed.length; i++) 


{
 dev = ((double) observed[i] - expected[i]);
 sumSq += dev \* dev / expected[i];
 }
this calculation is only correct if sum(observed)==sum(expected). When they are not equal then one must rescale the expected value by sum(observed) / sum(expected) so that they are.  

Ironically, it is an example in the unit test ChiSquareTestTest that highlights the error:


long[] observed1 = 


{ 500, 623, 72, 70, 31 }
;  

 double[] expected1 = 


{ 485, 541, 82, 61, 37 }
;  

 assertEquals( ""chi-square test statistic"", 16.4131070362, testStatistic.func_3d1ab2ac926e7d2a9bdb51c1f7fa5243cdd705b0220103c0d86a69b0e2abaade(expected1, observed1), 1E-10);  

 assertEquals(""chi-square p-value"", 0.002512096, testStatistic.func_3d1ab2ac926e7d2a9bdb51c1f7fa5243cdd705b0220103c0d86a69b0e2abaadeTest(expected1, observed1), 1E-9);


16.413 is not correct because the expected values do not make sense, they should be: 521.19403 581.37313 88.11940 65.55224 39.76119 so that the sum of expected equals 1296 which is the sum of observed.


Here is some R code (r-project.org) which proves it:  

> o1  

[1] 500 623 72 70 31  

> e1  

[1] 485 541 82 61 37  

> chisq.test(o1,p=e1,rescale.p=TRUE)


 Chi-squared test for given probabilities


data: o1   

X-squared = 9.0233, df = 4, p-value = 0.06052


> chisq.test(o1,p=e1,rescale.p=TRUE)$observed  

[1] 500 623 72 70 31  

> chisq.test(o1,p=e1,rescale.p=TRUE)$expected  

[1] 521.19403 581.37313 88.11940 65.55224 39.76119"
Math,103,ConvergenceException in normal CDF,"NormalDistributionImpl::func_7c06cbc7a3a7e0e59467e309737fa1da8663f7b3109c18909423e3a404e92da1(double x) throws ConvergenceException  

if x deviates too much from the mean. For example, when x=+/-100, mean=0, sd=1.  

Of course the value of the CDF is hard to evaluate in these cases,  

but effectively it should be either zero or one."
Math,105,[math]  SimpleRegression func_39af4a300e550f0a8e69e2900d9ad62783c445382f8a5fba2b8bc6ad2a8f710b,"func_39af4a300e550f0a8e69e2900d9ad62783c445382f8a5fba2b8bc6ad2a8f710b returns -ve value. See test below:


public void testSimpleRegression() {  

 double[] y = 


{ 8915.102, 8919.302, 8923.502}
;  

 double[] x = 


{ 1.107178495, 1.107264895, 1.107351295}
;  

 double[] x2 = 


{ 1.107178495E2, 1.107264895E2, 1.107351295E2}
;  

 SimpleRegression reg = new SimpleRegression();  

 for (int i = 0; i < x.length; i++) 


{
 reg.addData(x[i],y[i]);
 }
 assertTrue(reg.func_39af4a300e550f0a8e69e2900d9ad62783c445382f8a5fba2b8bc6ad2a8f710b() >= 0.0); // OK  

 reg.clear();  

 for (int i = 0; i < x.length; i++) 


{
 reg.addData(x2[i],y[i]);
 }
 assertTrue(reg.func_39af4a300e550f0a8e69e2900d9ad62783c445382f8a5fba2b8bc6ad2a8f710b() >= 0.0); // FAIL


 }"
Math,106,"[math] Function math.fraction.ProperFractionFormat.func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(String, ParsePosition) return illogical result","Hello,


I find illogical returned result from function ""Fraction func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(String source,   

ParsePostion pos)"" (in class ProperFractionFormat of the Fraction Package) of   

the Commons Math library. Please see the following code segment for more   

details:


""  

ProperFractionFormat properFormat = new ProperFractionFormat();  

result = null;  

String source = ""1 -1 / 2"";  

ParsePosition pos = new ParsePosition(0);


//Test 1 : fail   

public void testParseNegative(){


 String source = ""-1 -2 / 3"";  

 ParsePosition pos = new ParsePosition(0);


 Fraction actual = properFormat.func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(source, pos);  

 assertNull(actual);  

}


// Test2: success  

public void testParseNegative(){


 String source = ""-1 -2 / 3"";  

 ParsePosition pos = new ParsePosition(0);


 Fraction actual = properFormat.func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(source, pos); // return Fraction 1/3  

 assertEquals(1, source.getNumerator());  

 assertEquals(3, source.getDenominator());  

}


""


Note: Similarly, when I passed in the following inputs:   

 input 2: (source = “1 2 / -3”, pos = 0)  

 input 3: ( source = ” -1 -2 / 3”, pos = 0)


Function ""Fraction func_30c471f6aafbca7085640653eeef555e85eb0df1602c98a662814c27767d1188(String, ParsePosition)"" returned Fraction 1/3 (means   

the result Fraction had numerator = 1 and denominator = 3)for all 3 inputs   

above.


I think the function does not handle parsing the numberator/ denominator   

properly incase input string provide invalid numerator/denominator. 


Thank you!"
Mockito,1,ArgumentCaptor no longer working for varargs,I ran into the issue described here: <http://stackoverflow.com/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor>
Mockito,5,"Mockito 1.10.x timeout verification needs JUnit classes (VerifyError, NoClassDefFoundError)","If JUnit is not on the classpath and mockito is version 1.10.x (as of now 1.10.1 up to 1.10.19) and the code is using the timeout verification which is not supposed to be related to JUnit, then the JVM may fail with a `VerifyError` or a `NoClassDefFoundError`.


This issue has been reported on the [mailing list](https://groups.google.com/forum/#!topic/mockito/A6D7myKiD5k) and on [StackOverflow](http://stackoverflow.com/questions/27721621/java-lang-func_a12dd3a7fd3203a452eb34d91a9be20569d5e337a3384347068895c07f3e0c5aerror-with-mockito-1-10-17)


A simple test like that with **TestNG** (and no JUnit in the class path of course) exposes the issue:



```
import org.testng.annotations.Test;
import java.util.Observable;
import static org.mockito.Mockito.*;

public class VerifyErrorOnVerificationWithTimeoutTest {
    @Test public void should_not_throw_VerifyError() {
        func_a12dd3a7fd3203a452eb34d91a9be20569d5e337a3384347068895c07f3e0c5a(mock(Observable.class), timeout(500)).countObservers();
    }
}

```

With TestNG 5.13.1, the stack trace is :



```
java.lang.VerifyError: (class: org/mockito/internal/verification/VerificationOverTimeImpl, method: func_a12dd3a7fd3203a452eb34d91a9be20569d5e337a3384347068895c07f3e0c5a signature: (Lorg/mockito/internal/verification/api/VerificationData;)V) Incompatible argument to function
    at org.mockito.verification.Timeout.<init>(Timeout.java:32)
    at org.mockito.verification.Timeout.<init>(Timeout.java:25)
    at org.mockito.Mockito.timeout(Mockito.java:2103)
    at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)

```

TestNG includes a dependency on JUnit 3.8.1, which has the `junit.framework.ComparisonFailure`, but the JVM cannot perform the linking at runtime (`VerifyError` extends `LinkageError`), probably because for the JVM there's some incompatible changes in this class between version 3.x and 4.x.  

Note that Mockito is compiled against JUnit 4.x. This also reveal that Mockito is not anymore compatible with JUnit 3.x.


With TestNG 6.8.13, the stack trace is :



```
java.lang.NoClassDefFoundError: junit/framework/ComparisonFailure
    at java.lang.ClassLoader.defineClass1(Native Method)
    at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)
    at java.lang.ClassLoader.defineClass(ClassLoader.java:621)
    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)
    at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)
    at java.net.URLClassLoader.access$000(URLClassLoader.java:58)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
    at org.mockito.verification.Timeout.<init>(Timeout.java:32)
    at org.mockito.verification.Timeout.<init>(Timeout.java:25)
    at org.mockito.Mockito.timeout(Mockito.java:2103)
    at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)
Caused by: java.lang.ClassNotFoundException: junit.framework.ComparisonFailure
    at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
    ... 49 more

```

Indeed JUnit is not anymore a dependency of TestNG.


In this specific case the issue is that the `Timeout` class wraps a `VerficationOverTimeImpl` that uses in try/catch block the exception `org.mockito.exceptions.verification.junit.ArgumentsAreDifferent` which extends `junit.framework.ComparisonFailure`.


At this time it seems to be the only place where JUnit is needed, this affect the following public API :



```
Mockito.timeout(...)
Mockito.after(...)
```"
Mockito,7,Deep stubbing with generic responses in the call chain is not working,"Deep stubbing will throw an Exception if multiple generics occur in the call chain. For instance, consider having a mock `myMock1` that provides a function that returns a generic `T`. If `T` also has a function that returns a generic, an Exception with the message ""Raw extraction not supported for : 'null'"" will be thrown.


As an example the following test will throw an Exception:



```
public class MockitoGenericsDeepStubTest {

    @Test
    public void discoverDeepMockingOfGenerics() {
        MyClass1 myMock1 = mock(MyClass1.class, RETURNS\_DEEP\_STUBS);

        when(myMock1.getNested().getNested().returnSomething()).thenReturn(""Hello World."");
    }

    public static interface MyClass1 <MC2 extends MyClass2> {
        public MC2 getNested();
    }

    public static interface MyClass2<MC3 extends MyClass3> {
        public MC3 getNested();
    }

    public static interface MyClass3 {
        public String returnSomething();
    }
}
```

You can make this test run if you step into the class `ReturnsDeepStubs` and change the method `withSettingsUsing` to return `MockSettings` with `ReturnsDeepStubs` instead of `ReturnsDeepStubsSerializationFallback` as default answer:



```
private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {
    MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?
            withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
            : withSettings();

    return propagateSerializationSettings(mockSettings, parentMockSettings)
            .defaultAnswer(this);
}
```

However, this breaks other tests and features.


I think, the issue is that further generics are not possible to be mocked by `ReturnsDeepStubsSerializationFallback` since the `GenericMetadataSupport` is ""closed"" at this point.


Thanks and kind regards  

Tobias"
Mockito,12,ArgumentCaptor no longer working for varargs,I ran into the issue described here: <http://stackoverflow.com/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor>
Mockito,13,fix proposal for #114,"[@bric3](https://github.com/bric3), can you take a look at this one? If you don't have time I'll just merge it. All existing tests are passing.


Thanks for the fix!!!"
Mockito,20,Allow convenient spying on abstract classes,"I posted this in GoogleCode and was asked to submit in github.


Mockito is easy to use when the test needs to provide canned values for a certain method.


But it gets harder when a canned value isn't sufficient.


##### Example 1: Fake with trivial Logic



```
interface UserAccount {
  List<String> getEmails();
  void addEmail(String email);
  // 12 other methods ...
}

```

When mocking such domain entity object, it's tedious to manually program getEmails()/addEmail() with when().thenReturn() and to make sure the two methods are logically consistent, that is, getEmails() returns all emails added.


##### Example 2: callback-style API



```
interface AccountService {
  void getAccount(String id, AsyncCallback<UserAccount> callback);
}

```

Stubbing AccountService isn't easy. It'd require use of Answer, and the Answer API isn't statically type safe:



```
when(service.getAccount(eq(id), any(AsyncCallback.class)).thenAnswer(new Answer<Void>() {
  AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
  ...
});

```

##### Example 3: Uninteresting parameters



```
interface AccountRpcService {
  FutureAccount getAccount(RpcContext context, String id);
}

```

None of the tests care about the context object. It's an uninteresting parameter imposed by the framework.


If AccountRpcService were directly mocked, all tests would have to use isA() to repetitively mention this uninteresting parameter, like this:


`when(service.getAccount(isA(RpcContext.class), eq(""id"")).thenReturn(...);`


And all other parameters are required to be wrapped in eq().


#### Proposal


I propose adding support for abstract classes to mockito to make it easier to deal with tests like above:


##### For example 1



```
abstract class FakeUserAccount implements UserAccount {
  private final List<String> emails = new ArrayList<>();

  @Override public void addEmail(String email) {
    emails.add(email);
  }
  @Override List<String> getEmails() {
    return ImmutableList.copyOf(emails);
  }
}

@Fake private FakeUserAccount userAccount; // Mockito instantiates abstract class.

```

##### For example 2



```
abstract class MockAccountService implements AccountService {
  @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
    callback.onSuccess(getAccount(id));
  }
  abstract UserAccount getAccount(String id);
}

@Fake private MockAccountService service;

...

when(service.getAccount(""id"")).thenReturn(account);

```

##### For example 3



```
abstract class MockAccountRpcService implements AccountRpcService {
  @Override Future<Account> getAccount(RpcContext context, String id) {
    checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.
    return getAccount(id);
  }

  abstract Future<Account> getAccount(String id);
}

@Fake private MockAccountRpcService service;

when(service.getAccount(""id"")).thenReturn(...);

```

My work place internally implemented a default Answer to support abstract classes. We found that the support of abstract classes helps us to avoid overusing mocks when we should be using fakes. And in situations like above we get cleaner test code.


But because it's not integrated in the core Mockito, there are gotchas with our implementation (like, you can't have private/final methods in your fake).


If the idea sounds okay to give a try, I'll volunteer to submit a patch.


Thanks!"
Mockito,22,Can not Return deep stubs from generic method that returns generic type,"Hey,


if I try to mock a generic method which a generic returntype, where the returntype is derived from the generic type of the method using deep stubs I get a `ClassCastException` when calling `when` on it.



```
interface I {
    <T> Supplier<T> m(Class<T> type);
}
@Test
public void test() throws Exception {
    I i = mock(I.class, RETURNS_DEEP_STUBS);
    when(i.m(Boolean.class).get()); // <- ClassCastException
}

```

When you don't use deep stubs and a raw `Supplier` mock to pass around it works:



```
I i = mock(I.class);
Supplier s = mock(Supplier.class);
when(i.m(Boolean.class)).thenReturn(s);
when(i.m(Boolean.class).get());

```

The `ClassCastException`:



```
java.lang.ClassCastException: org.mockito.internal.creation.cglib.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$cdb13154 cannot be cast to java.lang.String
  at MockitoGenerics.test(MockitoGenerics.java:21)
  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.lang.reflect.Method.invoke(Method.java:483)
  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
  at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
  at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
  at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
  at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

```

Tested using mockito 1.10.19, jdk 1.8.0\_20 and no Powermock"
Mockito,24,fix some rawtype warnings in tests,"[Current coverage](https://codecov.io/gh/mockito/mockito/pull/467?src=pr) is **87.76%**
---------------------------------------------------------------------------------------



> 
> Merging [#467](https://codecov.io/gh/mockito/mockito/pull/467?src=pr) into [master](https://codecov.io/gh/mockito/mockito/branch/master?src=pr) will not change coverage
> 
> 
> 



```
@@ master #467 diff @@
==========================================
  Files           263        263          
  Lines          4747       4747          
  Methods           0          0          
  Messages          0          0          
  Branches        767        767          
==========================================
  Hits           4166       4166          
  Misses          416        416          
  Partials        165        165          
```

[![Sunburst](https://camo.githubusercontent.com/977b5c47a26b9014e17af67cdf72511e5c4327e08169dd2f5ed0df612c2b202b/68747470733a2f2f636f6465636f762e696f2f67682f6d6f636b69746f2f6d6f636b69746f2f70756c6c2f3436372f6772617068732f73756e62757273742e7376673f7372633d70722673697a653d313530)](https://codecov.io/gh/mockito/mockito/pull/467?src=pr)



> 
> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [3fe0fd7...03d9a48](https://codecov.io/gh/mockito/mockito/compare/3fe0fd7b6c5d8ce41dc4040d3ab3039f8369385c...03d9a480674107305c8101384e2fb2daffc87b4e)
> 
> 
>"
Mockito,27,Exception when stubbing more than once with when...thenThrow,"If I create a mock and stub a method so it throws an exception and do that twice the first exception will be thrown upon invoking the second stub instruction.


Example:



```
@Test
public void testThrowException() {
    Object o = Mockito.mock(Object.class);
    // test behavior with Runtimeexception
    Mockito.when(o.toString()).thenThrow(RuntimeException.class);
    // ...
    // test behavior with another exception
    // this throws a RuntimeException
    Mockito.when(o.toString()).thenThrow(IllegalArgumentException.class);
    // ...
}

```

I can work around this if I do it the other way around with doThrow...when. But I lose type safety then. Can you fix this?"
Mockito,28,nicer textual printing of typed parameters,"When matchers fail but yield the same toString(), Mockito prints extra type information. However, the type information is awkwardly printed for Strings. I've encountered this issue while working on removing hard dependency to hamcrest.



```
//current:
someMethod(1, (Integer) 2);
someOther(1, ""(String) 2"");
//desired:
someOther(1, (String) ""2"");

```"
Mockito,29,Fixes #228: fixed a verify() call example in @Captor javadoc,Thanks for the fix :)
Mockito,33,ArgumentCaptor.fromClass's return type should match a parameterized type,"`ArgumentCaptor.fromClass`'s return type should match a parameterized type. I.e. the expression `ArgumentCaptor.fromClass(Class<S>)` should be of type `ArgumentCaptor<U>` where `S` is a subtype of `U`.


For example:



```
ArgumentCaptor<Consumer<String>> captor = ArgumentCaptor.fromClass(Consumer.class)

```

does not type check (i.e. it is a compile time error). It should type check.


The reasons that it is desirable for `ArgumentCaptor.fromClass` to allow expressions such as the example above to type check are:


1. `ArgumentCaptor.fromClass` is intended to be a convenience method to allow the user to construct an ArgumentCaptor without casting the returned value.


Currently, the user can devise a workaround such as:



```
ArgumentCaptor<? extends Consumer<String>> captor 
= ArgumentCaptor.fromClass(Consumer.class)

```

This workaround is inconvenient, and so contrary to `ArgumentCaptor.fromClass` being a convenience method.


2. It is inconsistent with `@Captor`, which can be applied to a field with a paramterized type. I.e.



```
@Captor ArgumentCaptor<Consumer<String>> captor 

```

type checks."
Mockito,34,Source files should not be put in binary JAR,Source files (`*.java`) should not be put into binary `mockito-core.jar`. It stupefies Idea to show decompiled file even when source jar is available.
Mockito,38,Generate change list separated by types using labels,"[![Coverage Status](https://camo.githubusercontent.com/857c50bfa0758ad3111b1ceaf303b69b318007970689e8e8a8afb4b6ad325959/68747470733a2f2f636f766572616c6c732e696f2f6275696c64732f313138383432302f6261646765)](https://coveralls.io/builds/1188420)


Changes Unknown when pulling **[47a7016](https://github.com/mockito/mockito/commit/47a701638ebf4673ed0f1c8680d4d8f9f79c4f6e) on szpak:topic/releaseLabels** into *\* on mockito:master*\*."
Time,4,Constructing invalid Partials,"Partials can be constructed by invoking a constructor `Partial(DateTimeFieldType[], int[])` or by merging together a set of partials using `func_0695b563acde461fc2f8d9aebccf35c7596ac458b8d8e067c602fb7b4e5f1578`, each constructed by calling `Partial(DateTimeFieldType, int)`, e.g.:



```
Partial a = new Partial(new DateTimeFieldType[] { year(), hourOfDay() }, new int[] { 1, 1});
Partial b = new Partial(year(), 1).func_0695b563acde461fc2f8d9aebccf35c7596ac458b8d8e067c602fb7b4e5f1578(hourOfDay(), 1);
assert(a == b);
```

However, the above doesn't work in all cases:



```
new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1}); // throws Types array must not contain duplicate
new Partial(clockhourOfDay(), 1).func_0695b563acde461fc2f8d9aebccf35c7596ac458b8d8e067c602fb7b4e5f1578(hourOfDay(), 1); // #<Partial [clockhourOfDay=1, hourOfDay=1]>
```

I suppose the Partials should not allow to be constructed in either case. Is that right?


There's also a related issue (probably stems from the fact that the Partial is invalid):



```
new Partial(clockhourOfDay(), 1).func_0695b563acde461fc2f8d9aebccf35c7596ac458b8d8e067c602fb7b4e5f1578(hourOfDay(), 1).isEqual(new Partial(hourOfDay() ,1).func_0695b563acde461fc2f8d9aebccf35c7596ac458b8d8e067c602fb7b4e5f1578(clockhourOfDay(), 1)) // throws objects must have matching field types
```"
Time,5,none standard PeriodType without year throws exception,"Hi.


I tried to get a Period only for months and weeks with following code:



```
Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})).func_0d1dcaed969b3c9c3e8e8e33482531da8a23f3030b2b0b296c641994033c5a45(PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()}));
return p.getMonths();
```

This throws following exception:



```
 10-17 14:35:50.999: E/AndroidRuntime(1350): java.lang.UnsupportedOperationException: Field is not supported
 10-17 14:35:50.999: E/AndroidRuntime(1350): at org.joda.time.PeriodType.setIndexedField(PeriodType.java:690)
 10-17 14:35:50.999: E/AndroidRuntime(1350): at org.joda.time.Period.withYears(Period.java:896) 10-17
 14:35:50.999: E/AndroidRuntime(1350): at org.joda.time.Period.func_0d1dcaed969b3c9c3e8e8e33482531da8a23f3030b2b0b296c641994033c5a45(Period.java:1630)

```

Even removing the year component with .withYearsRemoved() throws the same exception:


this works:



```
Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.standard()).func_0d1dcaed969b3c9c3e8e8e33482531da8a23f3030b2b0b296c641994033c5a45(PeriodType.standard());
return p.getMonths();
```

this fails:



```
Period p = new Period(new DateTime(startDate.getTime()), new DateTime(endDate.getTime()), PeriodType.standard().withYearsRemoved()).func_0d1dcaed969b3c9c3e8e8e33482531da8a23f3030b2b0b296c641994033c5a45(PeriodType.standard().withYearsRemoved());
return p.getMonths();
```"
Time,7,DateTimeFormat.func_a6a7bacb74c7bcaf3b8fcb6d51c70068850524d35919876ba7f654716bb07bd4 sometimes miscalculates year (2.2),"There appears to be a bug in the fix to <http://sourceforge.net/p/joda-time/bugs/148> (which I also reported).


The following code (which can be added to org.joda.time.format.TestDateTimeFormatter) breaks, because the input mutable date time's millis appear to be mishandled and the year for the parse is changed to 1999:



```
    public void testParseInto\_monthDay\_feb29\_startOfYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M d"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2000, 1, 1, 0, 0, 0, 0, NEWYORK);
        assertEquals(4, f.func_a6a7bacb74c7bcaf3b8fcb6d51c70068850524d35919876ba7f654716bb07bd4(result, ""2 29"", 0));
        assertEquals(new MutableDateTime(2000, 2, 29, 0, 0, 0, 0, NEWYORK), result);
    }
```"
Time,8,DateTimeZone.func_cef93e6cb71527b4e201a896f65a7974c471ee1be2f2e5db453cfa7ab0ffc1ac cannot handle negative offset < 1 hour,"`DateTimeZone.func_cef93e6cb71527b4e201a896f65a7974c471ee1be2f2e5db453cfa7ab0ffc1ac(h,m)` cannot handle negative offset < 1 hour like `-0:30` due to argument range checking. I used `forOffsetMillis()` instead.


This should probably be mentioned in the documentation or negative minutes be accepted."
Time,14,#151 Unable to func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767 days to a MonthDay set to the ISO leap date,"It's not possible to func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767 days to a MonthDay set to the ISO leap date (February 29th). This is even more bizarre given the exact error message thrown.


Sample snippet:



```
final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());
System.out.println(isoLeap);
System.out.println(isoLeap.plusDays(2));

```

Which generates the following combined console output and stack trace: 


--02-29  

Exception in thread ""main"" org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]  

at org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:215)  

at org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)  

at org.joda.time.chrono.BasicMonthOfYearDateTimeField.func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767(BasicMonthOfYearDateTimeField.java:212)  

at org.joda.time.field.BaseDateTimeField.func_7e9e5ac30f2216fd0fd6f5faed316f2d5983361a4203c3330cfa46ef65bb4767(BaseDateTimeField.java:324)  

at org.joda.time.MonthDay.withFieldAdded(MonthDay.java:519)  

at org.joda.time.MonthDay.minusDays(MonthDay.java:672)  

at ext.site.time.chrono.Main.m7(Main.java:191)  

at ext.site.time.chrono.Main.main(Main.java:27)


The follwing method calls and parameters also generate the same or related error: 



```
isoLeap.plusMonths(1);
isoLeap.plusMonths(-1);
isoLeap.minusMonths(1);
isoLeap.minusMonths(-1);
isoLeap.minusDays(-1);

```

However, the following methods work: 



```
isoLeap.minusDays(1);
isoLeap.plusDays(-1);

```

Performing operations on dates around the ISO leap date react as if it exists, ie:



```
System.out.println(isoLeap.minusDays(1).plusDays(2));

```

Prints out '--03-01' as expected."
Time,15,#147 possibly a bug in org.joda.time.field.FieldUtils.safeMultipl,"It seems to me that as currently written in joda-time-2.1.jar  

org.joda.time.field.FieldUtils.func_585ceb574275b6da0d9083abcd3d6d8124bef24ca7cb46addc4af477037c152c(long val1, int scalar)  

doesn't detect the overflow if the long val1 == Long.MIN\_VALUE and the int scalar == -1.


The attached file demonstrates what I think is the bug and suggests a patch.


I looked at the Joda Time bugs list in SourceForge but couldn't see anything that looked relevant: my apologies if I've missed something, or if I'm making a mistake with this bug report.


Colin Bartlett"
Time,16,#148 DateTimeFormatter.func_a6a7bacb74c7bcaf3b8fcb6d51c70068850524d35919876ba7f654716bb07bd4 broken when no year in format,"In Joda Time 2.0, the default year was set to 2000 so that Feb 29 could be parsed correctly. However, func_a6a7bacb74c7bcaf3b8fcb6d51c70068850524d35919876ba7f654716bb07bd4 now overwrites the given instant's year with 2000 (or whatever iDefaultYear is set to). The correct behavior would seem to be to use the given instant's year instead of iDefaultYear.  

This does mean that Feb 29 might not be parseable if the instant's year is not a leap year, but in this case the caller asked for that in a sense."
Time,17,#141 Bug on withLaterOffsetAtOverlap method,"The method withLaterOffsetAtOverlap created to workaround the issue 3192457 seems to not be working at all.  

I won´t write many info about the problem to solve because the issue 3192457 have this info indeed.  

But If something is unclear I can answer on the comments.


Problem demonstration:  

TimeZone.setDefault(TimeZone.getTimeZone(""America/Sao\_Paulo""));  

DateTimeZone.setDefault( DateTimeZone.forID(""America/Sao\_Paulo"") );



```
    DateTime dtch;
    {
        dtch = new DateTime(2012,2,25,5,5,5,5).millisOfDay().withMaximumValue();
        System.out.println( dtch ); // prints: 2012-02-25T23:59:59.999-02:00 //Were are at the first 23:\*\* of the day.
        //At this point dtch have the -03:00 offset
    }
    {
        dtch = dtch.plus(60001);
        System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-03:00 //Were are at the first minute of the second 23:\*\* of the day. Ok its correct
        //At this point dtch have the -03:00 offset
    }
    {
        dtch = dtch.withEarlierOffsetAtOverlap();
        System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-02:00 //Were are at the first minute of the first 23:\*\* of the day. Ok its correct
        //At this point dtch have the -02:00 offset ( because we called withEarlierOffsetAtOverlap() ) // This method is working perfectly
    }       
    {
        dtch = dtch.withLaterOffsetAtOverlap();
        System.out.println( dtch ); // prints: 2012-02-25T23:01:00.000-02:00 //Were are at the first minute of the first 23:\*\* of the day. 
        // Here is the problem we should have a -03:00 offset here since we called withLaterOffsetAtOverlap() expecting to change to the second 23:\*\* of the day
    }

```

On the last two brackets we can see that withLaterOffsetAtOverlap is not undoing withEarlierOffsetAtOverlap as it should ( and not even working at all )"
Time,18,#130 GJChronology rejects valid Julian dates,"Example:


DateTime jdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, JulianChronology.getInstanceUTC()); // Valid.  

DateTime gjdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, GJChronology.getInstanceUTC()); // Invalid.


The 2nd statement fails with ""org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"".


Given that I left the cutover date at the default (October 15, 1582), isn't 1500/02/29 a valid date in the GJChronology?"
Time,19,#124 Inconsistent interpretation of ambiguous time during DST,"The inconsistency appears for timezone Europe/London.


Consider the following code  

…  

DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID(""Europe/London""));  

DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID(""Europe/Oslo""));  

DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID(""Europe/Helsinki""));



```
    System.out.println(britishDate);
    System.out.println(norwDate);
    System.out.println(finnishDate);

```

…  

These three DateTime objects should all represent the same moment in time even if they are ambiguous. And using jodatime 1.6.2 this is the case. The code produces the following output:  

2011-10-30T01:59:00.000Z  

2011-10-30T02:59:00.000+01:00  

2011-10-30T03:59:00.000+02:00


Using jodatime 2.0 however, the output is:


2011-10-30T01:59:00.000Z  

2011-10-30T02:59:00.000+02:00  

2011-10-30T03:59:00.000+03:00


which IMO is wrong for Europe/London. Correct output should have been   

2011-10-30T01:59:00.000+01:00


The release notes for 2.0 states that:   

""Now, it always returns the earlier instant (summer time) during an overlap. …"""
Time,20,#126 Errors creating/parsing dates with specific time zones.,"Consider the following test code using Joda 2.0


import org.joda.time.DateTime;  

import org.joda.time.DateTimeZone;  

import org.joda.time.format.DateTimeFormat;  

import org.joda.time.format.DateTimeFormatter;


import java.util.Set;


public class JodaDateTimeZoneTester {



```
private static DateTimeFormatter formatter = DateTimeFormat.forPattern(""MM/dd/yyyy HH:mm:ss.SSS ZZZ"");
private static int numTimeZonesTested = 0;
private static int numTimeZonesPassed = 0;
private static int numTimeZonesFailed = 0;
private static int numTimeZonesException = 0;

private static String convertDateTimeToFormattedString(DateTime dateTime) {
    return formatter.print(dateTime);
}

private static DateTime parseStringToDateTime(String formattedDateTime) {
    return formatter.parseDateTime(formattedDateTime);
}

private static void testDateTimeFormatter(DateTime dateTime, String timeZone) {
    numTimeZonesTested++;

    final String dateTimeZoneId = dateTime.getZone().getID();

    if (!timeZone.equals(dateTimeZoneId)) {
        numTimeZonesFailed++;
        System.out.println(timeZone + "" failed to construct into the proper date time zone - constructed time zone = "" + dateTimeZoneId);
        return;
    }
    try {
        DateTime convertedDateTime = parseStringToDateTime(convertDateTimeToFormattedString(dateTime));

        if (dateTime.equals(convertedDateTime)) {
            numTimeZonesPassed++;
            //System.out.println(dateTime.getZone().getID() + "" passed."");
        } else {
            numTimeZonesFailed++;
            System.out.println(""Formatter failed for time zone ID: "" + dateTimeZoneId + ""    converted it to: "" + convertedDateTime.getZone().getID());
 }
 } catch (IllegalArgumentException iae) {
 numTimeZonesException++;
 System.out.println(""Formatter threw exception for time zone id: "" + dateTimeZoneId);
 }
}

public static void main(String[] args) {
 Set<String> timeZones = DateTimeZone.getAvailableIDs();

 for (String timeZone : timeZones) {
 testDateTimeFormatter(DateTime.now().withZone(DateTimeZone.forID(timeZone)), timeZone);
 }

 System.out.println();
 System.out.println(""Number of Time Zones tested: "" + numTimeZonesTested);
 System.out.println(""Number passed:     "" + numTimeZonesPassed);
 System.out.println(""Number failed:     "" + numTimeZonesFailed);
 System.out.println(""Number exceptions: "" + numTimeZonesException);
    System.out.println();
}

```

}


The results are out of 572 time zones 130 fail and 30 throw exceptions. 


The failures are the most interesting. When I query DateTimeZone to get its time zone ids I will get a time zone like America/Atka. When I take that id and create a date time with it its time zone id is America/Adak. It is like there are multiple list of time zones in Joda time and they are out of sync. 


Source code is attached."
Time,22,#113 Duration.toPeriod with fixed time zones.,"I have a question concerning the conversion of a Duration to Period. I'm not sure if this is a bug, or if there is a different way to do this.


The basis of the problem, is that using Duration.toPeriod() uses the chronology of the default time zone to do the conversion. This can cause different results from a timezone with DST and one without. This can be reproduced easily with this test.



```
//set default time zone with this argument -Duser.timezone=""GMT""
public void testForJodaForum()
{
    System.out.println(""Timezone: "" + DateTimeZone.getDefault());

 //Duration of more than 24 hours
 Duration aDuration = new Duration(DateTimeConstants.MILLIS\_PER\_HOUR \* 30 + DateTimeConstants.MILLIS\_PER\_MINUTE \* 50
 + DateTimeConstants.MILLIS\_PER\_SECOND \* 14);

 System.out.println(""Duration before: "" + aDuration);
 Period period = aDuration.toPeriod();
 System.out.println(""Period after: "" + period);        
}

```

A fixed time zone produces this output  

Timezone: Etc/GMT  

Duration before: PT111014S  

Period after: P1DT6H50M14S


A DST time zone produces this output  

Timezone: America/Chicago  

Duration before: PT111014S  

Period after: PT30H50M14S


In the joda code, Duration.toPeriod() uses a period constructor that takes the chronology, but null is passed in, so the chronology of the default time zone is used, which leads to this behavior.


The javadoc of toPeriod() states that only precise fields of hours, minutes, seconds, and millis will be converted. But for a fixed timezone, days and weeks are also precise, which is stated in the javadoc for toPeriod(Chronology chrono). In our app, we need consistent behavior regardless of the default time zone, which is to have all the extra hours put into the hours bucket. Since Duration is supposed to be a 'time zone independent' length of time, I don't think we should have to do any chronology manipulation to get this to work.


Any help is appreciated.


Thanks,  

Cameron"
Time,23,#112 Incorrect mapping of the MET time zone,"This timezone is mapped to Asia/Tehran in DateTimeZone. It should be middle europena time.


I know that this bug has been raised before (Incorrect mapping of the MET time zone - ID: 2012274), and there is a comment stating that you won't break backward compatibility to fix this bug.


1. I disagree that this is a backward compatibility argument
2. No matter how you look at it, it is a bug.


You could very well state that ALL bugs won't be fixed, because of backward compatibility.


I request again that this bug be fixed."
Time,24,#107 Incorrect date parsed when week and month used together,"I have following code snippet :



```
    DateTimeFormatter dtf = DateTimeFormat.forPattern(""xxxxMM'w'ww"");
DateTime dt = dtf.parseDateTime(""201101w01"");       
System.out.println(dt);

```

It should print 2011-01-03 but it is printing 2010-01-04.   

Please let me know if I am doing something wrong here."
Time,25,#90 DateTimeZone.func_2e7416aa926d2affa86a8bc81d6c160d6a8322074171e46faef4cdf26f451d99 error during DST transition,"This may be a failure of my understanding, but the comments in DateTimeZone.func_2e7416aa926d2affa86a8bc81d6c160d6a8322074171e46faef4cdf26f451d99 lead me to believe that if an ambiguous local time is given, the offset corresponding to the later of the two possible UTC instants will be returned - i.e. the greater offset.


This doesn't appear to tally with my experience. In fall 2009, America/Los\_Angeles changed from -7 to -8 at 2am wall time on November 11. Thus 2am became 1am - so 1:30am is ambiguous. I would therefore expect that constructing a DateTime for November 11th, 1:30am would give an instant corresponding with the later value (i.e. 9:30am UTC). This appears not to be the case:


import org.joda.time.DateTime;  

import org.joda.time.DateTimeZone;


public class TzTest {  

public static void main(String[] args) throws Exception {  

DateTimeZone zone = DateTimeZone.forID(""America/Los\_Angeles"");  

DateTime when1 = new DateTime(2009, 11, 1, 0, 30, 0, 0, zone);  

DateTime when2 = new DateTime(2009, 11, 1, 1, 30, 0, 0, zone);  

DateTime when3 = new DateTime(2009, 11, 1, 2, 30, 0, 0, zone);  

System.out.println(when1);  

System.out.println(when2);  

System.out.println(when3);  

}  

}


Results:


2009-11-01T00:30:00.000-07:00 // Correct  

2009-11-01T01:30:00.000-07:00 // Should be -08:00  

2009-11-01T02:30:00.000-08:00 // Correct"
Time,27,#64 Different behaviour of PeriodFormatter,"PeriodFormatter pfmt2 = pfmtbuilder2.append(ISOPeriodFormat.standard() ).func_e3438bc72e365c0b5530cb58c3018827444c1d54bc173f601883700dde2e2975(); is not the same as   

PeriodFormatterBuilder pfmtbuilder1 = new PeriodFormatterBuilder()  

.appendLiteral(""P"")  

.appendYears()  

.appendSuffix(""Y"")  

.appendMonths()  

.appendSuffix(""M"")  

.appendWeeks()  

.appendSuffix(""W"")  

.appendDays()  

.appendSuffix(""D"")  

.appendSeparatorIfFieldsAfter(""T"")  

.appendHours()  

.appendSuffix(""H"")  

.appendMinutes()  

.appendSuffix(""M"")  

.appendSecondsWithOptionalMillis()  

.appendSuffix(""S"");


which is copied from ISOPeriodFormat.standard() method"
